
bin/BCM.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000d1 	.word	0x000000d1
   c:	000000d3 	.word	0x000000d3
	...
  2c:	000000d5 	.word	0x000000d5
	...
  38:	000000d7 	.word	0x000000d7
  3c:	0000037d 	.word	0x0000037d
  40:	000000db 	.word	0x000000db
  44:	000000db 	.word	0x000000db
  48:	000000db 	.word	0x000000db
  4c:	000000db 	.word	0x000000db
  50:	000000db 	.word	0x000000db
  54:	000000db 	.word	0x000000db
  58:	000000db 	.word	0x000000db
  5c:	000000db 	.word	0x000000db
  60:	000000db 	.word	0x000000db
  64:	000000db 	.word	0x000000db
  68:	000000db 	.word	0x000000db
  6c:	000000db 	.word	0x000000db
  70:	000000db 	.word	0x000000db
  74:	0000038d 	.word	0x0000038d
  78:	000000db 	.word	0x000000db
  7c:	000000db 	.word	0x000000db
  80:	000000db 	.word	0x000000db
  84:	000000db 	.word	0x000000db
  88:	000000db 	.word	0x000000db
  8c:	000000db 	.word	0x000000db
  90:	000000db 	.word	0x000000db
  94:	000000db 	.word	0x000000db
	...
  a0:	000000db 	.word	0x000000db
  a4:	000000db 	.word	0x000000db
  a8:	000000db 	.word	0x000000db
  ac:	00000000 	.word	0x00000000
  b0:	000000db 	.word	0x000000db
  b4:	000000db 	.word	0x000000db
  b8:	000000db 	.word	0x000000db
  bc:	000000db 	.word	0x000000db

000000c0 <Reset_Handler>:

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c0:	4801      	ldr	r0, [pc, #4]	; (c8 <Reset_Handler+0x8>)
    BLX     R0
  c2:	4780      	blx	r0
.if (RAM_MODE)
    LDR     R0,=main
  c4:	4801      	ldr	r0, [pc, #4]	; (cc <Reset_Handler+0xc>)
    BX      R0
  c6:	4700      	bx	r0

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c8:	0000094d 	.word	0x0000094d
    BLX     R0
.if (RAM_MODE)
    LDR     R0,=main
  cc:	000006bd 	.word	0x000006bd

000000d0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  d0:	e7fe      	b.n	d0 <NMI_Handler>

000000d2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  d2:	e7fe      	b.n	d2 <HardFault_Handler>

000000d4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  d4:	e7fe      	b.n	d4 <SVC_Handler>

000000d6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  d6:	e7fe      	b.n	d6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  d8:	e7fe      	b.n	d8 <PendSV_Handler+0x2>

000000da <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  da:	e7fe      	b.n	da <Default_Handler>

000000dc <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  de:	f000 f853 	bl	188 <Chip_Clock_GetSystemClockRate>
  e2:	4b01      	ldr	r3, [pc, #4]	; (e8 <SystemCoreClockUpdate+0xc>)
  e4:	6018      	str	r0, [r3, #0]
}
  e6:	bd08      	pop	{r3, pc}
  e8:	10000100 	.word	0x10000100

000000ec <Chip_Clock_GetWDTOSCRate>:

#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
  ec:	b508      	push	{r3, lr}
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
  ee:	4b07      	ldr	r3, [pc, #28]	; (10c <Chip_Clock_GetWDTOSCRate+0x20>)
  f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f2:	231f      	movs	r3, #31
{
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
  f4:	05ca      	lsls	r2, r1, #23
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  f6:	0f12      	lsrs	r2, r2, #28
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f8:	4019      	ands	r1, r3

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  fa:	4b05      	ldr	r3, [pc, #20]	; (110 <Chip_Clock_GetWDTOSCRate+0x24>)
  fc:	0092      	lsls	r2, r2, #2
  fe:	3101      	adds	r1, #1
 100:	0049      	lsls	r1, r1, #1
 102:	58d0      	ldr	r0, [r2, r3]
 104:	f000 fc72 	bl	9ec <__aeabi_uidiv>

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
}
 108:	bd08      	pop	{r3, pc}
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000
 110:	00000dd4 	.word	0x00000dd4

00000114 <Chip_Clock_GetSystemPLLInClockRate>:
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 114:	4b06      	ldr	r3, [pc, #24]	; (130 <Chip_Clock_GetSystemPLLInClockRate+0x1c>)
 116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 118:	2303      	movs	r3, #3
 11a:	4013      	ands	r3, r2
 11c:	d005      	beq.n	12a <Chip_Clock_GetSystemPLLInClockRate+0x16>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
 11e:	2000      	movs	r0, #0
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 120:	2b01      	cmp	r3, #1
 122:	d103      	bne.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 124:	4b03      	ldr	r3, [pc, #12]	; (134 <Chip_Clock_GetSystemPLLInClockRate+0x20>)
 126:	6818      	ldr	r0, [r3, #0]
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_PLLCLKSRC_MAINOSC:
		clkRate = Chip_Clock_GetMainOscRate();
		break;
 128:	e000      	b.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
	case SYSCTL_PLLCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 12a:	4803      	ldr	r0, [pc, #12]	; (138 <Chip_Clock_GetSystemPLLInClockRate+0x24>)
	default:
		clkRate = 0;
	}

	return clkRate;
}
 12c:	4770      	bx	lr
 12e:	46c0      	nop			; (mov r8, r8)
 130:	40048000 	.word	0x40048000
 134:	00000e28 	.word	0x00000e28
 138:	00b71b00 	.word	0x00b71b00

0000013c <Chip_Clock_GetSystemPLLOutClockRate>:

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <Chip_Clock_GetSystemPLLOutClockRate+0x14>)
	return clkRate;
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
 13e:	b510      	push	{r4, lr}
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 140:	689c      	ldr	r4, [r3, #8]
 142:	f7ff ffe7 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
}

/* Compute a PLL frequency */
STATIC uint32_t Chip_Clock_GetPLLFreq(uint32_t PLLReg, uint32_t inputRate)
{
	uint32_t msel = ((PLLReg & 0x1F) + 1);
 146:	231f      	movs	r3, #31
 148:	4023      	ands	r3, r4
 14a:	3301      	adds	r3, #1

	return inputRate * msel;
 14c:	4358      	muls	r0, r3
/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
								 Chip_Clock_GetSystemPLLInClockRate());
}
 14e:	bd10      	pop	{r4, pc}
 150:	40048000 	.word	0x40048000

00000154 <Chip_Clock_GetMainClockRate>:

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
 154:	b508      	push	{r3, lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 156:	4b0a      	ldr	r3, [pc, #40]	; (180 <Chip_Clock_GetMainClockRate+0x2c>)
 158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 15a:	2303      	movs	r3, #3
 15c:	4013      	ands	r3, r2
 15e:	2b02      	cmp	r3, #2
 160:	d006      	beq.n	170 <Chip_Clock_GetMainClockRate+0x1c>
 162:	2b03      	cmp	r3, #3
 164:	d007      	beq.n	176 <Chip_Clock_GetMainClockRate+0x22>
 166:	2b01      	cmp	r3, #1
 168:	d108      	bne.n	17c <Chip_Clock_GetMainClockRate+0x28>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_MAINCLKSRC_PLLIN:
		clkRate = Chip_Clock_GetSystemPLLInClockRate();
 16a:	f7ff ffd3 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
		break;
 16e:	e006      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
		clkRate = Chip_Clock_GetLFOOSCRate();
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
 170:	f7ff ffbc 	bl	ec <Chip_Clock_GetWDTOSCRate>
		break;
 174:	e003      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
#endif

	case SYSCTL_MAINCLKSRC_PLLOUT:
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
 176:	f7ff ffe1 	bl	13c <Chip_Clock_GetSystemPLLOutClockRate>
		break;
 17a:	e000      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 17c:	4801      	ldr	r0, [pc, #4]	; (184 <Chip_Clock_GetMainClockRate+0x30>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 17e:	bd08      	pop	{r3, pc}
 180:	40048000 	.word	0x40048000
 184:	00b71b00 	.word	0x00b71b00

00000188 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 188:	b508      	push	{r3, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 18a:	f7ff ffe3 	bl	154 <Chip_Clock_GetMainClockRate>
 18e:	4b02      	ldr	r3, [pc, #8]	; (198 <Chip_Clock_GetSystemClockRate+0x10>)
 190:	6f99      	ldr	r1, [r3, #120]	; 0x78
 192:	f000 fc2b 	bl	9ec <__aeabi_uidiv>
}
 196:	bd08      	pop	{r3, pc}
 198:	40048000 	.word	0x40048000

0000019c <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 19c:	2140      	movs	r1, #64	; 0x40
 19e:	4a02      	ldr	r2, [pc, #8]	; (1a8 <Chip_GPIO_Init+0xc>)
 1a0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 1a2:	430b      	orrs	r3, r1
 1a4:	67d3      	str	r3, [r2, #124]	; 0x7c
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 1a6:	4770      	bx	lr
 1a8:	40048004 	.word	0x40048004

000001ac <Chip_GPIO_WriteDirBit>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_GPIO);
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
 1ac:	b510      	push	{r4, lr}
 1ae:	2480      	movs	r4, #128	; 0x80
 1b0:	0409      	lsls	r1, r1, #16
 1b2:	0224      	lsls	r4, r4, #8
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 1b4:	1841      	adds	r1, r0, r1
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
 1b6:	2b00      	cmp	r3, #0
 1b8:	d006      	beq.n	1c8 <Chip_GPIO_WriteDirBit+0x1c>
		pGPIO[port].DIR |= 1UL << bit;
 1ba:	2001      	movs	r0, #1
 1bc:	4090      	lsls	r0, r2
 1be:	1c02      	adds	r2, r0, #0
 1c0:	590b      	ldr	r3, [r1, r4]
 1c2:	431a      	orrs	r2, r3
 1c4:	510a      	str	r2, [r1, r4]
 1c6:	e004      	b.n	1d2 <Chip_GPIO_WriteDirBit+0x26>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 1c8:	2001      	movs	r0, #1
 1ca:	4090      	lsls	r0, r2
 1cc:	590b      	ldr	r3, [r1, r4]
 1ce:	4383      	bics	r3, r0
 1d0:	510b      	str	r3, [r1, r4]
	}
}
 1d2:	bd10      	pop	{r4, pc}

000001d4 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
 1d4:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
 1d6:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
 1d8:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
 1da:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
 1dc:	6103      	str	r3, [r0, #16]
 1de:	60c3      	str	r3, [r0, #12]

	return 1;
}
 1e0:	2001      	movs	r0, #1
 1e2:	4770      	bx	lr

000001e4 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
 1e4:	b538      	push	{r3, r4, r5, lr}
 1e6:	1c04      	adds	r4, r0, #0
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1e8:	68c2      	ldr	r2, [r0, #12]
	uint8_t *ptr = RingBuff->data;
 1ea:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
 1ec:	6863      	ldr	r3, [r4, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1ee:	6900      	ldr	r0, [r0, #16]
 1f0:	1a12      	subs	r2, r2, r0

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
 1f2:	2000      	movs	r0, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
 1f4:	429a      	cmp	r2, r3
 1f6:	da0c      	bge.n	212 <Stack_Size+0x12>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 1f8:	68e0      	ldr	r0, [r4, #12]
 1fa:	3b01      	subs	r3, #1
 1fc:	4018      	ands	r0, r3
 1fe:	68a3      	ldr	r3, [r4, #8]
	memcpy(ptr, data, RingBuff->itemSz);
 200:	68a2      	ldr	r2, [r4, #8]

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 202:	4343      	muls	r3, r0
 204:	18e8      	adds	r0, r5, r3
	memcpy(ptr, data, RingBuff->itemSz);
 206:	f000 fd73 	bl	cf0 <memcpy>
	RingBuff->head++;

	return 1;
 20a:	2001      	movs	r0, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
 20c:	68e3      	ldr	r3, [r4, #12]
 20e:	3301      	adds	r3, #1
 210:	60e3      	str	r3, [r4, #12]

	return 1;
}
 212:	bd38      	pop	{r3, r4, r5, pc}

00000214 <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
 214:	b538      	push	{r3, r4, r5, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 216:	68c5      	ldr	r5, [r0, #12]
 218:	6903      	ldr	r3, [r0, #16]
 21a:	1c04      	adds	r4, r0, #0
	uint8_t *ptr = RingBuff->data;
 21c:	6802      	ldr	r2, [r0, #0]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
 21e:	2000      	movs	r0, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 220:	429d      	cmp	r5, r3
 222:	d00e      	beq.n	242 <RingBuffer_Pop+0x2e>
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 224:	6863      	ldr	r3, [r4, #4]
 226:	1c08      	adds	r0, r1, #0
 228:	6921      	ldr	r1, [r4, #16]
 22a:	3b01      	subs	r3, #1
 22c:	400b      	ands	r3, r1
 22e:	68a1      	ldr	r1, [r4, #8]
 230:	434b      	muls	r3, r1
 232:	18d1      	adds	r1, r2, r3
	memcpy(data, ptr, RingBuff->itemSz);
 234:	68a2      	ldr	r2, [r4, #8]
 236:	f000 fd5b 	bl	cf0 <memcpy>
	RingBuff->tail++;

	return 1;
 23a:	2001      	movs	r0, #1
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;
 23c:	6923      	ldr	r3, [r4, #16]
 23e:	3301      	adds	r3, #1
 240:	6123      	str	r3, [r4, #16]

	return 1;
}
 242:	bd38      	pop	{r3, r4, r5, pc}

00000244 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 244:	b510      	push	{r4, lr}
 246:	2480      	movs	r4, #128	; 0x80
 248:	4b07      	ldr	r3, [pc, #28]	; (268 <Chip_UART_Init+0x24>)
 24a:	0164      	lsls	r4, r4, #5
 24c:	1d19      	adds	r1, r3, #4
 24e:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 250:	3398      	adds	r3, #152	; 0x98
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 252:	4322      	orrs	r2, r4
 254:	67ca      	str	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 256:	2201      	movs	r2, #1
 258:	601a      	str	r2, [r3, #0]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 25a:	2307      	movs	r3, #7
 25c:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 25e:	3b04      	subs	r3, #4
 260:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 262:	330d      	adds	r3, #13
 264:	6283      	str	r3, [r0, #40]	; 0x28
}
 266:	bd10      	pop	{r4, pc}
 268:	40048000 	.word	0x40048000

0000026c <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int sent = 0;
 26c:	2300      	movs	r3, #0
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_UART0);
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
 26e:	b510      	push	{r4, lr}
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
 270:	4293      	cmp	r3, r2
 272:	da06      	bge.n	282 <Chip_UART_Send+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 274:	6944      	ldr	r4, [r0, #20]
 276:	06a4      	lsls	r4, r4, #26
 278:	d503      	bpl.n	282 <Chip_UART_Send+0x16>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
 27a:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
 27c:	3301      	adds	r3, #1
 27e:	6004      	str	r4, [r0, #0]
 280:	e7f6      	b.n	270 <Chip_UART_Send+0x4>
	}

	return sent;
}
 282:	1c18      	adds	r0, r3, #0
 284:	bd10      	pop	{r4, pc}

00000286 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
 286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 288:	1c07      	adds	r7, r0, #0
 28a:	1c0e      	adds	r6, r1, #0
 28c:	1c14      	adds	r4, r2, #0
	int pass, sent = 0;
 28e:	2500      	movs	r5, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
 290:	2c00      	cmp	r4, #0
 292:	dd08      	ble.n	2a6 <Chip_UART_SendBlocking+0x20>
		pass = Chip_UART_Send(pUART, p8, numBytes);
 294:	1c31      	adds	r1, r6, #0
 296:	1c22      	adds	r2, r4, #0
 298:	1c38      	adds	r0, r7, #0
 29a:	f7ff ffe7 	bl	26c <Chip_UART_Send>
		numBytes -= pass;
 29e:	1a24      	subs	r4, r4, r0
		sent += pass;
 2a0:	182d      	adds	r5, r5, r0
		p8 += pass;
 2a2:	1836      	adds	r6, r6, r0
 2a4:	e7f4      	b.n	290 <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
 2a6:	1c28      	adds	r0, r5, #0
 2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000002aa <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
	int readBytes = 0;
 2aa:	2300      	movs	r3, #0
	return sent;
}

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
 2ac:	b510      	push	{r4, lr}
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
 2ae:	4293      	cmp	r3, r2
 2b0:	da06      	bge.n	2c0 <Chip_UART_Read+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 2b2:	6944      	ldr	r4, [r0, #20]
 2b4:	07e4      	lsls	r4, r4, #31
 2b6:	d503      	bpl.n	2c0 <Chip_UART_Read+0x16>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
 2b8:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
 2ba:	54cc      	strb	r4, [r1, r3]
		p8++;
		readBytes++;
 2bc:	3301      	adds	r3, #1
 2be:	e7f6      	b.n	2ae <Chip_UART_Read+0x4>
	}

	return readBytes;
}
 2c0:	1c18      	adds	r0, r3, #0
 2c2:	bd10      	pop	{r4, pc}

000002c4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 2c4:	b570      	push	{r4, r5, r6, lr}
 2c6:	1c0e      	adds	r6, r1, #0
 2c8:	1c04      	adds	r4, r0, #0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2ca:	f7ff ff43 	bl	154 <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 2ce:	0131      	lsls	r1, r6, #4
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2d0:	1c05      	adds	r5, r0, #0
	div = clkin / (baudrate * 16);
 2d2:	f000 fb8b 	bl	9ec <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2d6:	2280      	movs	r2, #128	; 0x80
 2d8:	1c01      	adds	r1, r0, #0
 2da:	68e3      	ldr	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2dc:	1c0e      	adds	r6, r1, #0
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2de:	4313      	orrs	r3, r2
 2e0:	60e3      	str	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2e2:	23ff      	movs	r3, #255	; 0xff

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
 2e4:	0a00      	lsrs	r0, r0, #8
 2e6:	401e      	ands	r6, r3
	pUART->DLM = (uint32_t) dlm;
 2e8:	4003      	ands	r3, r0
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2ea:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 2ec:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 2ee:	68e3      	ldr	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 2f0:	1c28      	adds	r0, r5, #0
 2f2:	4393      	bics	r3, r2
 2f4:	60e3      	str	r3, [r4, #12]
 2f6:	f000 fb79 	bl	9ec <__aeabi_uidiv>
}
 2fa:	bd70      	pop	{r4, r5, r6, pc}

000002fc <__reverse>:
#include "util.h"

void __reverse(char* begin,char* end) {
	char temp;

	while (end  >begin)
 2fc:	4281      	cmp	r1, r0
 2fe:	d906      	bls.n	30e <__reverse+0x12>
	{
		temp = *end;
 300:	780b      	ldrb	r3, [r1, #0]
		*end-- = *begin;
 302:	7802      	ldrb	r2, [r0, #0]
 304:	3901      	subs	r1, #1
 306:	704a      	strb	r2, [r1, #1]
		*begin++ = temp;
 308:	7003      	strb	r3, [r0, #0]
 30a:	3001      	adds	r0, #1
 30c:	e7f6      	b.n	2fc <__reverse>
	}
}
 30e:	4770      	bx	lr

00000310 <itoa>:

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 310:	1c13      	adds	r3, r2, #0
		*end-- = *begin;
		*begin++ = temp;
	}
}

char* itoa(int value, char* buffer, int base) {
 312:	b5f0      	push	{r4, r5, r6, r7, lr}

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 314:	3b02      	subs	r3, #2
		*end-- = *begin;
		*begin++ = temp;
	}
}

char* itoa(int value, char* buffer, int base) {
 316:	b085      	sub	sp, #20
 318:	1c04      	adds	r4, r0, #0
 31a:	1c0f      	adds	r7, r1, #0
 31c:	9201      	str	r2, [sp, #4]
 31e:	1c0d      	adds	r5, r1, #0

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 320:	2b0e      	cmp	r3, #14
 322:	d824      	bhi.n	36e <itoa+0x5e>

char* itoa(int value, char* buffer, int base) {
	static const char digits[] = "0123456789abcdef";

	char* buffer_copy = buffer;
	int32_t sign = 0;
 324:	2300      	movs	r3, #0
 326:	9302      	str	r3, [sp, #8]
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 328:	2a0a      	cmp	r2, #10
 32a:	d103      	bne.n	334 <itoa+0x24>
 32c:	17c3      	asrs	r3, r0, #31
 32e:	18c4      	adds	r4, r0, r3
 330:	9002      	str	r0, [sp, #8]
 332:	405c      	eors	r4, r3
 334:	1c3e      	adds	r6, r7, #0
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
 336:	1c20      	adds	r0, r4, #0
 338:	9901      	ldr	r1, [sp, #4]
 33a:	f000 fbe7 	bl	b0c <__aeabi_idiv>
			rem = value % base;
 33e:	9901      	ldr	r1, [sp, #4]
	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
 340:	9003      	str	r0, [sp, #12]
			rem = value % base;
 342:	1c20      	adds	r0, r4, #0
 344:	f000 fcc8 	bl	cd8 <__aeabi_idivmod>
			*buffer++ = digits[rem];		// append the remainder to the string
 348:	4b0b      	ldr	r3, [pc, #44]	; (378 <itoa+0x68>)
 34a:	9c03      	ldr	r4, [sp, #12]
 34c:	5c5b      	ldrb	r3, [r3, r1]
 34e:	1c75      	adds	r5, r6, #1
 350:	7033      	strb	r3, [r6, #0]
		} while ((value = quot));				// loop while there is something to convert
 352:	2c00      	cmp	r4, #0
 354:	d001      	beq.n	35a <itoa+0x4a>
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
			rem = value % base;
			*buffer++ = digits[rem];		// append the remainder to the string
 356:	1c2e      	adds	r6, r5, #0
 358:	e7ed      	b.n	336 <itoa+0x26>
		} while ((value = quot));				// loop while there is something to convert

		if (sign<0)							// was the value negative?
 35a:	9b02      	ldr	r3, [sp, #8]
 35c:	2b00      	cmp	r3, #0
 35e:	da02      	bge.n	366 <itoa+0x56>
			*buffer++ = '-';					// append the sign
 360:	232d      	movs	r3, #45	; 0x2d
 362:	1cb5      	adds	r5, r6, #2
 364:	7073      	strb	r3, [r6, #1]

		__reverse(buffer_copy, buffer-1);		// reverse the string
 366:	1e69      	subs	r1, r5, #1
 368:	1c38      	adds	r0, r7, #0
 36a:	f7ff ffc7 	bl	2fc <__reverse>
	}

	*buffer='\0';
 36e:	2300      	movs	r3, #0
	return buffer_copy;
 370:	1c38      	adds	r0, r7, #0
			*buffer++ = '-';					// append the sign

		__reverse(buffer_copy, buffer-1);		// reverse the string
	}

	*buffer='\0';
 372:	702b      	strb	r3, [r5, #0]
	return buffer_copy;
 374:	b005      	add	sp, #20
 376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 378:	00000e14 	.word	0x00000e14

0000037c <SysTick_Handler>:

/**
 * SysTick Timer Interrupt Handler. Counts milliseconds since start
 */
void SysTick_Handler(void) {
	msTicks++;
 37c:	4a02      	ldr	r2, [pc, #8]	; (388 <SysTick_Handler+0xc>)
 37e:	6813      	ldr	r3, [r2, #0]
 380:	3301      	adds	r3, #1
 382:	6013      	str	r3, [r2, #0]
}
 384:	4770      	bx	lr
 386:	46c0      	nop			; (mov r8, r8)
 388:	1000028c 	.word	0x1000028c

0000038c <CAN_IRQHandler>:

/**
 * CCAN Interrupt Handler. Calls the isr() API located in the CCAN ROM
 */
void CAN_IRQHandler(void) {
 38c:	b508      	push	{r3, lr}
	LPC_CCAN_API->isr();
 38e:	4b03      	ldr	r3, [pc, #12]	; (39c <CAN_IRQHandler+0x10>)
 390:	681b      	ldr	r3, [r3, #0]
 392:	689b      	ldr	r3, [r3, #8]
 394:	685b      	ldr	r3, [r3, #4]
 396:	4798      	blx	r3
}
 398:	bd08      	pop	{r3, pc}
 39a:	46c0      	nop			; (mov r8, r8)
 39c:	1fff1ff8 	.word	0x1fff1ff8

000003a0 <Board_SysTick_Init>:
// -------------------------------------------------------------
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
 3a0:	b510      	push	{r4, lr}
	msTicks = 0;
 3a2:	2400      	movs	r4, #0
 3a4:	4b0c      	ldr	r3, [pc, #48]	; (3d8 <Board_SysTick_Init+0x38>)
 3a6:	601c      	str	r4, [r3, #0]

	// Update the value of SystemCoreClock to the clock speed in hz
	SystemCoreClockUpdate();
 3a8:	f7ff fe98 	bl	dc <SystemCoreClockUpdate>

	// Initialize SysTick Timer to fire interrupt at 1kHz
	return (SysTick_Config (SystemCoreClock / 1000));
 3ac:	21fa      	movs	r1, #250	; 0xfa
 3ae:	4b0b      	ldr	r3, [pc, #44]	; (3dc <Board_SysTick_Init+0x3c>)
 3b0:	0089      	lsls	r1, r1, #2
 3b2:	6818      	ldr	r0, [r3, #0]
 3b4:	f000 fb1a 	bl	9ec <__aeabi_uidiv>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 3b8:	4a09      	ldr	r2, [pc, #36]	; (3e0 <Board_SysTick_Init+0x40>)
 3ba:	3801      	subs	r0, #1
 3bc:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3be:	20c0      	movs	r0, #192	; 0xc0
 3c0:	4908      	ldr	r1, [pc, #32]	; (3e4 <Board_SysTick_Init+0x44>)
 3c2:	0600      	lsls	r0, r0, #24
 3c4:	6a0b      	ldr	r3, [r1, #32]
 3c6:	021b      	lsls	r3, r3, #8
 3c8:	0a1b      	lsrs	r3, r3, #8
 3ca:	4303      	orrs	r3, r0
 3cc:	620b      	str	r3, [r1, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3ce:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 3d0:	6094      	str	r4, [r2, #8]
}
 3d2:	1c20      	adds	r0, r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3d4:	6013      	str	r3, [r2, #0]
 3d6:	bd10      	pop	{r4, pc}
 3d8:	1000028c 	.word	0x1000028c
 3dc:	10000100 	.word	0x10000100
 3e0:	e000e010 	.word	0xe000e010
 3e4:	e000ed00 	.word	0xe000ed00

000003e8 <Board_LEDs_Init>:

void Board_LEDs_Init(void) {
 3e8:	b510      	push	{r4, lr}
	Chip_GPIO_Init(LPC_GPIO);
 3ea:	24a0      	movs	r4, #160	; 0xa0
 3ec:	05e4      	lsls	r4, r4, #23
 3ee:	1c20      	adds	r0, r4, #0
 3f0:	f7ff fed4 	bl	19c <Chip_GPIO_Init>
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
 3f4:	1c20      	adds	r0, r4, #0
 3f6:	2102      	movs	r1, #2
 3f8:	2205      	movs	r2, #5
 3fa:	2301      	movs	r3, #1
 3fc:	f7ff fed6 	bl	1ac <Chip_GPIO_WriteDirBit>
}
 400:	bd10      	pop	{r4, pc}
	...

00000404 <Board_UART_Init>:
		SSP_Tx_Buf[i] = 0x01;
		SSP_Rx_Buf[i] = 0xAA;
	}
} 

void Board_UART_Init(uint32_t baudrate) {
 404:	b538      	push	{r3, r4, r5, lr}
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 406:	4b0b      	ldr	r3, [pc, #44]	; (434 <Board_UART_Init+0x30>)
 408:	2201      	movs	r2, #1
 40a:	1c19      	adds	r1, r3, #0
 40c:	1c05      	adds	r5, r0, #0
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
 40e:	4c0a      	ldr	r4, [pc, #40]	; (438 <Board_UART_Init+0x34>)
 410:	33a8      	adds	r3, #168	; 0xa8
 412:	31a4      	adds	r1, #164	; 0xa4
 414:	600a      	str	r2, [r1, #0]
 416:	1c20      	adds	r0, r4, #0
 418:	601a      	str	r2, [r3, #0]
 41a:	f7ff ff13 	bl	244 <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, baudrate);
 41e:	1c29      	adds	r1, r5, #0
 420:	1c20      	adds	r0, r4, #0
 422:	f7ff ff4f 	bl	2c4 <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 426:	2303      	movs	r3, #3
 428:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 42a:	337e      	adds	r3, #126	; 0x7e
 42c:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
 42e:	3b01      	subs	r3, #1
 430:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
}
 432:	bd38      	pop	{r3, r4, r5, pc}
 434:	40044000 	.word	0x40044000
 438:	40008000 	.word	0x40008000

0000043c <Board_UART_Print>:

void Board_UART_Print(const char *str) {
 43c:	b510      	push	{r4, lr}
 43e:	1c04      	adds	r4, r0, #0
	Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
 440:	f000 fc94 	bl	d6c <strlen>
 444:	1c21      	adds	r1, r4, #0
 446:	1c02      	adds	r2, r0, #0
 448:	4801      	ldr	r0, [pc, #4]	; (450 <Board_UART_Print+0x14>)
 44a:	f7ff ff1c 	bl	286 <Chip_UART_SendBlocking>
}
 44e:	bd10      	pop	{r4, pc}
 450:	40008000 	.word	0x40008000

00000454 <Board_UART_Println>:

void Board_UART_Println(const char *str) {
 454:	b508      	push	{r3, lr}
	Board_UART_Print(str);
 456:	f7ff fff1 	bl	43c <Board_UART_Print>
	Board_UART_Print("\r\n");
 45a:	4802      	ldr	r0, [pc, #8]	; (464 <Board_UART_Println+0x10>)
 45c:	f7ff ffee 	bl	43c <Board_UART_Print>
}
 460:	bd08      	pop	{r3, pc}
 462:	46c0      	nop			; (mov r8, r8)
 464:	00000e2c 	.word	0x00000e2c

00000468 <Board_UART_PrintNum>:

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
 468:	b538      	push	{r3, r4, r5, lr}
 46a:	1c0b      	adds	r3, r1, #0
	static char str[32];
	itoa(num, str, base);
 46c:	4c07      	ldr	r4, [pc, #28]	; (48c <Board_UART_PrintNum+0x24>)
void Board_UART_Println(const char *str) {
	Board_UART_Print(str);
	Board_UART_Print("\r\n");
}

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
 46e:	1c15      	adds	r5, r2, #0
	static char str[32];
	itoa(num, str, base);
 470:	1c21      	adds	r1, r4, #0
 472:	1c1a      	adds	r2, r3, #0
 474:	f7ff ff4c 	bl	310 <itoa>
	Board_UART_Print(str);
 478:	1c20      	adds	r0, r4, #0
 47a:	f7ff ffdf 	bl	43c <Board_UART_Print>
	if (crlf) Board_UART_Print("\r\n");
 47e:	2d00      	cmp	r5, #0
 480:	d002      	beq.n	488 <Board_UART_PrintNum+0x20>
 482:	4803      	ldr	r0, [pc, #12]	; (490 <Board_UART_PrintNum+0x28>)
 484:	f7ff ffda 	bl	43c <Board_UART_Print>
}
 488:	bd38      	pop	{r3, r4, r5, pc}
 48a:	46c0      	nop			; (mov r8, r8)
 48c:	10000108 	.word	0x10000108
 490:	00000e2c 	.word	0x00000e2c

00000494 <Board_UART_Read>:

void Board_UART_SendBlocking(const void *data, uint8_t num_bytes) {
	Chip_UART_SendBlocking(LPC_USART, data, num_bytes);
}

int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
 494:	b508      	push	{r3, lr}
 496:	1c03      	adds	r3, r0, #0
 498:	1c0a      	adds	r2, r1, #0
	return Chip_UART_Read(LPC_USART, data, num_bytes);
 49a:	4803      	ldr	r0, [pc, #12]	; (4a8 <Board_UART_Read+0x14>)
 49c:	1c19      	adds	r1, r3, #0
 49e:	f7ff ff04 	bl	2aa <Chip_UART_Read>
 4a2:	b240      	sxtb	r0, r0
}
 4a4:	bd08      	pop	{r3, pc}
 4a6:	46c0      	nop			; (mov r8, r8)
 4a8:	40008000 	.word	0x40008000

000004ac <CAN_baudrate_calculate>:

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 4ae:	1c0c      	adds	r4, r1, #0
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 4b0:	2180      	movs	r1, #128	; 0x80
 4b2:	1c05      	adds	r5, r0, #0
 4b4:	4a1b      	ldr	r2, [pc, #108]	; (524 <CAN_baudrate_calculate+0x78>)
 4b6:	0289      	lsls	r1, r1, #10
 4b8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 4ba:	430b      	orrs	r3, r1
 4bc:	67d3      	str	r3, [r2, #124]	; 0x7c
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
 4be:	f7ff fe49 	bl	154 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
 4c2:	1c29      	adds	r1, r5, #0
 4c4:	f000 fa92 	bl	9ec <__aeabi_uidiv>
 4c8:	2101      	movs	r1, #1
 4ca:	4684      	mov	ip, r0
 4cc:	2503      	movs	r5, #3
 4ce:	434d      	muls	r5, r1
int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
	return Chip_UART_Read(LPC_USART, data, num_bytes);
}

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 4d0:	1c0e      	adds	r6, r1, #0
 4d2:	1c2f      	adds	r7, r5, #0
 4d4:	2201      	movs	r2, #1
 4d6:	1e4b      	subs	r3, r1, #1
 4d8:	9301      	str	r3, [sp, #4]
 4da:	1c38      	adds	r0, r7, #0
 4dc:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 4de:	4584      	cmp	ip, r0
 4e0:	d113      	bne.n	50a <CAN_baudrate_calculate+0x5e>
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 4e2:	9901      	ldr	r1, [sp, #4]

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
 4e4:	3b03      	subs	r3, #3
					seg1 = segs / 2;
 4e6:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 4e8:	6021      	str	r1, [r4, #0]
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 4ea:	3a01      	subs	r2, #1
 4ec:	0201      	lsls	r1, r0, #8
 4ee:	430a      	orrs	r2, r1
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
 4f0:	1e01      	subs	r1, r0, #0
 4f2:	2903      	cmp	r1, #3
 4f4:	d900      	bls.n	4f8 <CAN_baudrate_calculate+0x4c>
 4f6:	2103      	movs	r1, #3
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 4f8:	0189      	lsls	r1, r1, #6
 4fa:	430a      	orrs	r2, r1
 4fc:	2107      	movs	r1, #7
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
 4fe:	1a1b      	subs	r3, r3, r0
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 500:	400b      	ands	r3, r1
 502:	031b      	lsls	r3, r3, #12
 504:	431a      	orrs	r2, r3
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
 506:	6062      	str	r2, [r4, #4]
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
					return;
 508:	e00b      	b.n	522 <CAN_baudrate_calculate+0x76>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
 50a:	3301      	adds	r3, #1
 50c:	1980      	adds	r0, r0, r6
 50e:	2b12      	cmp	r3, #18
 510:	d1e5      	bne.n	4de <CAN_baudrate_calculate+0x32>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
 512:	3201      	adds	r2, #1
 514:	1876      	adds	r6, r6, r1
 516:	197f      	adds	r7, r7, r5
 518:	2a21      	cmp	r2, #33	; 0x21
 51a:	d1de      	bne.n	4da <CAN_baudrate_calculate+0x2e>
 51c:	3101      	adds	r1, #1
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
 51e:	2911      	cmp	r1, #17
 520:	d1d4      	bne.n	4cc <CAN_baudrate_calculate+0x20>
					return;
				}
			}
		}
	}
}
 522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 524:	40048004 	.word	0x40048004

00000528 <Board_CAN_Init>:

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {
 528:	b510      	push	{r4, lr}
 52a:	b08a      	sub	sp, #40	; 0x28

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 52c:	9304      	str	r3, [sp, #16]
 52e:	2300      	movs	r3, #0
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 530:	4c0d      	ldr	r4, [pc, #52]	; (568 <Board_CAN_Init+0x40>)

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 532:	9102      	str	r1, [sp, #8]
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 534:	4669      	mov	r1, sp

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 536:	9203      	str	r2, [sp, #12]
 538:	9305      	str	r3, [sp, #20]
 53a:	9306      	str	r3, [sp, #24]
 53c:	9307      	str	r3, [sp, #28]
 53e:	9308      	str	r3, [sp, #32]
 540:	9309      	str	r3, [sp, #36]	; 0x24
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 542:	f7ff ffb3 	bl	4ac <CAN_baudrate_calculate>

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 546:	6823      	ldr	r3, [r4, #0]
 548:	4668      	mov	r0, sp
 54a:	689b      	ldr	r3, [r3, #8]
 54c:	2101      	movs	r1, #1
 54e:	681b      	ldr	r3, [r3, #0]
 550:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 552:	6823      	ldr	r3, [r4, #0]
 554:	a802      	add	r0, sp, #8
 556:	689b      	ldr	r3, [r3, #8]
 558:	69db      	ldr	r3, [r3, #28]
 55a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 55c:	2280      	movs	r2, #128	; 0x80
 55e:	4b03      	ldr	r3, [pc, #12]	; (56c <Board_CAN_Init+0x44>)
 560:	0192      	lsls	r2, r2, #6
 562:	601a      	str	r2, [r3, #0]

	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);
}
 564:	b00a      	add	sp, #40	; 0x28
 566:	bd10      	pop	{r4, pc}
 568:	1fff1ff8 	.word	0x1fff1ff8
 56c:	e000e100 	.word	0xe000e100

00000570 <CAN_tx>:
/*	CAN transmit callback */
/*	Function is executed by the Callback handler after
    a CAN message has been transmitted */
void CAN_tx(uint8_t msg_obj_num) {
	msg_obj_num = msg_obj_num;
}
 570:	4770      	bx	lr
	...

00000574 <CAN_error>:
/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
 574:	2201      	movs	r2, #1

/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
 576:	4b02      	ldr	r3, [pc, #8]	; (580 <CAN_error+0xc>)
 578:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
 57a:	4b02      	ldr	r3, [pc, #8]	; (584 <CAN_error+0x10>)
 57c:	701a      	strb	r2, [r3, #0]
}
 57e:	4770      	bx	lr
 580:	10000134 	.word	0x10000134
 584:	10000138 	.word	0x10000138

00000588 <CAN_rx>:
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 588:	b538      	push	{r3, r4, r5, lr}
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 58a:	4c08      	ldr	r4, [pc, #32]	; (5ac <CAN_rx+0x24>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <CAN_rx+0x28>)
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 58e:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 590:	681b      	ldr	r3, [r3, #0]
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 592:	1c05      	adds	r5, r0, #0
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 594:	689b      	ldr	r3, [r3, #8]
 596:	1c20      	adds	r0, r4, #0
 598:	68db      	ldr	r3, [r3, #12]
 59a:	4798      	blx	r3
	if (msg_obj_num == 1) {
 59c:	2d01      	cmp	r5, #1
 59e:	d103      	bne.n	5a8 <CAN_rx+0x20>
		RingBuffer_Insert(&can_rx_buffer, &msg_obj);
 5a0:	4804      	ldr	r0, [pc, #16]	; (5b4 <CAN_rx+0x2c>)
 5a2:	1c21      	adds	r1, r4, #0
 5a4:	f7ff fe1e 	bl	1e4 <RingBuffer_Insert>
	}
}
 5a8:	bd38      	pop	{r3, r4, r5, pc}
 5aa:	46c0      	nop			; (mov r8, r8)
 5ac:	10000150 	.word	0x10000150
 5b0:	1fff1ff8 	.word	0x1fff1ff8
 5b4:	1000013c 	.word	0x1000013c

000005b8 <drive_info>:
 */
void _delay(uint32_t ms) {
	uint32_t curTicks = msTicks;
	while ((msTicks - curTicks) < ms);
}
void drive_info(CCAN_MSG_OBJ_T msg) {
 5b8:	b084      	sub	sp, #16
 5ba:	9000      	str	r0, [sp, #0]
 5bc:	1c10      	adds	r0, r2, #0
 5be:	9303      	str	r3, [sp, #12]
 5c0:	b293      	uxth	r3, r2
 5c2:	9101      	str	r1, [sp, #4]
 5c4:	9202      	str	r2, [sp, #8]
	if (msg.data_16[0]==0x0020) {
		key_ignition ="RUN";
 5c6:	4919      	ldr	r1, [pc, #100]	; (62c <drive_info+0x74>)
 5c8:	0c02      	lsrs	r2, r0, #16
void _delay(uint32_t ms) {
	uint32_t curTicks = msTicks;
	while ((msTicks - curTicks) < ms);
}
void drive_info(CCAN_MSG_OBJ_T msg) {
	if (msg.data_16[0]==0x0020) {
 5ca:	2b20      	cmp	r3, #32
 5cc:	d002      	beq.n	5d4 <drive_info+0x1c>
		key_ignition ="RUN";
	}
	if (msg.data_16[0]==0x0040) {
 5ce:	2b40      	cmp	r3, #64	; 0x40
 5d0:	d102      	bne.n	5d8 <drive_info+0x20>
		key_ignition = "START";
 5d2:	4917      	ldr	r1, [pc, #92]	; (630 <drive_info+0x78>)
 5d4:	4b17      	ldr	r3, [pc, #92]	; (634 <drive_info+0x7c>)
 5d6:	6019      	str	r1, [r3, #0]
	}
	if (msg.data_16[1]==0x0000){
		drive_status = "PARKED";
 5d8:	4917      	ldr	r1, [pc, #92]	; (638 <drive_info+0x80>)
		key_ignition ="RUN";
	}
	if (msg.data_16[0]==0x0040) {
		key_ignition = "START";
	}
	if (msg.data_16[1]==0x0000){
 5da:	2a00      	cmp	r2, #0
 5dc:	d002      	beq.n	5e4 <drive_info+0x2c>
		drive_status = "PARKED";
	}
	if (msg.data_16[1]==0X00F0){
 5de:	2af0      	cmp	r2, #240	; 0xf0
 5e0:	d103      	bne.n	5ea <drive_info+0x32>
		drive_status = "FORWARD";
 5e2:	4916      	ldr	r1, [pc, #88]	; (63c <drive_info+0x84>)
 5e4:	4b16      	ldr	r3, [pc, #88]	; (640 <drive_info+0x88>)
 5e6:	6019      	str	r1, [r3, #0]
 5e8:	e011      	b.n	60e <drive_info+0x56>
	}
	if (msg.data_16[1]==0X0030){
 5ea:	2a30      	cmp	r2, #48	; 0x30
 5ec:	d103      	bne.n	5f6 <drive_info+0x3e>
		drive_status = "REVERSE";
 5ee:	4915      	ldr	r1, [pc, #84]	; (644 <drive_info+0x8c>)
 5f0:	4b13      	ldr	r3, [pc, #76]	; (640 <drive_info+0x88>)
 5f2:	6019      	str	r1, [r3, #0]
 5f4:	e011      	b.n	61a <drive_info+0x62>
	}
	if (msg.data_16[1]==0X0F00){
 5f6:	23f0      	movs	r3, #240	; 0xf0
 5f8:	011b      	lsls	r3, r3, #4
 5fa:	429a      	cmp	r2, r3
 5fc:	d101      	bne.n	602 <drive_info+0x4a>
		drive_status = "SHUTDOWN_IMPENDING";
 5fe:	4a12      	ldr	r2, [pc, #72]	; (648 <drive_info+0x90>)
 600:	e010      	b.n	624 <drive_info+0x6c>
	}
	if (msg.data_16[1]==0X0300){
 602:	23c0      	movs	r3, #192	; 0xc0
 604:	009b      	lsls	r3, r3, #2
 606:	429a      	cmp	r2, r3
 608:	d101      	bne.n	60e <drive_info+0x56>
		drive_status = "INIT";
 60a:	4a10      	ldr	r2, [pc, #64]	; (64c <drive_info+0x94>)
 60c:	e00a      	b.n	624 <drive_info+0x6c>
	}
	if (msg.data_16[1]==0XF000){
 60e:	23f0      	movs	r3, #240	; 0xf0
 610:	021b      	lsls	r3, r3, #8
 612:	429a      	cmp	r2, r3
 614:	d101      	bne.n	61a <drive_info+0x62>
		drive_status = "CHARGE";
 616:	4a0e      	ldr	r2, [pc, #56]	; (650 <drive_info+0x98>)
 618:	e004      	b.n	624 <drive_info+0x6c>
	}
	if (msg.data_16[1]==0X3000){
 61a:	23c0      	movs	r3, #192	; 0xc0
 61c:	019b      	lsls	r3, r3, #6
 61e:	429a      	cmp	r2, r3
 620:	d102      	bne.n	628 <drive_info+0x70>
		drive_status= "OFF";
 622:	4a0c      	ldr	r2, [pc, #48]	; (654 <drive_info+0x9c>)
 624:	4b06      	ldr	r3, [pc, #24]	; (640 <drive_info+0x88>)
 626:	601a      	str	r2, [r3, #0]
	}
}
 628:	b004      	add	sp, #16
 62a:	4770      	bx	lr
 62c:	00000e2f 	.word	0x00000e2f
 630:	00000e33 	.word	0x00000e33
 634:	100002a8 	.word	0x100002a8
 638:	00000e39 	.word	0x00000e39
 63c:	00000e40 	.word	0x00000e40
 640:	10000294 	.word	0x10000294
 644:	00000e48 	.word	0x00000e48
 648:	00000e50 	.word	0x00000e50
 64c:	00000e63 	.word	0x00000e63
 650:	00000e68 	.word	0x00000e68
 654:	00000e6f 	.word	0x00000e6f

00000658 <car_status>:
void throttle_info(CCAN_MSG_OBJ_T msg) {
	acc_val = msg.data_16[0];
	brake_val = msg.data_16[1];
}	

void car_status(void) {
 658:	b508      	push	{r3, lr}
	Board_UART_Print("Key Ignition: ");
 65a:	4810      	ldr	r0, [pc, #64]	; (69c <car_status+0x44>)
 65c:	f7ff feee 	bl	43c <Board_UART_Print>
	Board_UART_Println(key_ignition);
 660:	4b0f      	ldr	r3, [pc, #60]	; (6a0 <car_status+0x48>)
 662:	6818      	ldr	r0, [r3, #0]
 664:	f7ff fef6 	bl	454 <Board_UART_Println>
	Board_UART_Print("Drive Status: ");
 668:	480e      	ldr	r0, [pc, #56]	; (6a4 <car_status+0x4c>)
 66a:	f7ff fee7 	bl	43c <Board_UART_Print>
	Board_UART_Println(drive_status);
 66e:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <car_status+0x50>)
 670:	6818      	ldr	r0, [r3, #0]
 672:	f7ff feef 	bl	454 <Board_UART_Println>
	Board_UART_Print("Throttle Acc Val: ");
 676:	480d      	ldr	r0, [pc, #52]	; (6ac <car_status+0x54>)
 678:	f7ff fee0 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(acc_val,10,true);
 67c:	4b0c      	ldr	r3, [pc, #48]	; (6b0 <car_status+0x58>)
 67e:	210a      	movs	r1, #10
 680:	6818      	ldr	r0, [r3, #0]
 682:	2201      	movs	r2, #1
 684:	f7ff fef0 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print("Throttle Brake Val: ");
 688:	480a      	ldr	r0, [pc, #40]	; (6b4 <car_status+0x5c>)
 68a:	f7ff fed7 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(brake_val,10,true); 
 68e:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <car_status+0x60>)
 690:	210a      	movs	r1, #10
 692:	6818      	ldr	r0, [r3, #0]
 694:	2201      	movs	r2, #1
 696:	f7ff fee7 	bl	468 <Board_UART_PrintNum>
}
 69a:	bd08      	pop	{r3, pc}
 69c:	00000e73 	.word	0x00000e73
 6a0:	100002a8 	.word	0x100002a8
 6a4:	00000e82 	.word	0x00000e82
 6a8:	10000294 	.word	0x10000294
 6ac:	00000e91 	.word	0x00000e91
 6b0:	1000029c 	.word	0x1000029c
 6b4:	00000ea4 	.word	0x00000ea4
 6b8:	10000290 	.word	0x10000290

000006bc <main>:
int main(void)
{

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 6bc:	20e1      	movs	r0, #225	; 0xe1

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 6be:	b5f0      	push	{r4, r5, r6, r7, lr}

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 6c0:	0200      	lsls	r0, r0, #8

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 6c2:	b08d      	sub	sp, #52	; 0x34

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 6c4:	f7ff fe9e 	bl	404 <Board_UART_Init>
	//Board_UART_Println("Started up");

	//---------------
	// Initialize SysTick Timer to generate millisecond count
	if (Board_SysTick_Init()) {
 6c8:	f7ff fe6a 	bl	3a0 <Board_SysTick_Init>
 6cc:	1e07      	subs	r7, r0, #0
 6ce:	d003      	beq.n	6d8 <main+0x1c>
		Board_UART_Println("Failed to Initialize SysTick. ");
 6d0:	487f      	ldr	r0, [pc, #508]	; (8d0 <main+0x214>)
 6d2:	f7ff febf 	bl	454 <Board_UART_Println>
		// Unrecoverable Error. Hang.
		while(1);
 6d6:	e7fe      	b.n	6d6 <main+0x1a>
	}

	//---------------
	// Initialize GPIO and LED as output
	Board_LEDs_Init();
 6d8:	f7ff fe86 	bl	3e8 <Board_LEDs_Init>
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 6dc:	2220      	movs	r2, #32
//	SSP_Buffer_Init();
	
	//---------------
	// Initialize CAN  and CAN Ring Buffer

	RingBuffer_Init(&can_rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), BUFFER_SIZE);
 6de:	4e7d      	ldr	r6, [pc, #500]	; (8d4 <main+0x218>)
 6e0:	4b7d      	ldr	r3, [pc, #500]	; (8d8 <main+0x21c>)
 6e2:	497e      	ldr	r1, [pc, #504]	; (8dc <main+0x220>)
 6e4:	67da      	str	r2, [r3, #124]	; 0x7c
 6e6:	1c30      	adds	r0, r6, #0
 6e8:	3a08      	subs	r2, #8
 6ea:	2308      	movs	r3, #8
 6ec:	f7ff fd72 	bl	1d4 <RingBuffer_Init>
	RingBuffer_Flush(&can_rx_buffer);

	Board_CAN_Init(CCAN_BAUD_RATE, CAN_rx, CAN_tx, CAN_error);
 6f0:	497b      	ldr	r1, [pc, #492]	; (8e0 <main+0x224>)
 6f2:	4a7c      	ldr	r2, [pc, #496]	; (8e4 <main+0x228>)
 6f4:	487c      	ldr	r0, [pc, #496]	; (8e8 <main+0x22c>)
 6f6:	4b7d      	ldr	r3, [pc, #500]	; (8ec <main+0x230>)
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 6f8:	6137      	str	r7, [r6, #16]
 6fa:	60f7      	str	r7, [r6, #12]
 6fc:	f7ff ff14 	bl	528 <Board_CAN_Init>

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 700:	2301      	movs	r3, #1
 702:	4c7b      	ldr	r4, [pc, #492]	; (8f0 <main+0x234>)
	msg_obj.mode_id = 0x7F5;
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 704:	4d7b      	ldr	r5, [pc, #492]	; (8f4 <main+0x238>)

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 706:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = 0x7F5;
 708:	4b7b      	ldr	r3, [pc, #492]	; (8f8 <main+0x23c>)
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 70a:	1c20      	adds	r0, r4, #0
		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x7F5;
 70c:	6023      	str	r3, [r4, #0]
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 70e:	682b      	ldr	r3, [r5, #0]

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x7F5;
	msg_obj.mask = 0x000;
 710:	6067      	str	r7, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 712:	689b      	ldr	r3, [r3, #8]
 714:	689b      	ldr	r3, [r3, #8]
 716:	4798      	blx	r3
	*/
	can_error_flag = false;
	can_error_info = 0;
	int dlen;
	bool send = false;
	msTicks = 1000;
 718:	20fa      	movs	r0, #250	; 0xfa
 71a:	4978      	ldr	r1, [pc, #480]	; (8fc <main+0x240>)
 71c:	0080      	lsls	r0, r0, #2
 71e:	6008      	str	r0, [r1, #0]

		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
 720:	4a77      	ldr	r2, [pc, #476]	; (900 <main+0x244>)
	can_error_info = 0;
 722:	4b78      	ldr	r3, [pc, #480]	; (904 <main+0x248>)
	int dlen;
	bool send = false;
	msTicks = 1000;
	lastPrint = msTicks;
 724:	6808      	ldr	r0, [r1, #0]
 726:	4978      	ldr	r1, [pc, #480]	; (908 <main+0x24c>)

		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
 728:	7017      	strb	r7, [r2, #0]
	can_error_info = 0;
 72a:	601f      	str	r7, [r3, #0]
	int dlen;
	bool send = false;
	msTicks = 1000;
	lastPrint = msTicks;
 72c:	6008      	str	r0, [r1, #0]

	*/
	can_error_flag = false;
	can_error_info = 0;
	int dlen;
	bool send = false;
 72e:	9703      	str	r7, [sp, #12]
 730:	9204      	str	r2, [sp, #16]
 732:	9305      	str	r3, [sp, #20]
	msTicks = 1000;
	lastPrint = msTicks;
	
	while (1) {
		if(lastPrint < msTicks-1000){
 734:	4971      	ldr	r1, [pc, #452]	; (8fc <main+0x240>)
 736:	4875      	ldr	r0, [pc, #468]	; (90c <main+0x250>)
 738:	680b      	ldr	r3, [r1, #0]
 73a:	4a73      	ldr	r2, [pc, #460]	; (908 <main+0x24c>)
 73c:	181b      	adds	r3, r3, r0
 73e:	6810      	ldr	r0, [r2, #0]
 740:	4298      	cmp	r0, r3
 742:	d203      	bcs.n	74c <main+0x90>
			lastPrint = msTicks;
 744:	680b      	ldr	r3, [r1, #0]
 746:	6013      	str	r3, [r2, #0]
			car_status();
 748:	f7ff ff86 	bl	658 <car_status>
		}

		if (send) {
 74c:	9b03      	ldr	r3, [sp, #12]
 74e:	2b00      	cmp	r3, #0
 750:	d025      	beq.n	79e <main+0xe2>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 752:	68f2      	ldr	r2, [r6, #12]
 754:	6933      	ldr	r3, [r6, #16]
			if (!RingBuffer_IsEmpty(&can_rx_buffer)) {
 756:	429a      	cmp	r2, r3
 758:	d021      	beq.n	79e <main+0xe2>
				CCAN_MSG_OBJ_T temp_msg;
				RingBuffer_Pop(&can_rx_buffer, &temp_msg);
 75a:	af06      	add	r7, sp, #24
 75c:	1c30      	adds	r0, r6, #0
 75e:	1c39      	adds	r1, r7, #0
 760:	f7ff fd58 	bl	214 <RingBuffer_Pop>
				if (temp_msg.mode_id== 0x505) {		//driver interface
 764:	9b06      	ldr	r3, [sp, #24]
 766:	4a6a      	ldr	r2, [pc, #424]	; (910 <main+0x254>)
 768:	4293      	cmp	r3, r2
 76a:	d10a      	bne.n	782 <main+0xc6>
					drive_info(temp_msg);
 76c:	a90a      	add	r1, sp, #40	; 0x28
 76e:	4668      	mov	r0, sp
 770:	2208      	movs	r2, #8
 772:	3704      	adds	r7, #4
 774:	f000 fabc 	bl	cf0 <memcpy>
 778:	cf0e      	ldmia	r7!, {r1, r2, r3}
 77a:	9806      	ldr	r0, [sp, #24]
 77c:	f7ff ff1c 	bl	5b8 <drive_info>
 780:	e00d      	b.n	79e <main+0xe2>
				}
				else if (temp_msg.mode_id==0x703) {	//velocity1
 782:	4a64      	ldr	r2, [pc, #400]	; (914 <main+0x258>)
 784:	189a      	adds	r2, r3, r2
 786:	2a02      	cmp	r2, #2
 788:	d909      	bls.n	79e <main+0xe2>

				}
				else if (temp_msg.mode_id==0x705) {	//motor interface 
				//	motor_info(temp_msg);
				}
				else if (temp_msg.mode_id==0x301) {	//throttle interface   
 78a:	4a63      	ldr	r2, [pc, #396]	; (918 <main+0x25c>)
 78c:	4293      	cmp	r3, r2
 78e:	d000      	beq.n	792 <main+0xd6>
 790:	e09a      	b.n	8c8 <main+0x20c>
		drive_status= "OFF";
	}
}

void throttle_info(CCAN_MSG_OBJ_T msg) {
	acc_val = msg.data_16[0];
 792:	4b62      	ldr	r3, [pc, #392]	; (91c <main+0x260>)
 794:	8939      	ldrh	r1, [r7, #8]
 796:	897a      	ldrh	r2, [r7, #10]
 798:	6019      	str	r1, [r3, #0]
	brake_val = msg.data_16[1];
 79a:	4b61      	ldr	r3, [pc, #388]	; (920 <main+0x264>)
 79c:	601a      	str	r2, [r3, #0]
					break;
				}
			}	
		}

		if (can_error_flag) {
 79e:	9b04      	ldr	r3, [sp, #16]
 7a0:	781b      	ldrb	r3, [r3, #0]
 7a2:	2b00      	cmp	r3, #0
 7a4:	d00f      	beq.n	7c6 <main+0x10a>
			can_error_flag = false;
 7a6:	2300      	movs	r3, #0
 7a8:	9a04      	ldr	r2, [sp, #16]
			Board_UART_Print("CAN Error: 0b");
 7aa:	485e      	ldr	r0, [pc, #376]	; (924 <main+0x268>)
				}
			}	
		}

		if (can_error_flag) {
			can_error_flag = false;
 7ac:	7013      	strb	r3, [r2, #0]
			Board_UART_Print("CAN Error: 0b");
 7ae:	f7ff fe45 	bl	43c <Board_UART_Print>
			itoa(can_error_info, str, 2);
 7b2:	4f5d      	ldr	r7, [pc, #372]	; (928 <main+0x26c>)
 7b4:	9b05      	ldr	r3, [sp, #20]
 7b6:	1c39      	adds	r1, r7, #0
 7b8:	6818      	ldr	r0, [r3, #0]
 7ba:	2202      	movs	r2, #2
 7bc:	f7ff fda8 	bl	310 <itoa>
			Board_UART_Println(str);
 7c0:	1c38      	adds	r0, r7, #0
 7c2:	f7ff fe47 	bl	454 <Board_UART_Println>
		}

		uint8_t count;

		if ((count = Board_UART_Read(uart_rx_buffer, BUFFER_SIZE)) != 0) {
 7c6:	4f59      	ldr	r7, [pc, #356]	; (92c <main+0x270>)
 7c8:	2108      	movs	r1, #8
 7ca:	1c38      	adds	r0, r7, #0
 7cc:	f7ff fe62 	bl	494 <Board_UART_Read>
 7d0:	2800      	cmp	r0, #0
 7d2:	d0af      	beq.n	734 <main+0x78>
			//Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
			switch (uart_rx_buffer[0]) {
 7d4:	7838      	ldrb	r0, [r7, #0]
 7d6:	3864      	subs	r0, #100	; 0x64
 7d8:	2814      	cmp	r0, #20
 7da:	d8ab      	bhi.n	734 <main+0x78>
 7dc:	f000 f8fc 	bl	9d8 <__gnu_thumb1_case_sqi>
 7e0:	68aaaa47 	.word	0x68aaaa47
 7e4:	aaaaaaaa 	.word	0xaaaaaaaa
 7e8:	aaaa1aaa 	.word	0xaaaa1aaa
 7ec:	6eaaaa0b 	.word	0x6eaaaa0b
 7f0:	aa2daa38 	.word	0xaa2daa38
 7f4:	54          	.byte	0x54
 7f5:	00          	.byte	0x00
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
 7f6:	484e      	ldr	r0, [pc, #312]	; (930 <main+0x274>)
 7f8:	f7ff fe2c 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 7fc:	2302      	movs	r3, #2
 7fe:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x305;
 800:	4b4c      	ldr	r3, [pc, #304]	; (934 <main+0x278>)
					msg_obj.dlc = 5;
					msg_obj.data_16[0] = 0x00;
 802:	2200      	movs	r2, #0
			//Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
			switch (uart_rx_buffer[0]) {
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x305;
 804:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 5;
 806:	2305      	movs	r3, #5
 808:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x00;
					msg_obj.data_16[1] = 0x01;
 80a:	3b04      	subs	r3, #4
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x305;
					msg_obj.dlc = 5;
					msg_obj.data_16[0] = 0x00;
 80c:	8122      	strh	r2, [r4, #8]
					msg_obj.data_16[1] = 0x01;
 80e:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x00;
 810:	81a2      	strh	r2, [r4, #12]
 812:	e010      	b.n	836 <main+0x17a>
					msg_obj.data_16[3] = 0x01;
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'm':
					Board_UART_Println("Sending CAN with ID: 0x705");
 814:	4848      	ldr	r0, [pc, #288]	; (938 <main+0x27c>)
 816:	f7ff fe1d 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 81a:	2302      	movs	r3, #2
 81c:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x705;
 81e:	4b47      	ldr	r3, [pc, #284]	; (93c <main+0x280>)
 820:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 7;
 822:	2307      	movs	r3, #7
 824:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x01;
 826:	3b06      	subs	r3, #6
 828:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x13;
 82a:	3312      	adds	r3, #18
 82c:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x0111;
 82e:	2312      	movs	r3, #18
 830:	33ff      	adds	r3, #255	; 0xff
 832:	81a3      	strh	r3, [r4, #12]
					msg_obj.data_16[3] = 0x65;
 834:	3bac      	subs	r3, #172	; 0xac
 836:	81e3      	strh	r3, [r4, #14]
 838:	e034      	b.n	8a4 <main+0x1e8>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'v':
					Board_UART_Println("Sending CAN with ID: 0x301");
 83a:	4841      	ldr	r0, [pc, #260]	; (940 <main+0x284>)
 83c:	f7ff fe0a 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 840:	2302      	movs	r3, #2
 842:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x301;
 844:	4b34      	ldr	r3, [pc, #208]	; (918 <main+0x25c>)
 846:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 3;
 848:	2303      	movs	r3, #3
 84a:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x31;
 84c:	332e      	adds	r3, #46	; 0x2e
 84e:	e009      	b.n	864 <main+0x1a8>
					msg_obj.data_16[1] = 0x00;
					msg_obj.data_16[2] = 0x00;
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 't':
					Board_UART_Println("Sending CAN with ID: 0x301");
 850:	483b      	ldr	r0, [pc, #236]	; (940 <main+0x284>)
 852:	f7ff fdff 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 856:	2302      	movs	r3, #2
 858:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x301;
 85a:	4b2f      	ldr	r3, [pc, #188]	; (918 <main+0x25c>)
 85c:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 3;
 85e:	2303      	movs	r3, #3
 860:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x51;
 862:	334e      	adds	r3, #78	; 0x4e
 864:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x00;
 866:	2300      	movs	r3, #0
 868:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x00;
 86a:	81a3      	strh	r3, [r4, #12]
 86c:	e01a      	b.n	8a4 <main+0x1e8>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'd':
					Board_UART_Println("Sending CAN with ID: 0x505");
 86e:	4835      	ldr	r0, [pc, #212]	; (944 <main+0x288>)
 870:	f7ff fdf0 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 874:	2302      	movs	r3, #2
 876:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x505;
 878:	4b25      	ldr	r3, [pc, #148]	; (910 <main+0x254>)
 87a:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 4;
 87c:	2304      	movs	r3, #4
 87e:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x0020;
 880:	331c      	adds	r3, #28
 882:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x00F0;
 884:	33d0      	adds	r3, #208	; 0xd0
 886:	e00c      	b.n	8a2 <main+0x1e6>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'x':
					Board_UART_Println("Sending CAN with ID: 0x505");
 888:	482e      	ldr	r0, [pc, #184]	; (944 <main+0x288>)
 88a:	f7ff fde3 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 88e:	2302      	movs	r3, #2
 890:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x505;
 892:	4b1f      	ldr	r3, [pc, #124]	; (910 <main+0x254>)
 894:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 4;
 896:	2304      	movs	r3, #4
 898:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x0020;
 89a:	331c      	adds	r3, #28
 89c:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x0F00;
 89e:	23f0      	movs	r3, #240	; 0xf0
 8a0:	011b      	lsls	r3, r3, #4
 8a2:	8163      	strh	r3, [r4, #10]
					LPC_CCAN_API->can_transmit(&msg_obj);
 8a4:	682b      	ldr	r3, [r5, #0]
 8a6:	1c20      	adds	r0, r4, #0
 8a8:	689b      	ldr	r3, [r3, #8]
 8aa:	691b      	ldr	r3, [r3, #16]
 8ac:	4798      	blx	r3
					break;
 8ae:	e741      	b.n	734 <main+0x78>
				case 'g':
					Board_UART_PrintNum(0xFFF, 16, true);
 8b0:	4825      	ldr	r0, [pc, #148]	; (948 <main+0x28c>)
 8b2:	2110      	movs	r1, #16
 8b4:	2201      	movs	r2, #1
 8b6:	f7ff fdd7 	bl	468 <Board_UART_PrintNum>
					break;
 8ba:	e73b      	b.n	734 <main+0x78>
				case 's':	//receive from RaspberryPi
					send = !send;
 8bc:	2301      	movs	r3, #1
 8be:	9a03      	ldr	r2, [sp, #12]
 8c0:	4053      	eors	r3, r2
 8c2:	b2db      	uxtb	r3, r3
 8c4:	9303      	str	r3, [sp, #12]
					break;
 8c6:	e735      	b.n	734 <main+0x78>
					//Board_UART_Println("Invalid Command");
					break;
			}
		}
	}
}
 8c8:	2000      	movs	r0, #0
 8ca:	b00d      	add	sp, #52	; 0x34
 8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8ce:	46c0      	nop			; (mov r8, r8)
 8d0:	00000eb9 	.word	0x00000eb9
 8d4:	1000013c 	.word	0x1000013c
 8d8:	50020004 	.word	0x50020004
 8dc:	10000168 	.word	0x10000168
 8e0:	00000589 	.word	0x00000589
 8e4:	00000571 	.word	0x00000571
 8e8:	0007a120 	.word	0x0007a120
 8ec:	00000575 	.word	0x00000575
 8f0:	10000150 	.word	0x10000150
 8f4:	1fff1ff8 	.word	0x1fff1ff8
 8f8:	000007f5 	.word	0x000007f5
 8fc:	1000028c 	.word	0x1000028c
 900:	10000138 	.word	0x10000138
 904:	10000134 	.word	0x10000134
 908:	10000130 	.word	0x10000130
 90c:	fffffc18 	.word	0xfffffc18
 910:	00000505 	.word	0x00000505
 914:	fffff8fd 	.word	0xfffff8fd
 918:	00000301 	.word	0x00000301
 91c:	1000029c 	.word	0x1000029c
 920:	10000290 	.word	0x10000290
 924:	00000ed8 	.word	0x00000ed8
 928:	10000228 	.word	0x10000228
 92c:	10000128 	.word	0x10000128
 930:	00000ee6 	.word	0x00000ee6
 934:	00000305 	.word	0x00000305
 938:	00000f01 	.word	0x00000f01
 93c:	00000705 	.word	0x00000705
 940:	00000f1c 	.word	0x00000f1c
 944:	00000f37 	.word	0x00000f37
 948:	00000fff 	.word	0x00000fff

0000094c <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 94c:	218e      	movs	r1, #142	; 0x8e
 94e:	2020      	movs	r0, #32
 950:	4b1e      	ldr	r3, [pc, #120]	; (9cc <SystemInit+0x80>)
 952:	0089      	lsls	r1, r1, #2
 954:	585a      	ldr	r2, [r3, r1]
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 956:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 958:	4382      	bics	r2, r0
 95a:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 95c:	2200      	movs	r2, #0
 95e:	621a      	str	r2, [r3, #32]
 960:	32c8      	adds	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 962:	46c0      	nop			; (mov r8, r8)
 964:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 966:	2a00      	cmp	r2, #0
 968:	d1fb      	bne.n	962 <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 96a:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 96c:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 96e:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 970:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 972:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 974:	6c59      	ldr	r1, [r3, #68]	; 0x44
 976:	4a15      	ldr	r2, [pc, #84]	; (9cc <SystemInit+0x80>)
 978:	07c9      	lsls	r1, r1, #31
 97a:	d5fb      	bpl.n	974 <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 97c:	2161      	movs	r1, #97	; 0x61
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 97e:	208e      	movs	r0, #142	; 0x8e
 980:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 982:	6091      	str	r1, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 984:	0080      	lsls	r0, r0, #2
 986:	5811      	ldr	r1, [r2, r0]
 988:	43a1      	bics	r1, r4
 98a:	5011      	str	r1, [r2, r0]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 98c:	2101      	movs	r1, #1
 98e:	68d8      	ldr	r0, [r3, #12]
 990:	4a0e      	ldr	r2, [pc, #56]	; (9cc <SystemInit+0x80>)
 992:	4208      	tst	r0, r1
 994:	d0fa      	beq.n	98c <SystemInit+0x40>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 996:	2000      	movs	r0, #0
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 998:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 99a:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 99c:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 99e:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 9a0:	2001      	movs	r0, #1
 9a2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 9a4:	4a09      	ldr	r2, [pc, #36]	; (9cc <SystemInit+0x80>)
 9a6:	4201      	tst	r1, r0
 9a8:	d0fa      	beq.n	9a0 <SystemInit+0x54>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 9aa:	238e      	movs	r3, #142	; 0x8e
 9ac:	2480      	movs	r4, #128	; 0x80
 9ae:	009b      	lsls	r3, r3, #2
 9b0:	58d1      	ldr	r1, [r2, r3]
 9b2:	00e4      	lsls	r4, r4, #3
 9b4:	4321      	orrs	r1, r4
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 9b6:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 9b8:	50d1      	str	r1, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 9ba:	58d1      	ldr	r1, [r2, r3]
 9bc:	0064      	lsls	r4, r4, #1
 9be:	4321      	orrs	r1, r4
 9c0:	50d1      	str	r1, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 9c2:	6790      	str	r0, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 9c4:	4b02      	ldr	r3, [pc, #8]	; (9d0 <SystemInit+0x84>)
 9c6:	4a03      	ldr	r2, [pc, #12]	; (9d4 <SystemInit+0x88>)
 9c8:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 9ca:	bd10      	pop	{r4, pc}
 9cc:	40048000 	.word	0x40048000
 9d0:	40048004 	.word	0x40048004
 9d4:	0001005f 	.word	0x0001005f

000009d8 <__gnu_thumb1_case_sqi>:
 9d8:	b402      	push	{r1}
 9da:	4671      	mov	r1, lr
 9dc:	0849      	lsrs	r1, r1, #1
 9de:	0049      	lsls	r1, r1, #1
 9e0:	5609      	ldrsb	r1, [r1, r0]
 9e2:	0049      	lsls	r1, r1, #1
 9e4:	448e      	add	lr, r1
 9e6:	bc02      	pop	{r1}
 9e8:	4770      	bx	lr
 9ea:	46c0      	nop			; (mov r8, r8)

000009ec <__aeabi_uidiv>:
 9ec:	2200      	movs	r2, #0
 9ee:	0843      	lsrs	r3, r0, #1
 9f0:	428b      	cmp	r3, r1
 9f2:	d374      	bcc.n	ade <__aeabi_uidiv+0xf2>
 9f4:	0903      	lsrs	r3, r0, #4
 9f6:	428b      	cmp	r3, r1
 9f8:	d35f      	bcc.n	aba <__aeabi_uidiv+0xce>
 9fa:	0a03      	lsrs	r3, r0, #8
 9fc:	428b      	cmp	r3, r1
 9fe:	d344      	bcc.n	a8a <__aeabi_uidiv+0x9e>
 a00:	0b03      	lsrs	r3, r0, #12
 a02:	428b      	cmp	r3, r1
 a04:	d328      	bcc.n	a58 <__aeabi_uidiv+0x6c>
 a06:	0c03      	lsrs	r3, r0, #16
 a08:	428b      	cmp	r3, r1
 a0a:	d30d      	bcc.n	a28 <__aeabi_uidiv+0x3c>
 a0c:	22ff      	movs	r2, #255	; 0xff
 a0e:	0209      	lsls	r1, r1, #8
 a10:	ba12      	rev	r2, r2
 a12:	0c03      	lsrs	r3, r0, #16
 a14:	428b      	cmp	r3, r1
 a16:	d302      	bcc.n	a1e <__aeabi_uidiv+0x32>
 a18:	1212      	asrs	r2, r2, #8
 a1a:	0209      	lsls	r1, r1, #8
 a1c:	d065      	beq.n	aea <__aeabi_uidiv+0xfe>
 a1e:	0b03      	lsrs	r3, r0, #12
 a20:	428b      	cmp	r3, r1
 a22:	d319      	bcc.n	a58 <__aeabi_uidiv+0x6c>
 a24:	e000      	b.n	a28 <__aeabi_uidiv+0x3c>
 a26:	0a09      	lsrs	r1, r1, #8
 a28:	0bc3      	lsrs	r3, r0, #15
 a2a:	428b      	cmp	r3, r1
 a2c:	d301      	bcc.n	a32 <__aeabi_uidiv+0x46>
 a2e:	03cb      	lsls	r3, r1, #15
 a30:	1ac0      	subs	r0, r0, r3
 a32:	4152      	adcs	r2, r2
 a34:	0b83      	lsrs	r3, r0, #14
 a36:	428b      	cmp	r3, r1
 a38:	d301      	bcc.n	a3e <__aeabi_uidiv+0x52>
 a3a:	038b      	lsls	r3, r1, #14
 a3c:	1ac0      	subs	r0, r0, r3
 a3e:	4152      	adcs	r2, r2
 a40:	0b43      	lsrs	r3, r0, #13
 a42:	428b      	cmp	r3, r1
 a44:	d301      	bcc.n	a4a <__aeabi_uidiv+0x5e>
 a46:	034b      	lsls	r3, r1, #13
 a48:	1ac0      	subs	r0, r0, r3
 a4a:	4152      	adcs	r2, r2
 a4c:	0b03      	lsrs	r3, r0, #12
 a4e:	428b      	cmp	r3, r1
 a50:	d301      	bcc.n	a56 <__aeabi_uidiv+0x6a>
 a52:	030b      	lsls	r3, r1, #12
 a54:	1ac0      	subs	r0, r0, r3
 a56:	4152      	adcs	r2, r2
 a58:	0ac3      	lsrs	r3, r0, #11
 a5a:	428b      	cmp	r3, r1
 a5c:	d301      	bcc.n	a62 <__aeabi_uidiv+0x76>
 a5e:	02cb      	lsls	r3, r1, #11
 a60:	1ac0      	subs	r0, r0, r3
 a62:	4152      	adcs	r2, r2
 a64:	0a83      	lsrs	r3, r0, #10
 a66:	428b      	cmp	r3, r1
 a68:	d301      	bcc.n	a6e <__aeabi_uidiv+0x82>
 a6a:	028b      	lsls	r3, r1, #10
 a6c:	1ac0      	subs	r0, r0, r3
 a6e:	4152      	adcs	r2, r2
 a70:	0a43      	lsrs	r3, r0, #9
 a72:	428b      	cmp	r3, r1
 a74:	d301      	bcc.n	a7a <__aeabi_uidiv+0x8e>
 a76:	024b      	lsls	r3, r1, #9
 a78:	1ac0      	subs	r0, r0, r3
 a7a:	4152      	adcs	r2, r2
 a7c:	0a03      	lsrs	r3, r0, #8
 a7e:	428b      	cmp	r3, r1
 a80:	d301      	bcc.n	a86 <__aeabi_uidiv+0x9a>
 a82:	020b      	lsls	r3, r1, #8
 a84:	1ac0      	subs	r0, r0, r3
 a86:	4152      	adcs	r2, r2
 a88:	d2cd      	bcs.n	a26 <__aeabi_uidiv+0x3a>
 a8a:	09c3      	lsrs	r3, r0, #7
 a8c:	428b      	cmp	r3, r1
 a8e:	d301      	bcc.n	a94 <__aeabi_uidiv+0xa8>
 a90:	01cb      	lsls	r3, r1, #7
 a92:	1ac0      	subs	r0, r0, r3
 a94:	4152      	adcs	r2, r2
 a96:	0983      	lsrs	r3, r0, #6
 a98:	428b      	cmp	r3, r1
 a9a:	d301      	bcc.n	aa0 <__aeabi_uidiv+0xb4>
 a9c:	018b      	lsls	r3, r1, #6
 a9e:	1ac0      	subs	r0, r0, r3
 aa0:	4152      	adcs	r2, r2
 aa2:	0943      	lsrs	r3, r0, #5
 aa4:	428b      	cmp	r3, r1
 aa6:	d301      	bcc.n	aac <__aeabi_uidiv+0xc0>
 aa8:	014b      	lsls	r3, r1, #5
 aaa:	1ac0      	subs	r0, r0, r3
 aac:	4152      	adcs	r2, r2
 aae:	0903      	lsrs	r3, r0, #4
 ab0:	428b      	cmp	r3, r1
 ab2:	d301      	bcc.n	ab8 <__aeabi_uidiv+0xcc>
 ab4:	010b      	lsls	r3, r1, #4
 ab6:	1ac0      	subs	r0, r0, r3
 ab8:	4152      	adcs	r2, r2
 aba:	08c3      	lsrs	r3, r0, #3
 abc:	428b      	cmp	r3, r1
 abe:	d301      	bcc.n	ac4 <__aeabi_uidiv+0xd8>
 ac0:	00cb      	lsls	r3, r1, #3
 ac2:	1ac0      	subs	r0, r0, r3
 ac4:	4152      	adcs	r2, r2
 ac6:	0883      	lsrs	r3, r0, #2
 ac8:	428b      	cmp	r3, r1
 aca:	d301      	bcc.n	ad0 <__aeabi_uidiv+0xe4>
 acc:	008b      	lsls	r3, r1, #2
 ace:	1ac0      	subs	r0, r0, r3
 ad0:	4152      	adcs	r2, r2
 ad2:	0843      	lsrs	r3, r0, #1
 ad4:	428b      	cmp	r3, r1
 ad6:	d301      	bcc.n	adc <__aeabi_uidiv+0xf0>
 ad8:	004b      	lsls	r3, r1, #1
 ada:	1ac0      	subs	r0, r0, r3
 adc:	4152      	adcs	r2, r2
 ade:	1a41      	subs	r1, r0, r1
 ae0:	d200      	bcs.n	ae4 <__aeabi_uidiv+0xf8>
 ae2:	4601      	mov	r1, r0
 ae4:	4152      	adcs	r2, r2
 ae6:	4610      	mov	r0, r2
 ae8:	4770      	bx	lr
 aea:	e7ff      	b.n	aec <__aeabi_uidiv+0x100>
 aec:	b501      	push	{r0, lr}
 aee:	2000      	movs	r0, #0
 af0:	f000 f8fc 	bl	cec <__aeabi_idiv0>
 af4:	bd02      	pop	{r1, pc}
 af6:	46c0      	nop			; (mov r8, r8)

00000af8 <__aeabi_uidivmod>:
 af8:	2900      	cmp	r1, #0
 afa:	d0f7      	beq.n	aec <__aeabi_uidiv+0x100>
 afc:	b503      	push	{r0, r1, lr}
 afe:	f7ff ff75 	bl	9ec <__aeabi_uidiv>
 b02:	bc0e      	pop	{r1, r2, r3}
 b04:	4342      	muls	r2, r0
 b06:	1a89      	subs	r1, r1, r2
 b08:	4718      	bx	r3
 b0a:	46c0      	nop			; (mov r8, r8)

00000b0c <__aeabi_idiv>:
 b0c:	4603      	mov	r3, r0
 b0e:	430b      	orrs	r3, r1
 b10:	d47f      	bmi.n	c12 <__aeabi_idiv+0x106>
 b12:	2200      	movs	r2, #0
 b14:	0843      	lsrs	r3, r0, #1
 b16:	428b      	cmp	r3, r1
 b18:	d374      	bcc.n	c04 <__aeabi_idiv+0xf8>
 b1a:	0903      	lsrs	r3, r0, #4
 b1c:	428b      	cmp	r3, r1
 b1e:	d35f      	bcc.n	be0 <__aeabi_idiv+0xd4>
 b20:	0a03      	lsrs	r3, r0, #8
 b22:	428b      	cmp	r3, r1
 b24:	d344      	bcc.n	bb0 <__aeabi_idiv+0xa4>
 b26:	0b03      	lsrs	r3, r0, #12
 b28:	428b      	cmp	r3, r1
 b2a:	d328      	bcc.n	b7e <__aeabi_idiv+0x72>
 b2c:	0c03      	lsrs	r3, r0, #16
 b2e:	428b      	cmp	r3, r1
 b30:	d30d      	bcc.n	b4e <__aeabi_idiv+0x42>
 b32:	22ff      	movs	r2, #255	; 0xff
 b34:	0209      	lsls	r1, r1, #8
 b36:	ba12      	rev	r2, r2
 b38:	0c03      	lsrs	r3, r0, #16
 b3a:	428b      	cmp	r3, r1
 b3c:	d302      	bcc.n	b44 <__aeabi_idiv+0x38>
 b3e:	1212      	asrs	r2, r2, #8
 b40:	0209      	lsls	r1, r1, #8
 b42:	d065      	beq.n	c10 <__aeabi_idiv+0x104>
 b44:	0b03      	lsrs	r3, r0, #12
 b46:	428b      	cmp	r3, r1
 b48:	d319      	bcc.n	b7e <__aeabi_idiv+0x72>
 b4a:	e000      	b.n	b4e <__aeabi_idiv+0x42>
 b4c:	0a09      	lsrs	r1, r1, #8
 b4e:	0bc3      	lsrs	r3, r0, #15
 b50:	428b      	cmp	r3, r1
 b52:	d301      	bcc.n	b58 <__aeabi_idiv+0x4c>
 b54:	03cb      	lsls	r3, r1, #15
 b56:	1ac0      	subs	r0, r0, r3
 b58:	4152      	adcs	r2, r2
 b5a:	0b83      	lsrs	r3, r0, #14
 b5c:	428b      	cmp	r3, r1
 b5e:	d301      	bcc.n	b64 <__aeabi_idiv+0x58>
 b60:	038b      	lsls	r3, r1, #14
 b62:	1ac0      	subs	r0, r0, r3
 b64:	4152      	adcs	r2, r2
 b66:	0b43      	lsrs	r3, r0, #13
 b68:	428b      	cmp	r3, r1
 b6a:	d301      	bcc.n	b70 <__aeabi_idiv+0x64>
 b6c:	034b      	lsls	r3, r1, #13
 b6e:	1ac0      	subs	r0, r0, r3
 b70:	4152      	adcs	r2, r2
 b72:	0b03      	lsrs	r3, r0, #12
 b74:	428b      	cmp	r3, r1
 b76:	d301      	bcc.n	b7c <__aeabi_idiv+0x70>
 b78:	030b      	lsls	r3, r1, #12
 b7a:	1ac0      	subs	r0, r0, r3
 b7c:	4152      	adcs	r2, r2
 b7e:	0ac3      	lsrs	r3, r0, #11
 b80:	428b      	cmp	r3, r1
 b82:	d301      	bcc.n	b88 <__aeabi_idiv+0x7c>
 b84:	02cb      	lsls	r3, r1, #11
 b86:	1ac0      	subs	r0, r0, r3
 b88:	4152      	adcs	r2, r2
 b8a:	0a83      	lsrs	r3, r0, #10
 b8c:	428b      	cmp	r3, r1
 b8e:	d301      	bcc.n	b94 <__aeabi_idiv+0x88>
 b90:	028b      	lsls	r3, r1, #10
 b92:	1ac0      	subs	r0, r0, r3
 b94:	4152      	adcs	r2, r2
 b96:	0a43      	lsrs	r3, r0, #9
 b98:	428b      	cmp	r3, r1
 b9a:	d301      	bcc.n	ba0 <__aeabi_idiv+0x94>
 b9c:	024b      	lsls	r3, r1, #9
 b9e:	1ac0      	subs	r0, r0, r3
 ba0:	4152      	adcs	r2, r2
 ba2:	0a03      	lsrs	r3, r0, #8
 ba4:	428b      	cmp	r3, r1
 ba6:	d301      	bcc.n	bac <__aeabi_idiv+0xa0>
 ba8:	020b      	lsls	r3, r1, #8
 baa:	1ac0      	subs	r0, r0, r3
 bac:	4152      	adcs	r2, r2
 bae:	d2cd      	bcs.n	b4c <__aeabi_idiv+0x40>
 bb0:	09c3      	lsrs	r3, r0, #7
 bb2:	428b      	cmp	r3, r1
 bb4:	d301      	bcc.n	bba <__aeabi_idiv+0xae>
 bb6:	01cb      	lsls	r3, r1, #7
 bb8:	1ac0      	subs	r0, r0, r3
 bba:	4152      	adcs	r2, r2
 bbc:	0983      	lsrs	r3, r0, #6
 bbe:	428b      	cmp	r3, r1
 bc0:	d301      	bcc.n	bc6 <__aeabi_idiv+0xba>
 bc2:	018b      	lsls	r3, r1, #6
 bc4:	1ac0      	subs	r0, r0, r3
 bc6:	4152      	adcs	r2, r2
 bc8:	0943      	lsrs	r3, r0, #5
 bca:	428b      	cmp	r3, r1
 bcc:	d301      	bcc.n	bd2 <__aeabi_idiv+0xc6>
 bce:	014b      	lsls	r3, r1, #5
 bd0:	1ac0      	subs	r0, r0, r3
 bd2:	4152      	adcs	r2, r2
 bd4:	0903      	lsrs	r3, r0, #4
 bd6:	428b      	cmp	r3, r1
 bd8:	d301      	bcc.n	bde <__aeabi_idiv+0xd2>
 bda:	010b      	lsls	r3, r1, #4
 bdc:	1ac0      	subs	r0, r0, r3
 bde:	4152      	adcs	r2, r2
 be0:	08c3      	lsrs	r3, r0, #3
 be2:	428b      	cmp	r3, r1
 be4:	d301      	bcc.n	bea <__aeabi_idiv+0xde>
 be6:	00cb      	lsls	r3, r1, #3
 be8:	1ac0      	subs	r0, r0, r3
 bea:	4152      	adcs	r2, r2
 bec:	0883      	lsrs	r3, r0, #2
 bee:	428b      	cmp	r3, r1
 bf0:	d301      	bcc.n	bf6 <__aeabi_idiv+0xea>
 bf2:	008b      	lsls	r3, r1, #2
 bf4:	1ac0      	subs	r0, r0, r3
 bf6:	4152      	adcs	r2, r2
 bf8:	0843      	lsrs	r3, r0, #1
 bfa:	428b      	cmp	r3, r1
 bfc:	d301      	bcc.n	c02 <__aeabi_idiv+0xf6>
 bfe:	004b      	lsls	r3, r1, #1
 c00:	1ac0      	subs	r0, r0, r3
 c02:	4152      	adcs	r2, r2
 c04:	1a41      	subs	r1, r0, r1
 c06:	d200      	bcs.n	c0a <__aeabi_idiv+0xfe>
 c08:	4601      	mov	r1, r0
 c0a:	4152      	adcs	r2, r2
 c0c:	4610      	mov	r0, r2
 c0e:	4770      	bx	lr
 c10:	e05d      	b.n	cce <__aeabi_idiv+0x1c2>
 c12:	0fca      	lsrs	r2, r1, #31
 c14:	d000      	beq.n	c18 <__aeabi_idiv+0x10c>
 c16:	4249      	negs	r1, r1
 c18:	1003      	asrs	r3, r0, #32
 c1a:	d300      	bcc.n	c1e <__aeabi_idiv+0x112>
 c1c:	4240      	negs	r0, r0
 c1e:	4053      	eors	r3, r2
 c20:	2200      	movs	r2, #0
 c22:	469c      	mov	ip, r3
 c24:	0903      	lsrs	r3, r0, #4
 c26:	428b      	cmp	r3, r1
 c28:	d32d      	bcc.n	c86 <__aeabi_idiv+0x17a>
 c2a:	0a03      	lsrs	r3, r0, #8
 c2c:	428b      	cmp	r3, r1
 c2e:	d312      	bcc.n	c56 <__aeabi_idiv+0x14a>
 c30:	22fc      	movs	r2, #252	; 0xfc
 c32:	0189      	lsls	r1, r1, #6
 c34:	ba12      	rev	r2, r2
 c36:	0a03      	lsrs	r3, r0, #8
 c38:	428b      	cmp	r3, r1
 c3a:	d30c      	bcc.n	c56 <__aeabi_idiv+0x14a>
 c3c:	0189      	lsls	r1, r1, #6
 c3e:	1192      	asrs	r2, r2, #6
 c40:	428b      	cmp	r3, r1
 c42:	d308      	bcc.n	c56 <__aeabi_idiv+0x14a>
 c44:	0189      	lsls	r1, r1, #6
 c46:	1192      	asrs	r2, r2, #6
 c48:	428b      	cmp	r3, r1
 c4a:	d304      	bcc.n	c56 <__aeabi_idiv+0x14a>
 c4c:	0189      	lsls	r1, r1, #6
 c4e:	d03a      	beq.n	cc6 <__aeabi_idiv+0x1ba>
 c50:	1192      	asrs	r2, r2, #6
 c52:	e000      	b.n	c56 <__aeabi_idiv+0x14a>
 c54:	0989      	lsrs	r1, r1, #6
 c56:	09c3      	lsrs	r3, r0, #7
 c58:	428b      	cmp	r3, r1
 c5a:	d301      	bcc.n	c60 <__aeabi_idiv+0x154>
 c5c:	01cb      	lsls	r3, r1, #7
 c5e:	1ac0      	subs	r0, r0, r3
 c60:	4152      	adcs	r2, r2
 c62:	0983      	lsrs	r3, r0, #6
 c64:	428b      	cmp	r3, r1
 c66:	d301      	bcc.n	c6c <__aeabi_idiv+0x160>
 c68:	018b      	lsls	r3, r1, #6
 c6a:	1ac0      	subs	r0, r0, r3
 c6c:	4152      	adcs	r2, r2
 c6e:	0943      	lsrs	r3, r0, #5
 c70:	428b      	cmp	r3, r1
 c72:	d301      	bcc.n	c78 <__aeabi_idiv+0x16c>
 c74:	014b      	lsls	r3, r1, #5
 c76:	1ac0      	subs	r0, r0, r3
 c78:	4152      	adcs	r2, r2
 c7a:	0903      	lsrs	r3, r0, #4
 c7c:	428b      	cmp	r3, r1
 c7e:	d301      	bcc.n	c84 <__aeabi_idiv+0x178>
 c80:	010b      	lsls	r3, r1, #4
 c82:	1ac0      	subs	r0, r0, r3
 c84:	4152      	adcs	r2, r2
 c86:	08c3      	lsrs	r3, r0, #3
 c88:	428b      	cmp	r3, r1
 c8a:	d301      	bcc.n	c90 <__aeabi_idiv+0x184>
 c8c:	00cb      	lsls	r3, r1, #3
 c8e:	1ac0      	subs	r0, r0, r3
 c90:	4152      	adcs	r2, r2
 c92:	0883      	lsrs	r3, r0, #2
 c94:	428b      	cmp	r3, r1
 c96:	d301      	bcc.n	c9c <__aeabi_idiv+0x190>
 c98:	008b      	lsls	r3, r1, #2
 c9a:	1ac0      	subs	r0, r0, r3
 c9c:	4152      	adcs	r2, r2
 c9e:	d2d9      	bcs.n	c54 <__aeabi_idiv+0x148>
 ca0:	0843      	lsrs	r3, r0, #1
 ca2:	428b      	cmp	r3, r1
 ca4:	d301      	bcc.n	caa <__aeabi_idiv+0x19e>
 ca6:	004b      	lsls	r3, r1, #1
 ca8:	1ac0      	subs	r0, r0, r3
 caa:	4152      	adcs	r2, r2
 cac:	1a41      	subs	r1, r0, r1
 cae:	d200      	bcs.n	cb2 <__aeabi_idiv+0x1a6>
 cb0:	4601      	mov	r1, r0
 cb2:	4663      	mov	r3, ip
 cb4:	4152      	adcs	r2, r2
 cb6:	105b      	asrs	r3, r3, #1
 cb8:	4610      	mov	r0, r2
 cba:	d301      	bcc.n	cc0 <__aeabi_idiv+0x1b4>
 cbc:	4240      	negs	r0, r0
 cbe:	2b00      	cmp	r3, #0
 cc0:	d500      	bpl.n	cc4 <__aeabi_idiv+0x1b8>
 cc2:	4249      	negs	r1, r1
 cc4:	4770      	bx	lr
 cc6:	4663      	mov	r3, ip
 cc8:	105b      	asrs	r3, r3, #1
 cca:	d300      	bcc.n	cce <__aeabi_idiv+0x1c2>
 ccc:	4240      	negs	r0, r0
 cce:	b501      	push	{r0, lr}
 cd0:	2000      	movs	r0, #0
 cd2:	f000 f80b 	bl	cec <__aeabi_idiv0>
 cd6:	bd02      	pop	{r1, pc}

00000cd8 <__aeabi_idivmod>:
 cd8:	2900      	cmp	r1, #0
 cda:	d0f8      	beq.n	cce <__aeabi_idiv+0x1c2>
 cdc:	b503      	push	{r0, r1, lr}
 cde:	f7ff ff15 	bl	b0c <__aeabi_idiv>
 ce2:	bc0e      	pop	{r1, r2, r3}
 ce4:	4342      	muls	r2, r0
 ce6:	1a89      	subs	r1, r1, r2
 ce8:	4718      	bx	r3
 cea:	46c0      	nop			; (mov r8, r8)

00000cec <__aeabi_idiv0>:
 cec:	4770      	bx	lr
 cee:	46c0      	nop			; (mov r8, r8)

00000cf0 <memcpy>:
 cf0:	b570      	push	{r4, r5, r6, lr}
 cf2:	2a0f      	cmp	r2, #15
 cf4:	d932      	bls.n	d5c <memcpy+0x6c>
 cf6:	1c04      	adds	r4, r0, #0
 cf8:	430c      	orrs	r4, r1
 cfa:	1c0b      	adds	r3, r1, #0
 cfc:	07a4      	lsls	r4, r4, #30
 cfe:	d131      	bne.n	d64 <memcpy+0x74>
 d00:	1c15      	adds	r5, r2, #0
 d02:	1c04      	adds	r4, r0, #0
 d04:	3d10      	subs	r5, #16
 d06:	092d      	lsrs	r5, r5, #4
 d08:	3501      	adds	r5, #1
 d0a:	012d      	lsls	r5, r5, #4
 d0c:	1949      	adds	r1, r1, r5
 d0e:	681e      	ldr	r6, [r3, #0]
 d10:	6026      	str	r6, [r4, #0]
 d12:	685e      	ldr	r6, [r3, #4]
 d14:	6066      	str	r6, [r4, #4]
 d16:	689e      	ldr	r6, [r3, #8]
 d18:	60a6      	str	r6, [r4, #8]
 d1a:	68de      	ldr	r6, [r3, #12]
 d1c:	3310      	adds	r3, #16
 d1e:	60e6      	str	r6, [r4, #12]
 d20:	3410      	adds	r4, #16
 d22:	4299      	cmp	r1, r3
 d24:	d1f3      	bne.n	d0e <memcpy+0x1e>
 d26:	230f      	movs	r3, #15
 d28:	1945      	adds	r5, r0, r5
 d2a:	4013      	ands	r3, r2
 d2c:	2b03      	cmp	r3, #3
 d2e:	d91b      	bls.n	d68 <memcpy+0x78>
 d30:	1f1c      	subs	r4, r3, #4
 d32:	2300      	movs	r3, #0
 d34:	08a4      	lsrs	r4, r4, #2
 d36:	3401      	adds	r4, #1
 d38:	00a4      	lsls	r4, r4, #2
 d3a:	58ce      	ldr	r6, [r1, r3]
 d3c:	50ee      	str	r6, [r5, r3]
 d3e:	3304      	adds	r3, #4
 d40:	42a3      	cmp	r3, r4
 d42:	d1fa      	bne.n	d3a <memcpy+0x4a>
 d44:	18ed      	adds	r5, r5, r3
 d46:	18c9      	adds	r1, r1, r3
 d48:	2303      	movs	r3, #3
 d4a:	401a      	ands	r2, r3
 d4c:	d005      	beq.n	d5a <memcpy+0x6a>
 d4e:	2300      	movs	r3, #0
 d50:	5ccc      	ldrb	r4, [r1, r3]
 d52:	54ec      	strb	r4, [r5, r3]
 d54:	3301      	adds	r3, #1
 d56:	4293      	cmp	r3, r2
 d58:	d1fa      	bne.n	d50 <memcpy+0x60>
 d5a:	bd70      	pop	{r4, r5, r6, pc}
 d5c:	1c05      	adds	r5, r0, #0
 d5e:	2a00      	cmp	r2, #0
 d60:	d1f5      	bne.n	d4e <memcpy+0x5e>
 d62:	e7fa      	b.n	d5a <memcpy+0x6a>
 d64:	1c05      	adds	r5, r0, #0
 d66:	e7f2      	b.n	d4e <memcpy+0x5e>
 d68:	1c1a      	adds	r2, r3, #0
 d6a:	e7f8      	b.n	d5e <memcpy+0x6e>

00000d6c <strlen>:
 d6c:	b510      	push	{r4, lr}
 d6e:	0783      	lsls	r3, r0, #30
 d70:	d027      	beq.n	dc2 <strlen+0x56>
 d72:	7803      	ldrb	r3, [r0, #0]
 d74:	2b00      	cmp	r3, #0
 d76:	d026      	beq.n	dc6 <strlen+0x5a>
 d78:	1c03      	adds	r3, r0, #0
 d7a:	2103      	movs	r1, #3
 d7c:	e002      	b.n	d84 <strlen+0x18>
 d7e:	781a      	ldrb	r2, [r3, #0]
 d80:	2a00      	cmp	r2, #0
 d82:	d01c      	beq.n	dbe <strlen+0x52>
 d84:	3301      	adds	r3, #1
 d86:	420b      	tst	r3, r1
 d88:	d1f9      	bne.n	d7e <strlen+0x12>
 d8a:	6819      	ldr	r1, [r3, #0]
 d8c:	4a0f      	ldr	r2, [pc, #60]	; (dcc <strlen+0x60>)
 d8e:	4c10      	ldr	r4, [pc, #64]	; (dd0 <strlen+0x64>)
 d90:	188a      	adds	r2, r1, r2
 d92:	438a      	bics	r2, r1
 d94:	4222      	tst	r2, r4
 d96:	d10f      	bne.n	db8 <strlen+0x4c>
 d98:	3304      	adds	r3, #4
 d9a:	6819      	ldr	r1, [r3, #0]
 d9c:	4a0b      	ldr	r2, [pc, #44]	; (dcc <strlen+0x60>)
 d9e:	188a      	adds	r2, r1, r2
 da0:	438a      	bics	r2, r1
 da2:	4222      	tst	r2, r4
 da4:	d108      	bne.n	db8 <strlen+0x4c>
 da6:	3304      	adds	r3, #4
 da8:	6819      	ldr	r1, [r3, #0]
 daa:	4a08      	ldr	r2, [pc, #32]	; (dcc <strlen+0x60>)
 dac:	188a      	adds	r2, r1, r2
 dae:	438a      	bics	r2, r1
 db0:	4222      	tst	r2, r4
 db2:	d0f1      	beq.n	d98 <strlen+0x2c>
 db4:	e000      	b.n	db8 <strlen+0x4c>
 db6:	3301      	adds	r3, #1
 db8:	781a      	ldrb	r2, [r3, #0]
 dba:	2a00      	cmp	r2, #0
 dbc:	d1fb      	bne.n	db6 <strlen+0x4a>
 dbe:	1a18      	subs	r0, r3, r0
 dc0:	bd10      	pop	{r4, pc}
 dc2:	1c03      	adds	r3, r0, #0
 dc4:	e7e1      	b.n	d8a <strlen+0x1e>
 dc6:	2000      	movs	r0, #0
 dc8:	e7fa      	b.n	dc0 <strlen+0x54>
 dca:	46c0      	nop			; (mov r8, r8)
 dcc:	fefefeff 	.word	0xfefefeff
 dd0:	80808080 	.word	0x80808080

00000dd4 <wdtOSCRate>:
 dd4:	00000000 000927c0 00100590 00155cc0     .....'.......\..
 de4:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
 df4:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
 e04:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.

00000e14 <digits.4175>:
 e14:	33323130 37363534 62613938 66656463     0123456789abcdef
 e24:	00000000                                ....

00000e28 <OscRateIn>:
 e28:	00000000 52000a0d 53004e55 54524154     .......RUN.START
 e38:	52415000 0044454b 57524f46 00445241     .PARKED.FORWARD.
 e48:	45564552 00455352 54554853 4e574f44     REVERSE.SHUTDOWN
 e58:	504d495f 49444e45 4900474e 0054494e     _IMPENDING.INIT.
 e68:	52414843 4f004547 4b004646 49207965     CHARGE.OFF.Key I
 e78:	74696e67 3a6e6f69 72440020 20657669     gnition: .Drive 
 e88:	74617453 203a7375 72685400 6c74746f     Status: .Throttl
 e98:	63412065 61562063 00203a6c 6f726854     e Acc Val: .Thro
 ea8:	656c7474 61724220 5620656b 203a6c61     ttle Brake Val: 
 eb8:	69614600 2064656c 49206f74 6974696e     .Failed to Initi
 ec8:	7a696c61 79532065 63695473 00202e6b     alize SysTick. .
 ed8:	204e4143 6f727245 30203a72 65530062     CAN Error: 0b.Se
 ee8:	6e69646e 41432067 6977204e 49206874     nding CAN with I
 ef8:	30203a44 35303378 6e655300 676e6964     D: 0x305.Sending
 f08:	4e414320 74697720 44492068 7830203a      CAN with ID: 0x
 f18:	00353037 646e6553 20676e69 204e4143     705.Sending CAN 
 f28:	68746977 3a444920 33783020 53003130     with ID: 0x301.S
 f38:	69646e65 4320676e 77204e41 20687469     ending CAN with 
 f48:	203a4449 30357830 00000035                       ID: 0x505.
