
bin/BCM.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000d1 	.word	0x000000d1
   c:	000000d3 	.word	0x000000d3
	...
  2c:	000000d5 	.word	0x000000d5
	...
  38:	000000d7 	.word	0x000000d7
  3c:	0000037d 	.word	0x0000037d
  40:	000000db 	.word	0x000000db
  44:	000000db 	.word	0x000000db
  48:	000000db 	.word	0x000000db
  4c:	000000db 	.word	0x000000db
  50:	000000db 	.word	0x000000db
  54:	000000db 	.word	0x000000db
  58:	000000db 	.word	0x000000db
  5c:	000000db 	.word	0x000000db
  60:	000000db 	.word	0x000000db
  64:	000000db 	.word	0x000000db
  68:	000000db 	.word	0x000000db
  6c:	000000db 	.word	0x000000db
  70:	000000db 	.word	0x000000db
  74:	0000038d 	.word	0x0000038d
  78:	000000db 	.word	0x000000db
  7c:	000000db 	.word	0x000000db
  80:	000000db 	.word	0x000000db
  84:	000000db 	.word	0x000000db
  88:	000000db 	.word	0x000000db
  8c:	000000db 	.word	0x000000db
  90:	000000db 	.word	0x000000db
  94:	000000db 	.word	0x000000db
	...
  a0:	000000db 	.word	0x000000db
  a4:	000000db 	.word	0x000000db
  a8:	000000db 	.word	0x000000db
  ac:	00000000 	.word	0x00000000
  b0:	000000db 	.word	0x000000db
  b4:	000000db 	.word	0x000000db
  b8:	000000db 	.word	0x000000db
  bc:	000000db 	.word	0x000000db

000000c0 <Reset_Handler>:

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c0:	4801      	ldr	r0, [pc, #4]	; (c8 <Reset_Handler+0x8>)
    BLX     R0
  c2:	4780      	blx	r0
.if (RAM_MODE)
    LDR     R0,=main
  c4:	4801      	ldr	r0, [pc, #4]	; (cc <Reset_Handler+0xc>)
    BX      R0
  c6:	4700      	bx	r0

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c8:	0000098d 	.word	0x0000098d
    BLX     R0
.if (RAM_MODE)
    LDR     R0,=main
  cc:	00000685 	.word	0x00000685

000000d0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  d0:	e7fe      	b.n	d0 <NMI_Handler>

000000d2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  d2:	e7fe      	b.n	d2 <HardFault_Handler>

000000d4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  d4:	e7fe      	b.n	d4 <SVC_Handler>

000000d6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  d6:	e7fe      	b.n	d6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  d8:	e7fe      	b.n	d8 <PendSV_Handler+0x2>

000000da <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  da:	e7fe      	b.n	da <Default_Handler>

000000dc <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  de:	f000 f853 	bl	188 <Chip_Clock_GetSystemClockRate>
  e2:	4b01      	ldr	r3, [pc, #4]	; (e8 <SystemCoreClockUpdate+0xc>)
  e4:	6018      	str	r0, [r3, #0]
}
  e6:	bd08      	pop	{r3, pc}
  e8:	10000100 	.word	0x10000100

000000ec <Chip_Clock_GetWDTOSCRate>:

#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
  ec:	b508      	push	{r3, lr}
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
  ee:	4b07      	ldr	r3, [pc, #28]	; (10c <Chip_Clock_GetWDTOSCRate+0x20>)
  f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f2:	231f      	movs	r3, #31
{
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
  f4:	05ca      	lsls	r2, r1, #23
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  f6:	0f12      	lsrs	r2, r2, #28
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f8:	4019      	ands	r1, r3

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  fa:	4b05      	ldr	r3, [pc, #20]	; (110 <Chip_Clock_GetWDTOSCRate+0x24>)
  fc:	0092      	lsls	r2, r2, #2
  fe:	3101      	adds	r1, #1
 100:	0049      	lsls	r1, r1, #1
 102:	58d0      	ldr	r0, [r2, r3]
 104:	f000 fc92 	bl	a2c <__aeabi_uidiv>

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
}
 108:	bd08      	pop	{r3, pc}
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000
 110:	00000e14 	.word	0x00000e14

00000114 <Chip_Clock_GetSystemPLLInClockRate>:
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 114:	4b06      	ldr	r3, [pc, #24]	; (130 <Chip_Clock_GetSystemPLLInClockRate+0x1c>)
 116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 118:	2303      	movs	r3, #3
 11a:	4013      	ands	r3, r2
 11c:	d005      	beq.n	12a <Chip_Clock_GetSystemPLLInClockRate+0x16>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
 11e:	2000      	movs	r0, #0
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 120:	2b01      	cmp	r3, #1
 122:	d103      	bne.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 124:	4b03      	ldr	r3, [pc, #12]	; (134 <Chip_Clock_GetSystemPLLInClockRate+0x20>)
 126:	6818      	ldr	r0, [r3, #0]
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_PLLCLKSRC_MAINOSC:
		clkRate = Chip_Clock_GetMainOscRate();
		break;
 128:	e000      	b.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
	case SYSCTL_PLLCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 12a:	4803      	ldr	r0, [pc, #12]	; (138 <Chip_Clock_GetSystemPLLInClockRate+0x24>)
	default:
		clkRate = 0;
	}

	return clkRate;
}
 12c:	4770      	bx	lr
 12e:	46c0      	nop			; (mov r8, r8)
 130:	40048000 	.word	0x40048000
 134:	00000e68 	.word	0x00000e68
 138:	00b71b00 	.word	0x00b71b00

0000013c <Chip_Clock_GetSystemPLLOutClockRate>:

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <Chip_Clock_GetSystemPLLOutClockRate+0x14>)
	return clkRate;
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
 13e:	b510      	push	{r4, lr}
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 140:	689c      	ldr	r4, [r3, #8]
 142:	f7ff ffe7 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
}

/* Compute a PLL frequency */
STATIC uint32_t Chip_Clock_GetPLLFreq(uint32_t PLLReg, uint32_t inputRate)
{
	uint32_t msel = ((PLLReg & 0x1F) + 1);
 146:	231f      	movs	r3, #31
 148:	4023      	ands	r3, r4
 14a:	3301      	adds	r3, #1

	return inputRate * msel;
 14c:	4358      	muls	r0, r3
/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
								 Chip_Clock_GetSystemPLLInClockRate());
}
 14e:	bd10      	pop	{r4, pc}
 150:	40048000 	.word	0x40048000

00000154 <Chip_Clock_GetMainClockRate>:

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
 154:	b508      	push	{r3, lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 156:	4b0a      	ldr	r3, [pc, #40]	; (180 <Chip_Clock_GetMainClockRate+0x2c>)
 158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 15a:	2303      	movs	r3, #3
 15c:	4013      	ands	r3, r2
 15e:	2b02      	cmp	r3, #2
 160:	d006      	beq.n	170 <Chip_Clock_GetMainClockRate+0x1c>
 162:	2b03      	cmp	r3, #3
 164:	d007      	beq.n	176 <Chip_Clock_GetMainClockRate+0x22>
 166:	2b01      	cmp	r3, #1
 168:	d108      	bne.n	17c <Chip_Clock_GetMainClockRate+0x28>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_MAINCLKSRC_PLLIN:
		clkRate = Chip_Clock_GetSystemPLLInClockRate();
 16a:	f7ff ffd3 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
		break;
 16e:	e006      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
		clkRate = Chip_Clock_GetLFOOSCRate();
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
 170:	f7ff ffbc 	bl	ec <Chip_Clock_GetWDTOSCRate>
		break;
 174:	e003      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
#endif

	case SYSCTL_MAINCLKSRC_PLLOUT:
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
 176:	f7ff ffe1 	bl	13c <Chip_Clock_GetSystemPLLOutClockRate>
		break;
 17a:	e000      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 17c:	4801      	ldr	r0, [pc, #4]	; (184 <Chip_Clock_GetMainClockRate+0x30>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 17e:	bd08      	pop	{r3, pc}
 180:	40048000 	.word	0x40048000
 184:	00b71b00 	.word	0x00b71b00

00000188 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 188:	b508      	push	{r3, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 18a:	f7ff ffe3 	bl	154 <Chip_Clock_GetMainClockRate>
 18e:	4b02      	ldr	r3, [pc, #8]	; (198 <Chip_Clock_GetSystemClockRate+0x10>)
 190:	6f99      	ldr	r1, [r3, #120]	; 0x78
 192:	f000 fc4b 	bl	a2c <__aeabi_uidiv>
}
 196:	bd08      	pop	{r3, pc}
 198:	40048000 	.word	0x40048000

0000019c <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 19c:	2140      	movs	r1, #64	; 0x40
 19e:	4a02      	ldr	r2, [pc, #8]	; (1a8 <Chip_GPIO_Init+0xc>)
 1a0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 1a2:	430b      	orrs	r3, r1
 1a4:	67d3      	str	r3, [r2, #124]	; 0x7c
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 1a6:	4770      	bx	lr
 1a8:	40048004 	.word	0x40048004

000001ac <Chip_GPIO_WriteDirBit>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_GPIO);
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
 1ac:	b510      	push	{r4, lr}
 1ae:	2480      	movs	r4, #128	; 0x80
 1b0:	0409      	lsls	r1, r1, #16
 1b2:	0224      	lsls	r4, r4, #8
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 1b4:	1841      	adds	r1, r0, r1
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
 1b6:	2b00      	cmp	r3, #0
 1b8:	d006      	beq.n	1c8 <Chip_GPIO_WriteDirBit+0x1c>
		pGPIO[port].DIR |= 1UL << bit;
 1ba:	2001      	movs	r0, #1
 1bc:	4090      	lsls	r0, r2
 1be:	1c02      	adds	r2, r0, #0
 1c0:	590b      	ldr	r3, [r1, r4]
 1c2:	431a      	orrs	r2, r3
 1c4:	510a      	str	r2, [r1, r4]
 1c6:	e004      	b.n	1d2 <Chip_GPIO_WriteDirBit+0x26>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 1c8:	2001      	movs	r0, #1
 1ca:	4090      	lsls	r0, r2
 1cc:	590b      	ldr	r3, [r1, r4]
 1ce:	4383      	bics	r3, r0
 1d0:	510b      	str	r3, [r1, r4]
	}
}
 1d2:	bd10      	pop	{r4, pc}

000001d4 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
 1d4:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
 1d6:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
 1d8:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
 1da:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
 1dc:	6103      	str	r3, [r0, #16]
 1de:	60c3      	str	r3, [r0, #12]

	return 1;
}
 1e0:	2001      	movs	r0, #1
 1e2:	4770      	bx	lr

000001e4 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
 1e4:	b538      	push	{r3, r4, r5, lr}
 1e6:	1c04      	adds	r4, r0, #0
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1e8:	68c2      	ldr	r2, [r0, #12]
	uint8_t *ptr = RingBuff->data;
 1ea:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
 1ec:	6863      	ldr	r3, [r4, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1ee:	6900      	ldr	r0, [r0, #16]
 1f0:	1a12      	subs	r2, r2, r0

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
 1f2:	2000      	movs	r0, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
 1f4:	429a      	cmp	r2, r3
 1f6:	da0c      	bge.n	212 <Stack_Size+0x12>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 1f8:	68e0      	ldr	r0, [r4, #12]
 1fa:	3b01      	subs	r3, #1
 1fc:	4018      	ands	r0, r3
 1fe:	68a3      	ldr	r3, [r4, #8]
	memcpy(ptr, data, RingBuff->itemSz);
 200:	68a2      	ldr	r2, [r4, #8]

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 202:	4343      	muls	r3, r0
 204:	18e8      	adds	r0, r5, r3
	memcpy(ptr, data, RingBuff->itemSz);
 206:	f000 fd93 	bl	d30 <memcpy>
	RingBuff->head++;

	return 1;
 20a:	2001      	movs	r0, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
 20c:	68e3      	ldr	r3, [r4, #12]
 20e:	3301      	adds	r3, #1
 210:	60e3      	str	r3, [r4, #12]

	return 1;
}
 212:	bd38      	pop	{r3, r4, r5, pc}

00000214 <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
 214:	b538      	push	{r3, r4, r5, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 216:	68c5      	ldr	r5, [r0, #12]
 218:	6903      	ldr	r3, [r0, #16]
 21a:	1c04      	adds	r4, r0, #0
	uint8_t *ptr = RingBuff->data;
 21c:	6802      	ldr	r2, [r0, #0]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
 21e:	2000      	movs	r0, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 220:	429d      	cmp	r5, r3
 222:	d00e      	beq.n	242 <RingBuffer_Pop+0x2e>
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 224:	6863      	ldr	r3, [r4, #4]
 226:	1c08      	adds	r0, r1, #0
 228:	6921      	ldr	r1, [r4, #16]
 22a:	3b01      	subs	r3, #1
 22c:	400b      	ands	r3, r1
 22e:	68a1      	ldr	r1, [r4, #8]
 230:	434b      	muls	r3, r1
 232:	18d1      	adds	r1, r2, r3
	memcpy(data, ptr, RingBuff->itemSz);
 234:	68a2      	ldr	r2, [r4, #8]
 236:	f000 fd7b 	bl	d30 <memcpy>
	RingBuff->tail++;

	return 1;
 23a:	2001      	movs	r0, #1
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;
 23c:	6923      	ldr	r3, [r4, #16]
 23e:	3301      	adds	r3, #1
 240:	6123      	str	r3, [r4, #16]

	return 1;
}
 242:	bd38      	pop	{r3, r4, r5, pc}

00000244 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 244:	b510      	push	{r4, lr}
 246:	2480      	movs	r4, #128	; 0x80
 248:	4b07      	ldr	r3, [pc, #28]	; (268 <Chip_UART_Init+0x24>)
 24a:	0164      	lsls	r4, r4, #5
 24c:	1d19      	adds	r1, r3, #4
 24e:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 250:	3398      	adds	r3, #152	; 0x98
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 252:	4322      	orrs	r2, r4
 254:	67ca      	str	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 256:	2201      	movs	r2, #1
 258:	601a      	str	r2, [r3, #0]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 25a:	2307      	movs	r3, #7
 25c:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 25e:	3b04      	subs	r3, #4
 260:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 262:	330d      	adds	r3, #13
 264:	6283      	str	r3, [r0, #40]	; 0x28
}
 266:	bd10      	pop	{r4, pc}
 268:	40048000 	.word	0x40048000

0000026c <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int sent = 0;
 26c:	2300      	movs	r3, #0
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_UART0);
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
 26e:	b510      	push	{r4, lr}
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
 270:	4293      	cmp	r3, r2
 272:	da06      	bge.n	282 <Chip_UART_Send+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 274:	6944      	ldr	r4, [r0, #20]
 276:	06a4      	lsls	r4, r4, #26
 278:	d503      	bpl.n	282 <Chip_UART_Send+0x16>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
 27a:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
 27c:	3301      	adds	r3, #1
 27e:	6004      	str	r4, [r0, #0]
 280:	e7f6      	b.n	270 <Chip_UART_Send+0x4>
	}

	return sent;
}
 282:	1c18      	adds	r0, r3, #0
 284:	bd10      	pop	{r4, pc}

00000286 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
 286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 288:	1c07      	adds	r7, r0, #0
 28a:	1c0e      	adds	r6, r1, #0
 28c:	1c14      	adds	r4, r2, #0
	int pass, sent = 0;
 28e:	2500      	movs	r5, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
 290:	2c00      	cmp	r4, #0
 292:	dd08      	ble.n	2a6 <Chip_UART_SendBlocking+0x20>
		pass = Chip_UART_Send(pUART, p8, numBytes);
 294:	1c31      	adds	r1, r6, #0
 296:	1c22      	adds	r2, r4, #0
 298:	1c38      	adds	r0, r7, #0
 29a:	f7ff ffe7 	bl	26c <Chip_UART_Send>
		numBytes -= pass;
 29e:	1a24      	subs	r4, r4, r0
		sent += pass;
 2a0:	182d      	adds	r5, r5, r0
		p8 += pass;
 2a2:	1836      	adds	r6, r6, r0
 2a4:	e7f4      	b.n	290 <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
 2a6:	1c28      	adds	r0, r5, #0
 2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000002aa <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
	int readBytes = 0;
 2aa:	2300      	movs	r3, #0
	return sent;
}

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
 2ac:	b510      	push	{r4, lr}
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
 2ae:	4293      	cmp	r3, r2
 2b0:	da06      	bge.n	2c0 <Chip_UART_Read+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 2b2:	6944      	ldr	r4, [r0, #20]
 2b4:	07e4      	lsls	r4, r4, #31
 2b6:	d503      	bpl.n	2c0 <Chip_UART_Read+0x16>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
 2b8:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
 2ba:	54cc      	strb	r4, [r1, r3]
		p8++;
		readBytes++;
 2bc:	3301      	adds	r3, #1
 2be:	e7f6      	b.n	2ae <Chip_UART_Read+0x4>
	}

	return readBytes;
}
 2c0:	1c18      	adds	r0, r3, #0
 2c2:	bd10      	pop	{r4, pc}

000002c4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 2c4:	b570      	push	{r4, r5, r6, lr}
 2c6:	1c0e      	adds	r6, r1, #0
 2c8:	1c04      	adds	r4, r0, #0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2ca:	f7ff ff43 	bl	154 <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 2ce:	0131      	lsls	r1, r6, #4
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2d0:	1c05      	adds	r5, r0, #0
	div = clkin / (baudrate * 16);
 2d2:	f000 fbab 	bl	a2c <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2d6:	2280      	movs	r2, #128	; 0x80
 2d8:	1c01      	adds	r1, r0, #0
 2da:	68e3      	ldr	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2dc:	1c0e      	adds	r6, r1, #0
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2de:	4313      	orrs	r3, r2
 2e0:	60e3      	str	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2e2:	23ff      	movs	r3, #255	; 0xff

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
 2e4:	0a00      	lsrs	r0, r0, #8
 2e6:	401e      	ands	r6, r3
	pUART->DLM = (uint32_t) dlm;
 2e8:	4003      	ands	r3, r0
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2ea:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 2ec:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 2ee:	68e3      	ldr	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 2f0:	1c28      	adds	r0, r5, #0
 2f2:	4393      	bics	r3, r2
 2f4:	60e3      	str	r3, [r4, #12]
 2f6:	f000 fb99 	bl	a2c <__aeabi_uidiv>
}
 2fa:	bd70      	pop	{r4, r5, r6, pc}

000002fc <__reverse>:
#include "util.h"

void __reverse(char* begin,char* end) {
	char temp;

	while (end  >begin)
 2fc:	4281      	cmp	r1, r0
 2fe:	d906      	bls.n	30e <__reverse+0x12>
	{
		temp = *end;
 300:	780b      	ldrb	r3, [r1, #0]
		*end-- = *begin;
 302:	7802      	ldrb	r2, [r0, #0]
 304:	3901      	subs	r1, #1
 306:	704a      	strb	r2, [r1, #1]
		*begin++ = temp;
 308:	7003      	strb	r3, [r0, #0]
 30a:	3001      	adds	r0, #1
 30c:	e7f6      	b.n	2fc <__reverse>
	}
}
 30e:	4770      	bx	lr

00000310 <itoa>:

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 310:	1c13      	adds	r3, r2, #0
		*end-- = *begin;
		*begin++ = temp;
	}
}

char* itoa(int value, char* buffer, int base) {
 312:	b5f0      	push	{r4, r5, r6, r7, lr}

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 314:	3b02      	subs	r3, #2
		*end-- = *begin;
		*begin++ = temp;
	}
}

char* itoa(int value, char* buffer, int base) {
 316:	b085      	sub	sp, #20
 318:	1c04      	adds	r4, r0, #0
 31a:	1c0f      	adds	r7, r1, #0
 31c:	9201      	str	r2, [sp, #4]
 31e:	1c0d      	adds	r5, r1, #0

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 320:	2b0e      	cmp	r3, #14
 322:	d824      	bhi.n	36e <itoa+0x5e>

char* itoa(int value, char* buffer, int base) {
	static const char digits[] = "0123456789abcdef";

	char* buffer_copy = buffer;
	int32_t sign = 0;
 324:	2300      	movs	r3, #0
 326:	9302      	str	r3, [sp, #8]
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 328:	2a0a      	cmp	r2, #10
 32a:	d103      	bne.n	334 <itoa+0x24>
 32c:	17c3      	asrs	r3, r0, #31
 32e:	18c4      	adds	r4, r0, r3
 330:	9002      	str	r0, [sp, #8]
 332:	405c      	eors	r4, r3
 334:	1c3e      	adds	r6, r7, #0
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
 336:	1c20      	adds	r0, r4, #0
 338:	9901      	ldr	r1, [sp, #4]
 33a:	f000 fc07 	bl	b4c <__aeabi_idiv>
			rem = value % base;
 33e:	9901      	ldr	r1, [sp, #4]
	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
 340:	9003      	str	r0, [sp, #12]
			rem = value % base;
 342:	1c20      	adds	r0, r4, #0
 344:	f000 fce8 	bl	d18 <__aeabi_idivmod>
			*buffer++ = digits[rem];		// append the remainder to the string
 348:	4b0b      	ldr	r3, [pc, #44]	; (378 <itoa+0x68>)
 34a:	9c03      	ldr	r4, [sp, #12]
 34c:	5c5b      	ldrb	r3, [r3, r1]
 34e:	1c75      	adds	r5, r6, #1
 350:	7033      	strb	r3, [r6, #0]
		} while ((value = quot));				// loop while there is something to convert
 352:	2c00      	cmp	r4, #0
 354:	d001      	beq.n	35a <itoa+0x4a>
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
			rem = value % base;
			*buffer++ = digits[rem];		// append the remainder to the string
 356:	1c2e      	adds	r6, r5, #0
 358:	e7ed      	b.n	336 <itoa+0x26>
		} while ((value = quot));				// loop while there is something to convert

		if (sign<0)							// was the value negative?
 35a:	9b02      	ldr	r3, [sp, #8]
 35c:	2b00      	cmp	r3, #0
 35e:	da02      	bge.n	366 <itoa+0x56>
			*buffer++ = '-';					// append the sign
 360:	232d      	movs	r3, #45	; 0x2d
 362:	1cb5      	adds	r5, r6, #2
 364:	7073      	strb	r3, [r6, #1]

		__reverse(buffer_copy, buffer-1);		// reverse the string
 366:	1e69      	subs	r1, r5, #1
 368:	1c38      	adds	r0, r7, #0
 36a:	f7ff ffc7 	bl	2fc <__reverse>
	}

	*buffer='\0';
 36e:	2300      	movs	r3, #0
	return buffer_copy;
 370:	1c38      	adds	r0, r7, #0
			*buffer++ = '-';					// append the sign

		__reverse(buffer_copy, buffer-1);		// reverse the string
	}

	*buffer='\0';
 372:	702b      	strb	r3, [r5, #0]
	return buffer_copy;
 374:	b005      	add	sp, #20
 376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 378:	00000e54 	.word	0x00000e54

0000037c <SysTick_Handler>:

/**
 * SysTick Timer Interrupt Handler. Counts milliseconds since start
 */
void SysTick_Handler(void) {
	msTicks++;
 37c:	4a02      	ldr	r2, [pc, #8]	; (388 <SysTick_Handler+0xc>)
 37e:	6813      	ldr	r3, [r2, #0]
 380:	3301      	adds	r3, #1
 382:	6013      	str	r3, [r2, #0]
}
 384:	4770      	bx	lr
 386:	46c0      	nop			; (mov r8, r8)
 388:	10000340 	.word	0x10000340

0000038c <CAN_IRQHandler>:

/**
 * CCAN Interrupt Handler. Calls the isr() API located in the CCAN ROM
 */
void CAN_IRQHandler(void) {
 38c:	b508      	push	{r3, lr}
	LPC_CCAN_API->isr();
 38e:	4b03      	ldr	r3, [pc, #12]	; (39c <CAN_IRQHandler+0x10>)
 390:	681b      	ldr	r3, [r3, #0]
 392:	689b      	ldr	r3, [r3, #8]
 394:	685b      	ldr	r3, [r3, #4]
 396:	4798      	blx	r3
}
 398:	bd08      	pop	{r3, pc}
 39a:	46c0      	nop			; (mov r8, r8)
 39c:	1fff1ff8 	.word	0x1fff1ff8

000003a0 <Board_SysTick_Init>:
// -------------------------------------------------------------
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
 3a0:	b510      	push	{r4, lr}
	msTicks = 0;
 3a2:	2400      	movs	r4, #0
 3a4:	4b0c      	ldr	r3, [pc, #48]	; (3d8 <Board_SysTick_Init+0x38>)
 3a6:	601c      	str	r4, [r3, #0]

	// Update the value of SystemCoreClock to the clock speed in hz
	SystemCoreClockUpdate();
 3a8:	f7ff fe98 	bl	dc <SystemCoreClockUpdate>

	// Initialize SysTick Timer to fire interrupt at 1kHz
	return (SysTick_Config (SystemCoreClock / 1000));
 3ac:	21fa      	movs	r1, #250	; 0xfa
 3ae:	4b0b      	ldr	r3, [pc, #44]	; (3dc <Board_SysTick_Init+0x3c>)
 3b0:	0089      	lsls	r1, r1, #2
 3b2:	6818      	ldr	r0, [r3, #0]
 3b4:	f000 fb3a 	bl	a2c <__aeabi_uidiv>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 3b8:	4a09      	ldr	r2, [pc, #36]	; (3e0 <Board_SysTick_Init+0x40>)
 3ba:	3801      	subs	r0, #1
 3bc:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3be:	20c0      	movs	r0, #192	; 0xc0
 3c0:	4908      	ldr	r1, [pc, #32]	; (3e4 <Board_SysTick_Init+0x44>)
 3c2:	0600      	lsls	r0, r0, #24
 3c4:	6a0b      	ldr	r3, [r1, #32]
 3c6:	021b      	lsls	r3, r3, #8
 3c8:	0a1b      	lsrs	r3, r3, #8
 3ca:	4303      	orrs	r3, r0
 3cc:	620b      	str	r3, [r1, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3ce:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 3d0:	6094      	str	r4, [r2, #8]
}
 3d2:	1c20      	adds	r0, r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3d4:	6013      	str	r3, [r2, #0]
 3d6:	bd10      	pop	{r4, pc}
 3d8:	10000340 	.word	0x10000340
 3dc:	10000100 	.word	0x10000100
 3e0:	e000e010 	.word	0xe000e010
 3e4:	e000ed00 	.word	0xe000ed00

000003e8 <Board_LEDs_Init>:

void Board_LEDs_Init(void) {
 3e8:	b510      	push	{r4, lr}
	Chip_GPIO_Init(LPC_GPIO);
 3ea:	24a0      	movs	r4, #160	; 0xa0
 3ec:	05e4      	lsls	r4, r4, #23
 3ee:	1c20      	adds	r0, r4, #0
 3f0:	f7ff fed4 	bl	19c <Chip_GPIO_Init>
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
 3f4:	1c20      	adds	r0, r4, #0
 3f6:	2102      	movs	r1, #2
 3f8:	2205      	movs	r2, #5
 3fa:	2301      	movs	r3, #1
 3fc:	f7ff fed6 	bl	1ac <Chip_GPIO_WriteDirBit>
}
 400:	bd10      	pop	{r4, pc}
	...

00000404 <Board_UART_Init>:
		SSP_Tx_Buf[i] = 0x01;
		SSP_Rx_Buf[i] = 0xAA;
	}
} 

void Board_UART_Init(uint32_t baudrate) {
 404:	b538      	push	{r3, r4, r5, lr}
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 406:	4b0b      	ldr	r3, [pc, #44]	; (434 <Board_UART_Init+0x30>)
 408:	2201      	movs	r2, #1
 40a:	1c19      	adds	r1, r3, #0
 40c:	1c05      	adds	r5, r0, #0
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
 40e:	4c0a      	ldr	r4, [pc, #40]	; (438 <Board_UART_Init+0x34>)
 410:	33a8      	adds	r3, #168	; 0xa8
 412:	31a4      	adds	r1, #164	; 0xa4
 414:	600a      	str	r2, [r1, #0]
 416:	1c20      	adds	r0, r4, #0
 418:	601a      	str	r2, [r3, #0]
 41a:	f7ff ff13 	bl	244 <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, baudrate);
 41e:	1c29      	adds	r1, r5, #0
 420:	1c20      	adds	r0, r4, #0
 422:	f7ff ff4f 	bl	2c4 <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 426:	2303      	movs	r3, #3
 428:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 42a:	337e      	adds	r3, #126	; 0x7e
 42c:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
 42e:	3b01      	subs	r3, #1
 430:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
}
 432:	bd38      	pop	{r3, r4, r5, pc}
 434:	40044000 	.word	0x40044000
 438:	40008000 	.word	0x40008000

0000043c <Board_UART_Print>:

void Board_UART_Print(const char *str) {
 43c:	b510      	push	{r4, lr}
 43e:	1c04      	adds	r4, r0, #0
	Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
 440:	f000 fcb4 	bl	dac <strlen>
 444:	1c21      	adds	r1, r4, #0
 446:	1c02      	adds	r2, r0, #0
 448:	4801      	ldr	r0, [pc, #4]	; (450 <Board_UART_Print+0x14>)
 44a:	f7ff ff1c 	bl	286 <Chip_UART_SendBlocking>
}
 44e:	bd10      	pop	{r4, pc}
 450:	40008000 	.word	0x40008000

00000454 <Board_UART_Println>:

void Board_UART_Println(const char *str) {
 454:	b508      	push	{r3, lr}
	Board_UART_Print(str);
 456:	f7ff fff1 	bl	43c <Board_UART_Print>
	Board_UART_Print("\r\n");
 45a:	4802      	ldr	r0, [pc, #8]	; (464 <Board_UART_Println+0x10>)
 45c:	f7ff ffee 	bl	43c <Board_UART_Print>
}
 460:	bd08      	pop	{r3, pc}
 462:	46c0      	nop			; (mov r8, r8)
 464:	00000e6c 	.word	0x00000e6c

00000468 <Board_UART_PrintNum>:

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
 468:	b538      	push	{r3, r4, r5, lr}
 46a:	1c0b      	adds	r3, r1, #0
	static char str[32];
	itoa(num, str, base);
 46c:	4c07      	ldr	r4, [pc, #28]	; (48c <Board_UART_PrintNum+0x24>)
void Board_UART_Println(const char *str) {
	Board_UART_Print(str);
	Board_UART_Print("\r\n");
}

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
 46e:	1c15      	adds	r5, r2, #0
	static char str[32];
	itoa(num, str, base);
 470:	1c21      	adds	r1, r4, #0
 472:	1c1a      	adds	r2, r3, #0
 474:	f7ff ff4c 	bl	310 <itoa>
	Board_UART_Print(str);
 478:	1c20      	adds	r0, r4, #0
 47a:	f7ff ffdf 	bl	43c <Board_UART_Print>
	if (crlf) Board_UART_Print("\r\n");
 47e:	2d00      	cmp	r5, #0
 480:	d002      	beq.n	488 <Board_UART_PrintNum+0x20>
 482:	4803      	ldr	r0, [pc, #12]	; (490 <Board_UART_PrintNum+0x28>)
 484:	f7ff ffda 	bl	43c <Board_UART_Print>
}
 488:	bd38      	pop	{r3, r4, r5, pc}
 48a:	46c0      	nop			; (mov r8, r8)
 48c:	10000108 	.word	0x10000108
 490:	00000e6c 	.word	0x00000e6c

00000494 <Board_UART_Read>:

void Board_UART_SendBlocking(const void *data, uint8_t num_bytes) {
	Chip_UART_SendBlocking(LPC_USART, data, num_bytes);
}

int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
 494:	b508      	push	{r3, lr}
 496:	1c03      	adds	r3, r0, #0
 498:	1c0a      	adds	r2, r1, #0
	return Chip_UART_Read(LPC_USART, data, num_bytes);
 49a:	4803      	ldr	r0, [pc, #12]	; (4a8 <Board_UART_Read+0x14>)
 49c:	1c19      	adds	r1, r3, #0
 49e:	f7ff ff04 	bl	2aa <Chip_UART_Read>
 4a2:	b240      	sxtb	r0, r0
}
 4a4:	bd08      	pop	{r3, pc}
 4a6:	46c0      	nop			; (mov r8, r8)
 4a8:	40008000 	.word	0x40008000

000004ac <CAN_baudrate_calculate>:

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 4ae:	1c0c      	adds	r4, r1, #0
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 4b0:	2180      	movs	r1, #128	; 0x80
 4b2:	1c05      	adds	r5, r0, #0
 4b4:	4a1b      	ldr	r2, [pc, #108]	; (524 <CAN_baudrate_calculate+0x78>)
 4b6:	0289      	lsls	r1, r1, #10
 4b8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 4ba:	430b      	orrs	r3, r1
 4bc:	67d3      	str	r3, [r2, #124]	; 0x7c
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
 4be:	f7ff fe49 	bl	154 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
 4c2:	1c29      	adds	r1, r5, #0
 4c4:	f000 fab2 	bl	a2c <__aeabi_uidiv>
 4c8:	2101      	movs	r1, #1
 4ca:	4684      	mov	ip, r0
 4cc:	2503      	movs	r5, #3
 4ce:	434d      	muls	r5, r1
int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
	return Chip_UART_Read(LPC_USART, data, num_bytes);
}

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 4d0:	1c0e      	adds	r6, r1, #0
 4d2:	1c2f      	adds	r7, r5, #0
 4d4:	2201      	movs	r2, #1
 4d6:	1e4b      	subs	r3, r1, #1
 4d8:	9301      	str	r3, [sp, #4]
 4da:	1c38      	adds	r0, r7, #0
 4dc:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 4de:	4584      	cmp	ip, r0
 4e0:	d113      	bne.n	50a <CAN_baudrate_calculate+0x5e>
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 4e2:	9901      	ldr	r1, [sp, #4]

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
 4e4:	3b03      	subs	r3, #3
					seg1 = segs / 2;
 4e6:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 4e8:	6021      	str	r1, [r4, #0]
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 4ea:	3a01      	subs	r2, #1
 4ec:	0201      	lsls	r1, r0, #8
 4ee:	430a      	orrs	r2, r1
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
 4f0:	1e01      	subs	r1, r0, #0
 4f2:	2903      	cmp	r1, #3
 4f4:	d900      	bls.n	4f8 <CAN_baudrate_calculate+0x4c>
 4f6:	2103      	movs	r1, #3
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 4f8:	0189      	lsls	r1, r1, #6
 4fa:	430a      	orrs	r2, r1
 4fc:	2107      	movs	r1, #7
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
 4fe:	1a1b      	subs	r3, r3, r0
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 500:	400b      	ands	r3, r1
 502:	031b      	lsls	r3, r3, #12
 504:	431a      	orrs	r2, r3
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
 506:	6062      	str	r2, [r4, #4]
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
					return;
 508:	e00b      	b.n	522 <CAN_baudrate_calculate+0x76>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
 50a:	3301      	adds	r3, #1
 50c:	1980      	adds	r0, r0, r6
 50e:	2b12      	cmp	r3, #18
 510:	d1e5      	bne.n	4de <CAN_baudrate_calculate+0x32>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
 512:	3201      	adds	r2, #1
 514:	1876      	adds	r6, r6, r1
 516:	197f      	adds	r7, r7, r5
 518:	2a21      	cmp	r2, #33	; 0x21
 51a:	d1de      	bne.n	4da <CAN_baudrate_calculate+0x2e>
 51c:	3101      	adds	r1, #1
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
 51e:	2911      	cmp	r1, #17
 520:	d1d4      	bne.n	4cc <CAN_baudrate_calculate+0x20>
					return;
				}
			}
		}
	}
}
 522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 524:	40048004 	.word	0x40048004

00000528 <Board_CAN_Init>:

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {
 528:	b510      	push	{r4, lr}
 52a:	b08a      	sub	sp, #40	; 0x28

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 52c:	9304      	str	r3, [sp, #16]
 52e:	2300      	movs	r3, #0
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 530:	4c0d      	ldr	r4, [pc, #52]	; (568 <Board_CAN_Init+0x40>)

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 532:	9102      	str	r1, [sp, #8]
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 534:	4669      	mov	r1, sp

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 536:	9203      	str	r2, [sp, #12]
 538:	9305      	str	r3, [sp, #20]
 53a:	9306      	str	r3, [sp, #24]
 53c:	9307      	str	r3, [sp, #28]
 53e:	9308      	str	r3, [sp, #32]
 540:	9309      	str	r3, [sp, #36]	; 0x24
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 542:	f7ff ffb3 	bl	4ac <CAN_baudrate_calculate>

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 546:	6823      	ldr	r3, [r4, #0]
 548:	4668      	mov	r0, sp
 54a:	689b      	ldr	r3, [r3, #8]
 54c:	2101      	movs	r1, #1
 54e:	681b      	ldr	r3, [r3, #0]
 550:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 552:	6823      	ldr	r3, [r4, #0]
 554:	a802      	add	r0, sp, #8
 556:	689b      	ldr	r3, [r3, #8]
 558:	69db      	ldr	r3, [r3, #28]
 55a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 55c:	2280      	movs	r2, #128	; 0x80
 55e:	4b03      	ldr	r3, [pc, #12]	; (56c <Board_CAN_Init+0x44>)
 560:	0192      	lsls	r2, r2, #6
 562:	601a      	str	r2, [r3, #0]

	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);
}
 564:	b00a      	add	sp, #40	; 0x28
 566:	bd10      	pop	{r4, pc}
 568:	1fff1ff8 	.word	0x1fff1ff8
 56c:	e000e100 	.word	0xe000e100

00000570 <CAN_tx>:
/*	CAN transmit callback */
/*	Function is executed by the Callback handler after
    a CAN message has been transmitted */
void CAN_tx(uint8_t msg_obj_num) {
	msg_obj_num = msg_obj_num;
}
 570:	4770      	bx	lr
	...

00000574 <CAN_error>:
/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
 574:	2201      	movs	r2, #1

/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
 576:	4b02      	ldr	r3, [pc, #8]	; (580 <CAN_error+0xc>)
 578:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
 57a:	4b02      	ldr	r3, [pc, #8]	; (584 <CAN_error+0x10>)
 57c:	701a      	strb	r2, [r3, #0]
}
 57e:	4770      	bx	lr
 580:	1000016c 	.word	0x1000016c
 584:	10000264 	.word	0x10000264

00000588 <CAN_rx>:
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 588:	b538      	push	{r3, r4, r5, lr}
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 58a:	4c08      	ldr	r4, [pc, #32]	; (5ac <CAN_rx+0x24>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <CAN_rx+0x28>)
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 58e:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 590:	681b      	ldr	r3, [r3, #0]
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 592:	1c05      	adds	r5, r0, #0
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 594:	689b      	ldr	r3, [r3, #8]
 596:	1c20      	adds	r0, r4, #0
 598:	68db      	ldr	r3, [r3, #12]
 59a:	4798      	blx	r3
	if (msg_obj_num == 1) {
 59c:	2d01      	cmp	r5, #1
 59e:	d103      	bne.n	5a8 <CAN_rx+0x20>
		RingBuffer_Insert(&can_rx_buffer, &msg_obj);
 5a0:	4804      	ldr	r0, [pc, #16]	; (5b4 <CAN_rx+0x2c>)
 5a2:	1c21      	adds	r1, r4, #0
 5a4:	f7ff fe1e 	bl	1e4 <RingBuffer_Insert>
	}
}
 5a8:	bd38      	pop	{r3, r4, r5, pc}
 5aa:	46c0      	nop			; (mov r8, r8)
 5ac:	10000328 	.word	0x10000328
 5b0:	1fff1ff8 	.word	0x1fff1ff8
 5b4:	10000238 	.word	0x10000238

000005b8 <car_status>:
	cmu_with_min_temp[1]=2;
	cmu_with_max_temp[0]=0x6F9;
	cmu_with_max_temp[1]=3;
}

void car_status() {
 5b8:	b538      	push	{r3, r4, r5, lr}
	Board_UART_PrintNum(vel1[0],16,false);
 5ba:	4d2d      	ldr	r5, [pc, #180]	; (670 <car_status+0xb8>)
 5bc:	2110      	movs	r1, #16
 5be:	6828      	ldr	r0, [r5, #0]
 5c0:	2200      	movs	r2, #0
 5c2:	f7ff ff51 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 5c6:	4c2b      	ldr	r4, [pc, #172]	; (674 <car_status+0xbc>)
 5c8:	1c20      	adds	r0, r4, #0
 5ca:	f7ff ff37 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(vel1[1],10,false);
 5ce:	6868      	ldr	r0, [r5, #4]
 5d0:	210a      	movs	r1, #10
 5d2:	2200      	movs	r2, #0
 5d4:	f7ff ff48 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 5d8:	1c20      	adds	r0, r4, #0
 5da:	f7ff ff2f 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(vel1[2],10,true);
 5de:	68a8      	ldr	r0, [r5, #8]
 5e0:	210a      	movs	r1, #10
 5e2:	2201      	movs	r2, #1
 5e4:	f7ff ff40 	bl	468 <Board_UART_PrintNum>
	Board_UART_PrintNum(vel2[0],16,false);
 5e8:	4d23      	ldr	r5, [pc, #140]	; (678 <car_status+0xc0>)
 5ea:	2110      	movs	r1, #16
 5ec:	6828      	ldr	r0, [r5, #0]
 5ee:	2200      	movs	r2, #0
 5f0:	f7ff ff3a 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 5f4:	1c20      	adds	r0, r4, #0
 5f6:	f7ff ff21 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(vel2[1],10,false);
 5fa:	6868      	ldr	r0, [r5, #4]
 5fc:	210a      	movs	r1, #10
 5fe:	2200      	movs	r2, #0
 600:	f7ff ff32 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 604:	1c20      	adds	r0, r4, #0
 606:	f7ff ff19 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(vel2[2],10,true);
 60a:	68a8      	ldr	r0, [r5, #8]
 60c:	210a      	movs	r1, #10
 60e:	2201      	movs	r2, #1
 610:	f7ff ff2a 	bl	468 <Board_UART_PrintNum>
	Board_UART_PrintNum(throt_acc[0],16,false);
 614:	4d19      	ldr	r5, [pc, #100]	; (67c <car_status+0xc4>)
 616:	2110      	movs	r1, #16
 618:	6828      	ldr	r0, [r5, #0]
 61a:	2200      	movs	r2, #0
 61c:	f7ff ff24 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 620:	1c20      	adds	r0, r4, #0
 622:	f7ff ff0b 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(throt_acc[1],10,false);
 626:	6868      	ldr	r0, [r5, #4]
 628:	210a      	movs	r1, #10
 62a:	2200      	movs	r2, #0
 62c:	f7ff ff1c 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 630:	1c20      	adds	r0, r4, #0
 632:	f7ff ff03 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(throt_acc[2],10,true);
 636:	68a8      	ldr	r0, [r5, #8]
 638:	210a      	movs	r1, #10
 63a:	2201      	movs	r2, #1
 63c:	f7ff ff14 	bl	468 <Board_UART_PrintNum>
	Board_UART_PrintNum(throt_break[0],16,false);
 640:	4d0f      	ldr	r5, [pc, #60]	; (680 <car_status+0xc8>)
 642:	2110      	movs	r1, #16
 644:	6828      	ldr	r0, [r5, #0]
 646:	2200      	movs	r2, #0
 648:	f7ff ff0e 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 64c:	1c20      	adds	r0, r4, #0
 64e:	f7ff fef5 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(throt_break[1],10,false);
 652:	6868      	ldr	r0, [r5, #4]
 654:	210a      	movs	r1, #10
 656:	2200      	movs	r2, #0
 658:	f7ff ff06 	bl	468 <Board_UART_PrintNum>
	Board_UART_Print(",");
 65c:	1c20      	adds	r0, r4, #0
 65e:	f7ff feed 	bl	43c <Board_UART_Print>
	Board_UART_PrintNum(throt_break[2],10,true);
 662:	68a8      	ldr	r0, [r5, #8]
 664:	210a      	movs	r1, #10
 666:	2201      	movs	r2, #1
 668:	f7ff fefe 	bl	468 <Board_UART_PrintNum>
}
 66c:	bd38      	pop	{r3, r4, r5, pc}
 66e:	46c0      	nop			; (mov r8, r8)
 670:	10000130 	.word	0x10000130
 674:	00000e6f 	.word	0x00000e6f
 678:	1000013c 	.word	0x1000013c
 67c:	10000258 	.word	0x10000258
 680:	1000024c 	.word	0x1000024c

00000684 <main>:
int main(void)
{

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 684:	20e1      	movs	r0, #225	; 0xe1

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 686:	b5f0      	push	{r4, r5, r6, r7, lr}

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 688:	0200      	lsls	r0, r0, #8

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 68a:	b08b      	sub	sp, #44	; 0x2c

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 68c:	f7ff feba 	bl	404 <Board_UART_Init>
	//Board_UART_Println("Started up");

	//---------------
	// Initialize SysTick Timer to generate millisecond count
	if (Board_SysTick_Init()) {
 690:	f7ff fe86 	bl	3a0 <Board_SysTick_Init>
 694:	1e07      	subs	r7, r0, #0
 696:	d003      	beq.n	6a0 <main+0x1c>
		Board_UART_Println("Failed to Initialize SysTick. ");
 698:	4890      	ldr	r0, [pc, #576]	; (8dc <main+0x258>)
 69a:	f7ff fedb 	bl	454 <Board_UART_Println>
		// Unrecoverable Error. Hang.
		while(1);
 69e:	e7fe      	b.n	69e <main+0x1a>
	}

	//---------------
	// Initialize GPIO and LED as output
	Board_LEDs_Init();
 6a0:	f7ff fea2 	bl	3e8 <Board_LEDs_Init>
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 6a4:	2220      	movs	r2, #32
//	SSP_Buffer_Init();
	
	//---------------
	// Initialize CAN  and CAN Ring Buffer

	RingBuffer_Init(&can_rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), BUFFER_SIZE);
 6a6:	4d8e      	ldr	r5, [pc, #568]	; (8e0 <main+0x25c>)
 6a8:	4b8e      	ldr	r3, [pc, #568]	; (8e4 <main+0x260>)
 6aa:	498f      	ldr	r1, [pc, #572]	; (8e8 <main+0x264>)
 6ac:	67da      	str	r2, [r3, #124]	; 0x7c
 6ae:	1c28      	adds	r0, r5, #0
 6b0:	3a08      	subs	r2, #8
 6b2:	2308      	movs	r3, #8
 6b4:	f7ff fd8e 	bl	1d4 <RingBuffer_Init>
	RingBuffer_Flush(&can_rx_buffer);

	Board_CAN_Init(CCAN_BAUD_RATE, CAN_rx, CAN_tx, CAN_error);
 6b8:	498c      	ldr	r1, [pc, #560]	; (8ec <main+0x268>)
 6ba:	4a8d      	ldr	r2, [pc, #564]	; (8f0 <main+0x26c>)
 6bc:	488d      	ldr	r0, [pc, #564]	; (8f4 <main+0x270>)
 6be:	4b8e      	ldr	r3, [pc, #568]	; (8f8 <main+0x274>)
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 6c0:	612f      	str	r7, [r5, #16]
 6c2:	60ef      	str	r7, [r5, #12]
 6c4:	f7ff ff30 	bl	528 <Board_CAN_Init>

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 6c8:	2301      	movs	r3, #1
 6ca:	4c8c      	ldr	r4, [pc, #560]	; (8fc <main+0x278>)
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 6cc:	4e8c      	ldr	r6, [pc, #560]	; (900 <main+0x27c>)

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 6ce:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 6d0:	6833      	ldr	r3, [r6, #0]
 6d2:	1c20      	adds	r0, r4, #0
 6d4:	689b      	ldr	r3, [r3, #8]
		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x000;
 6d6:	6027      	str	r7, [r4, #0]
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 6d8:	689b      	ldr	r3, [r3, #8]

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
 6da:	6067      	str	r7, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 6dc:	4798      	blx	r3
	*/
	can_error_flag = false;
	can_error_info = 0;
	int dlen;
	bool send = false;
	msTicks = 1000;
 6de:	20fa      	movs	r0, #250	; 0xfa
 6e0:	4988      	ldr	r1, [pc, #544]	; (904 <main+0x280>)
 6e2:	0080      	lsls	r0, r0, #2
 6e4:	6008      	str	r0, [r1, #0]

		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
 6e6:	4a88      	ldr	r2, [pc, #544]	; (908 <main+0x284>)
	can_error_info = 0;
 6e8:	4b88      	ldr	r3, [pc, #544]	; (90c <main+0x288>)
	int dlen;
	bool send = false;
	msTicks = 1000;
	lastPrint = msTicks;
 6ea:	6808      	ldr	r0, [r1, #0]
 6ec:	4988      	ldr	r1, [pc, #544]	; (910 <main+0x28c>)

		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
 6ee:	7017      	strb	r7, [r2, #0]
	can_error_info = 0;
 6f0:	601f      	str	r7, [r3, #0]
	int dlen;
	bool send = false;
	msTicks = 1000;
	lastPrint = msTicks;
 6f2:	6008      	str	r0, [r1, #0]

	*/
	can_error_flag = false;
	can_error_info = 0;
	int dlen;
	bool send = false;
 6f4:	9701      	str	r7, [sp, #4]
 6f6:	9202      	str	r2, [sp, #8]
 6f8:	9303      	str	r3, [sp, #12]
	msTicks = 1000;
	lastPrint = msTicks;
	
	while (1) {
		if(lastPrint < msTicks-1000){
 6fa:	4982      	ldr	r1, [pc, #520]	; (904 <main+0x280>)
 6fc:	4885      	ldr	r0, [pc, #532]	; (914 <main+0x290>)
 6fe:	680b      	ldr	r3, [r1, #0]
 700:	4a83      	ldr	r2, [pc, #524]	; (910 <main+0x28c>)
 702:	181b      	adds	r3, r3, r0
 704:	6810      	ldr	r0, [r2, #0]
 706:	4298      	cmp	r0, r3
 708:	d203      	bcs.n	712 <main+0x8e>
			lastPrint = msTicks;
 70a:	680b      	ldr	r3, [r1, #0]
 70c:	6013      	str	r3, [r2, #0]
			car_status();
 70e:	f7ff ff53 	bl	5b8 <car_status>
		}

		if (send) {
 712:	9b01      	ldr	r3, [sp, #4]
 714:	2b00      	cmp	r3, #0
 716:	d058      	beq.n	7ca <main+0x146>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 718:	68ea      	ldr	r2, [r5, #12]
 71a:	692b      	ldr	r3, [r5, #16]
			if (!RingBuffer_IsEmpty(&can_rx_buffer)) {
 71c:	429a      	cmp	r2, r3
 71e:	d054      	beq.n	7ca <main+0x146>
				CCAN_MSG_OBJ_T temp_msg;
				RingBuffer_Pop(&can_rx_buffer, &temp_msg);
 720:	1c28      	adds	r0, r5, #0
 722:	a904      	add	r1, sp, #16
 724:	f7ff fd76 	bl	214 <RingBuffer_Pop>
				if (temp_msg.mode_id== 0x505) {		//driver interface
 728:	9b04      	ldr	r3, [sp, #16]
 72a:	4a7b      	ldr	r2, [pc, #492]	; (918 <main+0x294>)
 72c:	4293      	cmp	r3, r2
 72e:	d107      	bne.n	740 <main+0xbc>
					drive_key[2]=temp_msg.data_16[0];
 730:	ab04      	add	r3, sp, #16
 732:	891a      	ldrh	r2, [r3, #8]
 734:	4b79      	ldr	r3, [pc, #484]	; (91c <main+0x298>)
 736:	609a      	str	r2, [r3, #8]
					drive_status[2]=temp_msg.data_16[1];
 738:	ab04      	add	r3, sp, #16
 73a:	895a      	ldrh	r2, [r3, #10]
 73c:	4b78      	ldr	r3, [pc, #480]	; (920 <main+0x29c>)
 73e:	e043      	b.n	7c8 <main+0x144>
				}
				else if (temp_msg.mode_id==vel1[0]) {	//velocity1
 740:	4a78      	ldr	r2, [pc, #480]	; (924 <main+0x2a0>)
 742:	6811      	ldr	r1, [r2, #0]
 744:	428b      	cmp	r3, r1
 746:	d003      	beq.n	750 <main+0xcc>
					vel1[2] = temp_msg.data_16[0];
				}
				else if (temp_msg.mode_id==vel2[0]) {	//velocity2
 748:	4a77      	ldr	r2, [pc, #476]	; (928 <main+0x2a4>)
 74a:	6811      	ldr	r1, [r2, #0]
 74c:	428b      	cmp	r3, r1
 74e:	d103      	bne.n	758 <main+0xd4>
					vel2[2] = temp_msg.data_16[0];
 750:	ab04      	add	r3, sp, #16
 752:	891b      	ldrh	r3, [r3, #8]
 754:	6093      	str	r3, [r2, #8]
 756:	e038      	b.n	7ca <main+0x146>
				}
				else if (temp_msg.mode_id==0x705) {	//motor interface 
 758:	4a74      	ldr	r2, [pc, #464]	; (92c <main+0x2a8>)
 75a:	4293      	cmp	r3, r2
 75c:	d113      	bne.n	786 <main+0x102>
					motor_shut_ok[2]= temp_msg.data_16[0];
 75e:	ab04      	add	r3, sp, #16
 760:	891a      	ldrh	r2, [r3, #8]
 762:	4b73      	ldr	r3, [pc, #460]	; (930 <main+0x2ac>)
 764:	609a      	str	r2, [r3, #8]
					motor_curr[2]= temp_msg.data_16[1];
 766:	ab04      	add	r3, sp, #16
 768:	895a      	ldrh	r2, [r3, #10]
 76a:	4b72      	ldr	r3, [pc, #456]	; (934 <main+0x2b0>)
 76c:	609a      	str	r2, [r3, #8]
					motor_speed[2]= temp_msg.data_16[2];
 76e:	ab04      	add	r3, sp, #16
 770:	899a      	ldrh	r2, [r3, #12]
 772:	4b71      	ldr	r3, [pc, #452]	; (938 <main+0x2b4>)
 774:	609a      	str	r2, [r3, #8]
					motor_volt[2]= temp_msg.data_16[3];
 776:	ab04      	add	r3, sp, #16
 778:	89da      	ldrh	r2, [r3, #14]
 77a:	4b70      	ldr	r3, [pc, #448]	; (93c <main+0x2b8>)
 77c:	609a      	str	r2, [r3, #8]
					motor_torque[2]= temp_msg.data_16[4];
 77e:	ab04      	add	r3, sp, #16
 780:	8a1a      	ldrh	r2, [r3, #16]
 782:	4b6f      	ldr	r3, [pc, #444]	; (940 <main+0x2bc>)
 784:	e020      	b.n	7c8 <main+0x144>
				}
				else if (temp_msg.mode_id==0x301) {	//throttle interface   
 786:	4a6f      	ldr	r2, [pc, #444]	; (944 <main+0x2c0>)
 788:	4293      	cmp	r3, r2
 78a:	d107      	bne.n	79c <main+0x118>
					throt_acc[2]=temp_msg.data_16[0];
 78c:	ab04      	add	r3, sp, #16
 78e:	891a      	ldrh	r2, [r3, #8]
 790:	4b6d      	ldr	r3, [pc, #436]	; (948 <main+0x2c4>)
 792:	609a      	str	r2, [r3, #8]
					throt_break[2]=temp_msg.data_16[1];
 794:	ab04      	add	r3, sp, #16
 796:	895a      	ldrh	r2, [r3, #10]
 798:	4b6c      	ldr	r3, [pc, #432]	; (94c <main+0x2c8>)
 79a:	e015      	b.n	7c8 <main+0x144>
				}
				else if (temp_msg.mode_id==0x6F5) {	//pack charge mismatch
 79c:	4a6c      	ldr	r2, [pc, #432]	; (950 <main+0x2cc>)
 79e:	4293      	cmp	r3, r2
 7a0:	d013      	beq.n	7ca <main+0x146>
					
				}
				else if (temp_msg.mode_id==0x6F9) {	//cell temps
 7a2:	4a6c      	ldr	r2, [pc, #432]	; (954 <main+0x2d0>)
 7a4:	4293      	cmp	r3, r2
 7a6:	d000      	beq.n	7aa <main+0x126>
 7a8:	e095      	b.n	8d6 <main+0x252>
					min_cell_temp[2]= temp_msg.data_16[0];
 7aa:	ab04      	add	r3, sp, #16
 7ac:	891a      	ldrh	r2, [r3, #8]
 7ae:	4b6a      	ldr	r3, [pc, #424]	; (958 <main+0x2d4>)
 7b0:	609a      	str	r2, [r3, #8]
					max_cell_temp[2]= temp_msg.data_16[1];
 7b2:	ab04      	add	r3, sp, #16
 7b4:	895a      	ldrh	r2, [r3, #10]
 7b6:	4b69      	ldr	r3, [pc, #420]	; (95c <main+0x2d8>)
 7b8:	609a      	str	r2, [r3, #8]
					cmu_with_min_temp[2]= temp_msg.data_16[2];
 7ba:	ab04      	add	r3, sp, #16
 7bc:	899a      	ldrh	r2, [r3, #12]
 7be:	4b68      	ldr	r3, [pc, #416]	; (960 <main+0x2dc>)
 7c0:	609a      	str	r2, [r3, #8]
					cmu_with_max_temp[2]= temp_msg.data_16[3];
 7c2:	ab04      	add	r3, sp, #16
 7c4:	89da      	ldrh	r2, [r3, #14]
 7c6:	4b67      	ldr	r3, [pc, #412]	; (964 <main+0x2e0>)
 7c8:	609a      	str	r2, [r3, #8]
					break;
				}
			}	
		}

		if (can_error_flag) {
 7ca:	9b02      	ldr	r3, [sp, #8]
 7cc:	781b      	ldrb	r3, [r3, #0]
 7ce:	2b00      	cmp	r3, #0
 7d0:	d00f      	beq.n	7f2 <main+0x16e>
			can_error_flag = false;
 7d2:	2300      	movs	r3, #0
 7d4:	9a02      	ldr	r2, [sp, #8]
			Board_UART_Print("CAN Error: 0b");
 7d6:	4864      	ldr	r0, [pc, #400]	; (968 <main+0x2e4>)
				}
			}	
		}

		if (can_error_flag) {
			can_error_flag = false;
 7d8:	7013      	strb	r3, [r2, #0]
			Board_UART_Print("CAN Error: 0b");
 7da:	f7ff fe2f 	bl	43c <Board_UART_Print>
			itoa(can_error_info, str, 2);
 7de:	4f63      	ldr	r7, [pc, #396]	; (96c <main+0x2e8>)
 7e0:	9b03      	ldr	r3, [sp, #12]
 7e2:	1c39      	adds	r1, r7, #0
 7e4:	6818      	ldr	r0, [r3, #0]
 7e6:	2202      	movs	r2, #2
 7e8:	f7ff fd92 	bl	310 <itoa>
			Board_UART_Println(str);
 7ec:	1c38      	adds	r0, r7, #0
 7ee:	f7ff fe31 	bl	454 <Board_UART_Println>
		}

		uint8_t count;

		if ((count = Board_UART_Read(uart_rx_buffer, BUFFER_SIZE)) != 0) {
 7f2:	4f5f      	ldr	r7, [pc, #380]	; (970 <main+0x2ec>)
 7f4:	2108      	movs	r1, #8
 7f6:	1c38      	adds	r0, r7, #0
 7f8:	f7ff fe4c 	bl	494 <Board_UART_Read>
 7fc:	2800      	cmp	r0, #0
 7fe:	d100      	bne.n	802 <main+0x17e>
 800:	e77b      	b.n	6fa <main+0x76>
			//Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
			switch (uart_rx_buffer[0]) {
 802:	7838      	ldrb	r0, [r7, #0]
 804:	3867      	subs	r0, #103	; 0x67
 806:	2811      	cmp	r0, #17
 808:	d900      	bls.n	80c <main+0x188>
 80a:	e776      	b.n	6fa <main+0x76>
 80c:	f000 f904 	bl	a18 <__gnu_thumb1_case_shi>
 810:	ff750057 	.word	0xff750057
 814:	ff75ff75 	.word	0xff75ff75
 818:	ff75ff75 	.word	0xff75ff75
 81c:	ff750021 	.word	0xff750021
 820:	0012ff75 	.word	0x0012ff75
 824:	ff75ff75 	.word	0xff75ff75
 828:	ff75005d 	.word	0xff75005d
 82c:	0034ff75 	.word	0x0034ff75
 830:	0043ff75 	.word	0x0043ff75
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
 834:	484f      	ldr	r0, [pc, #316]	; (974 <main+0x2f0>)
 836:	f7ff fe0d 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 83a:	2302      	movs	r3, #2
 83c:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x305;
 83e:	4b4e      	ldr	r3, [pc, #312]	; (978 <main+0x2f4>)
					msg_obj.dlc = 5;
					msg_obj.data_16[0] = 0x00;
 840:	2200      	movs	r2, #0
			//Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
			switch (uart_rx_buffer[0]) {
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x305;
 842:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 5;
 844:	2305      	movs	r3, #5
 846:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x00;
					msg_obj.data_16[1] = 0x01;
 848:	3b04      	subs	r3, #4
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x305;
					msg_obj.dlc = 5;
					msg_obj.data_16[0] = 0x00;
 84a:	8122      	strh	r2, [r4, #8]
					msg_obj.data_16[1] = 0x01;
 84c:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x00;
 84e:	81a2      	strh	r2, [r4, #12]
 850:	e010      	b.n	874 <main+0x1f0>
					msg_obj.data_16[3] = 0x01;
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'm':
					Board_UART_Println("Sending CAN with ID: 0x705");
 852:	484a      	ldr	r0, [pc, #296]	; (97c <main+0x2f8>)
 854:	f7ff fdfe 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 858:	2302      	movs	r3, #2
 85a:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x705;
 85c:	4b33      	ldr	r3, [pc, #204]	; (92c <main+0x2a8>)
 85e:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 7;
 860:	2307      	movs	r3, #7
 862:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x01;
 864:	3b06      	subs	r3, #6
 866:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x13;
 868:	3312      	adds	r3, #18
 86a:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x0111;
 86c:	2312      	movs	r3, #18
 86e:	33ff      	adds	r3, #255	; 0xff
 870:	81a3      	strh	r3, [r4, #12]
					msg_obj.data_16[3] = 0x65;
 872:	3bac      	subs	r3, #172	; 0xac
 874:	81e3      	strh	r3, [r4, #14]
 876:	e01c      	b.n	8b2 <main+0x22e>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'v':
					Board_UART_Println("Sending CAN with ID: 0x301");
 878:	4841      	ldr	r0, [pc, #260]	; (980 <main+0x2fc>)
 87a:	f7ff fdeb 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 87e:	2302      	movs	r3, #2
 880:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x301;
 882:	4b30      	ldr	r3, [pc, #192]	; (944 <main+0x2c0>)
 884:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 3;
 886:	2303      	movs	r3, #3
 888:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x31;
 88a:	332e      	adds	r3, #46	; 0x2e
 88c:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x00;
 88e:	2300      	movs	r3, #0
 890:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x00;
 892:	81a3      	strh	r3, [r4, #12]
 894:	e00d      	b.n	8b2 <main+0x22e>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'x':
					Board_UART_Println("Sending CAN with ID: 0x505");
 896:	483b      	ldr	r0, [pc, #236]	; (984 <main+0x300>)
 898:	f7ff fddc 	bl	454 <Board_UART_Println>
					msg_obj.msgobj = 2;
 89c:	2302      	movs	r3, #2
 89e:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x505;
 8a0:	4b1d      	ldr	r3, [pc, #116]	; (918 <main+0x294>)
 8a2:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 4;
 8a4:	2304      	movs	r3, #4
 8a6:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x0020;
 8a8:	331c      	adds	r3, #28
 8aa:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x0F00;
 8ac:	23f0      	movs	r3, #240	; 0xf0
 8ae:	011b      	lsls	r3, r3, #4
 8b0:	8163      	strh	r3, [r4, #10]
					LPC_CCAN_API->can_transmit(&msg_obj);
 8b2:	6833      	ldr	r3, [r6, #0]
 8b4:	1c20      	adds	r0, r4, #0
 8b6:	689b      	ldr	r3, [r3, #8]
 8b8:	691b      	ldr	r3, [r3, #16]
 8ba:	4798      	blx	r3
					break;
 8bc:	e71d      	b.n	6fa <main+0x76>
				case 'g':
					Board_UART_PrintNum(0xFFF, 16, true);
 8be:	4832      	ldr	r0, [pc, #200]	; (988 <main+0x304>)
 8c0:	2110      	movs	r1, #16
 8c2:	2201      	movs	r2, #1
 8c4:	f7ff fdd0 	bl	468 <Board_UART_PrintNum>
					break;
 8c8:	e717      	b.n	6fa <main+0x76>
				case 's':	//receive from RaspberryPi
					send = !send;
 8ca:	2301      	movs	r3, #1
 8cc:	9a01      	ldr	r2, [sp, #4]
 8ce:	4053      	eors	r3, r2
 8d0:	b2db      	uxtb	r3, r3
 8d2:	9301      	str	r3, [sp, #4]
					break;
 8d4:	e711      	b.n	6fa <main+0x76>
					//Board_UART_Println("Invalid Command");
					break;
			}
		}
	}
}
 8d6:	2000      	movs	r0, #0
 8d8:	b00b      	add	sp, #44	; 0x2c
 8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8dc:	00000e71 	.word	0x00000e71
 8e0:	10000238 	.word	0x10000238
 8e4:	50020004 	.word	0x50020004
 8e8:	10000268 	.word	0x10000268
 8ec:	00000589 	.word	0x00000589
 8f0:	00000571 	.word	0x00000571
 8f4:	0007a120 	.word	0x0007a120
 8f8:	00000575 	.word	0x00000575
 8fc:	10000328 	.word	0x10000328
 900:	1fff1ff8 	.word	0x1fff1ff8
 904:	10000340 	.word	0x10000340
 908:	10000264 	.word	0x10000264
 90c:	1000016c 	.word	0x1000016c
 910:	10000204 	.word	0x10000204
 914:	fffffc18 	.word	0xfffffc18
 918:	00000505 	.word	0x00000505
 91c:	10000214 	.word	0x10000214
 920:	10000208 	.word	0x10000208
 924:	10000130 	.word	0x10000130
 928:	1000013c 	.word	0x1000013c
 92c:	00000705 	.word	0x00000705
 930:	10000188 	.word	0x10000188
 934:	10000154 	.word	0x10000154
 938:	10000160 	.word	0x10000160
 93c:	10000170 	.word	0x10000170
 940:	1000022c 	.word	0x1000022c
 944:	00000301 	.word	0x00000301
 948:	10000258 	.word	0x10000258
 94c:	1000024c 	.word	0x1000024c
 950:	000006f5 	.word	0x000006f5
 954:	000006f9 	.word	0x000006f9
 958:	10000220 	.word	0x10000220
 95c:	10000194 	.word	0x10000194
 960:	10000148 	.word	0x10000148
 964:	1000017c 	.word	0x1000017c
 968:	00000e90 	.word	0x00000e90
 96c:	100001a0 	.word	0x100001a0
 970:	10000128 	.word	0x10000128
 974:	00000e9e 	.word	0x00000e9e
 978:	00000305 	.word	0x00000305
 97c:	00000eb9 	.word	0x00000eb9
 980:	00000ed4 	.word	0x00000ed4
 984:	00000eef 	.word	0x00000eef
 988:	00000fff 	.word	0x00000fff

0000098c <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 98c:	218e      	movs	r1, #142	; 0x8e
 98e:	2020      	movs	r0, #32
 990:	4b1e      	ldr	r3, [pc, #120]	; (a0c <SystemInit+0x80>)
 992:	0089      	lsls	r1, r1, #2
 994:	585a      	ldr	r2, [r3, r1]
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 996:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 998:	4382      	bics	r2, r0
 99a:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 99c:	2200      	movs	r2, #0
 99e:	621a      	str	r2, [r3, #32]
 9a0:	32c8      	adds	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 9a2:	46c0      	nop			; (mov r8, r8)
 9a4:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 9a6:	2a00      	cmp	r2, #0
 9a8:	d1fb      	bne.n	9a2 <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 9aa:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 9ac:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 9ae:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 9b0:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 9b2:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 9b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 9b6:	4a15      	ldr	r2, [pc, #84]	; (a0c <SystemInit+0x80>)
 9b8:	07c9      	lsls	r1, r1, #31
 9ba:	d5fb      	bpl.n	9b4 <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 9bc:	2161      	movs	r1, #97	; 0x61
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 9be:	208e      	movs	r0, #142	; 0x8e
 9c0:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 9c2:	6091      	str	r1, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 9c4:	0080      	lsls	r0, r0, #2
 9c6:	5811      	ldr	r1, [r2, r0]
 9c8:	43a1      	bics	r1, r4
 9ca:	5011      	str	r1, [r2, r0]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 9cc:	2101      	movs	r1, #1
 9ce:	68d8      	ldr	r0, [r3, #12]
 9d0:	4a0e      	ldr	r2, [pc, #56]	; (a0c <SystemInit+0x80>)
 9d2:	4208      	tst	r0, r1
 9d4:	d0fa      	beq.n	9cc <SystemInit+0x40>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 9d6:	2000      	movs	r0, #0
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 9d8:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 9da:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 9dc:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 9de:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 9e0:	2001      	movs	r0, #1
 9e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 9e4:	4a09      	ldr	r2, [pc, #36]	; (a0c <SystemInit+0x80>)
 9e6:	4201      	tst	r1, r0
 9e8:	d0fa      	beq.n	9e0 <SystemInit+0x54>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 9ea:	238e      	movs	r3, #142	; 0x8e
 9ec:	2480      	movs	r4, #128	; 0x80
 9ee:	009b      	lsls	r3, r3, #2
 9f0:	58d1      	ldr	r1, [r2, r3]
 9f2:	00e4      	lsls	r4, r4, #3
 9f4:	4321      	orrs	r1, r4
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 9f6:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 9f8:	50d1      	str	r1, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 9fa:	58d1      	ldr	r1, [r2, r3]
 9fc:	0064      	lsls	r4, r4, #1
 9fe:	4321      	orrs	r1, r4
 a00:	50d1      	str	r1, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 a02:	6790      	str	r0, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 a04:	4b02      	ldr	r3, [pc, #8]	; (a10 <SystemInit+0x84>)
 a06:	4a03      	ldr	r2, [pc, #12]	; (a14 <SystemInit+0x88>)
 a08:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 a0a:	bd10      	pop	{r4, pc}
 a0c:	40048000 	.word	0x40048000
 a10:	40048004 	.word	0x40048004
 a14:	0001005f 	.word	0x0001005f

00000a18 <__gnu_thumb1_case_shi>:
 a18:	b403      	push	{r0, r1}
 a1a:	4671      	mov	r1, lr
 a1c:	0849      	lsrs	r1, r1, #1
 a1e:	0040      	lsls	r0, r0, #1
 a20:	0049      	lsls	r1, r1, #1
 a22:	5e09      	ldrsh	r1, [r1, r0]
 a24:	0049      	lsls	r1, r1, #1
 a26:	448e      	add	lr, r1
 a28:	bc03      	pop	{r0, r1}
 a2a:	4770      	bx	lr

00000a2c <__aeabi_uidiv>:
 a2c:	2200      	movs	r2, #0
 a2e:	0843      	lsrs	r3, r0, #1
 a30:	428b      	cmp	r3, r1
 a32:	d374      	bcc.n	b1e <__aeabi_uidiv+0xf2>
 a34:	0903      	lsrs	r3, r0, #4
 a36:	428b      	cmp	r3, r1
 a38:	d35f      	bcc.n	afa <__aeabi_uidiv+0xce>
 a3a:	0a03      	lsrs	r3, r0, #8
 a3c:	428b      	cmp	r3, r1
 a3e:	d344      	bcc.n	aca <__aeabi_uidiv+0x9e>
 a40:	0b03      	lsrs	r3, r0, #12
 a42:	428b      	cmp	r3, r1
 a44:	d328      	bcc.n	a98 <__aeabi_uidiv+0x6c>
 a46:	0c03      	lsrs	r3, r0, #16
 a48:	428b      	cmp	r3, r1
 a4a:	d30d      	bcc.n	a68 <__aeabi_uidiv+0x3c>
 a4c:	22ff      	movs	r2, #255	; 0xff
 a4e:	0209      	lsls	r1, r1, #8
 a50:	ba12      	rev	r2, r2
 a52:	0c03      	lsrs	r3, r0, #16
 a54:	428b      	cmp	r3, r1
 a56:	d302      	bcc.n	a5e <__aeabi_uidiv+0x32>
 a58:	1212      	asrs	r2, r2, #8
 a5a:	0209      	lsls	r1, r1, #8
 a5c:	d065      	beq.n	b2a <__aeabi_uidiv+0xfe>
 a5e:	0b03      	lsrs	r3, r0, #12
 a60:	428b      	cmp	r3, r1
 a62:	d319      	bcc.n	a98 <__aeabi_uidiv+0x6c>
 a64:	e000      	b.n	a68 <__aeabi_uidiv+0x3c>
 a66:	0a09      	lsrs	r1, r1, #8
 a68:	0bc3      	lsrs	r3, r0, #15
 a6a:	428b      	cmp	r3, r1
 a6c:	d301      	bcc.n	a72 <__aeabi_uidiv+0x46>
 a6e:	03cb      	lsls	r3, r1, #15
 a70:	1ac0      	subs	r0, r0, r3
 a72:	4152      	adcs	r2, r2
 a74:	0b83      	lsrs	r3, r0, #14
 a76:	428b      	cmp	r3, r1
 a78:	d301      	bcc.n	a7e <__aeabi_uidiv+0x52>
 a7a:	038b      	lsls	r3, r1, #14
 a7c:	1ac0      	subs	r0, r0, r3
 a7e:	4152      	adcs	r2, r2
 a80:	0b43      	lsrs	r3, r0, #13
 a82:	428b      	cmp	r3, r1
 a84:	d301      	bcc.n	a8a <__aeabi_uidiv+0x5e>
 a86:	034b      	lsls	r3, r1, #13
 a88:	1ac0      	subs	r0, r0, r3
 a8a:	4152      	adcs	r2, r2
 a8c:	0b03      	lsrs	r3, r0, #12
 a8e:	428b      	cmp	r3, r1
 a90:	d301      	bcc.n	a96 <__aeabi_uidiv+0x6a>
 a92:	030b      	lsls	r3, r1, #12
 a94:	1ac0      	subs	r0, r0, r3
 a96:	4152      	adcs	r2, r2
 a98:	0ac3      	lsrs	r3, r0, #11
 a9a:	428b      	cmp	r3, r1
 a9c:	d301      	bcc.n	aa2 <__aeabi_uidiv+0x76>
 a9e:	02cb      	lsls	r3, r1, #11
 aa0:	1ac0      	subs	r0, r0, r3
 aa2:	4152      	adcs	r2, r2
 aa4:	0a83      	lsrs	r3, r0, #10
 aa6:	428b      	cmp	r3, r1
 aa8:	d301      	bcc.n	aae <__aeabi_uidiv+0x82>
 aaa:	028b      	lsls	r3, r1, #10
 aac:	1ac0      	subs	r0, r0, r3
 aae:	4152      	adcs	r2, r2
 ab0:	0a43      	lsrs	r3, r0, #9
 ab2:	428b      	cmp	r3, r1
 ab4:	d301      	bcc.n	aba <__aeabi_uidiv+0x8e>
 ab6:	024b      	lsls	r3, r1, #9
 ab8:	1ac0      	subs	r0, r0, r3
 aba:	4152      	adcs	r2, r2
 abc:	0a03      	lsrs	r3, r0, #8
 abe:	428b      	cmp	r3, r1
 ac0:	d301      	bcc.n	ac6 <__aeabi_uidiv+0x9a>
 ac2:	020b      	lsls	r3, r1, #8
 ac4:	1ac0      	subs	r0, r0, r3
 ac6:	4152      	adcs	r2, r2
 ac8:	d2cd      	bcs.n	a66 <__aeabi_uidiv+0x3a>
 aca:	09c3      	lsrs	r3, r0, #7
 acc:	428b      	cmp	r3, r1
 ace:	d301      	bcc.n	ad4 <__aeabi_uidiv+0xa8>
 ad0:	01cb      	lsls	r3, r1, #7
 ad2:	1ac0      	subs	r0, r0, r3
 ad4:	4152      	adcs	r2, r2
 ad6:	0983      	lsrs	r3, r0, #6
 ad8:	428b      	cmp	r3, r1
 ada:	d301      	bcc.n	ae0 <__aeabi_uidiv+0xb4>
 adc:	018b      	lsls	r3, r1, #6
 ade:	1ac0      	subs	r0, r0, r3
 ae0:	4152      	adcs	r2, r2
 ae2:	0943      	lsrs	r3, r0, #5
 ae4:	428b      	cmp	r3, r1
 ae6:	d301      	bcc.n	aec <__aeabi_uidiv+0xc0>
 ae8:	014b      	lsls	r3, r1, #5
 aea:	1ac0      	subs	r0, r0, r3
 aec:	4152      	adcs	r2, r2
 aee:	0903      	lsrs	r3, r0, #4
 af0:	428b      	cmp	r3, r1
 af2:	d301      	bcc.n	af8 <__aeabi_uidiv+0xcc>
 af4:	010b      	lsls	r3, r1, #4
 af6:	1ac0      	subs	r0, r0, r3
 af8:	4152      	adcs	r2, r2
 afa:	08c3      	lsrs	r3, r0, #3
 afc:	428b      	cmp	r3, r1
 afe:	d301      	bcc.n	b04 <__aeabi_uidiv+0xd8>
 b00:	00cb      	lsls	r3, r1, #3
 b02:	1ac0      	subs	r0, r0, r3
 b04:	4152      	adcs	r2, r2
 b06:	0883      	lsrs	r3, r0, #2
 b08:	428b      	cmp	r3, r1
 b0a:	d301      	bcc.n	b10 <__aeabi_uidiv+0xe4>
 b0c:	008b      	lsls	r3, r1, #2
 b0e:	1ac0      	subs	r0, r0, r3
 b10:	4152      	adcs	r2, r2
 b12:	0843      	lsrs	r3, r0, #1
 b14:	428b      	cmp	r3, r1
 b16:	d301      	bcc.n	b1c <__aeabi_uidiv+0xf0>
 b18:	004b      	lsls	r3, r1, #1
 b1a:	1ac0      	subs	r0, r0, r3
 b1c:	4152      	adcs	r2, r2
 b1e:	1a41      	subs	r1, r0, r1
 b20:	d200      	bcs.n	b24 <__aeabi_uidiv+0xf8>
 b22:	4601      	mov	r1, r0
 b24:	4152      	adcs	r2, r2
 b26:	4610      	mov	r0, r2
 b28:	4770      	bx	lr
 b2a:	e7ff      	b.n	b2c <__aeabi_uidiv+0x100>
 b2c:	b501      	push	{r0, lr}
 b2e:	2000      	movs	r0, #0
 b30:	f000 f8fc 	bl	d2c <__aeabi_idiv0>
 b34:	bd02      	pop	{r1, pc}
 b36:	46c0      	nop			; (mov r8, r8)

00000b38 <__aeabi_uidivmod>:
 b38:	2900      	cmp	r1, #0
 b3a:	d0f7      	beq.n	b2c <__aeabi_uidiv+0x100>
 b3c:	b503      	push	{r0, r1, lr}
 b3e:	f7ff ff75 	bl	a2c <__aeabi_uidiv>
 b42:	bc0e      	pop	{r1, r2, r3}
 b44:	4342      	muls	r2, r0
 b46:	1a89      	subs	r1, r1, r2
 b48:	4718      	bx	r3
 b4a:	46c0      	nop			; (mov r8, r8)

00000b4c <__aeabi_idiv>:
 b4c:	4603      	mov	r3, r0
 b4e:	430b      	orrs	r3, r1
 b50:	d47f      	bmi.n	c52 <__aeabi_idiv+0x106>
 b52:	2200      	movs	r2, #0
 b54:	0843      	lsrs	r3, r0, #1
 b56:	428b      	cmp	r3, r1
 b58:	d374      	bcc.n	c44 <__aeabi_idiv+0xf8>
 b5a:	0903      	lsrs	r3, r0, #4
 b5c:	428b      	cmp	r3, r1
 b5e:	d35f      	bcc.n	c20 <__aeabi_idiv+0xd4>
 b60:	0a03      	lsrs	r3, r0, #8
 b62:	428b      	cmp	r3, r1
 b64:	d344      	bcc.n	bf0 <__aeabi_idiv+0xa4>
 b66:	0b03      	lsrs	r3, r0, #12
 b68:	428b      	cmp	r3, r1
 b6a:	d328      	bcc.n	bbe <__aeabi_idiv+0x72>
 b6c:	0c03      	lsrs	r3, r0, #16
 b6e:	428b      	cmp	r3, r1
 b70:	d30d      	bcc.n	b8e <__aeabi_idiv+0x42>
 b72:	22ff      	movs	r2, #255	; 0xff
 b74:	0209      	lsls	r1, r1, #8
 b76:	ba12      	rev	r2, r2
 b78:	0c03      	lsrs	r3, r0, #16
 b7a:	428b      	cmp	r3, r1
 b7c:	d302      	bcc.n	b84 <__aeabi_idiv+0x38>
 b7e:	1212      	asrs	r2, r2, #8
 b80:	0209      	lsls	r1, r1, #8
 b82:	d065      	beq.n	c50 <__aeabi_idiv+0x104>
 b84:	0b03      	lsrs	r3, r0, #12
 b86:	428b      	cmp	r3, r1
 b88:	d319      	bcc.n	bbe <__aeabi_idiv+0x72>
 b8a:	e000      	b.n	b8e <__aeabi_idiv+0x42>
 b8c:	0a09      	lsrs	r1, r1, #8
 b8e:	0bc3      	lsrs	r3, r0, #15
 b90:	428b      	cmp	r3, r1
 b92:	d301      	bcc.n	b98 <__aeabi_idiv+0x4c>
 b94:	03cb      	lsls	r3, r1, #15
 b96:	1ac0      	subs	r0, r0, r3
 b98:	4152      	adcs	r2, r2
 b9a:	0b83      	lsrs	r3, r0, #14
 b9c:	428b      	cmp	r3, r1
 b9e:	d301      	bcc.n	ba4 <__aeabi_idiv+0x58>
 ba0:	038b      	lsls	r3, r1, #14
 ba2:	1ac0      	subs	r0, r0, r3
 ba4:	4152      	adcs	r2, r2
 ba6:	0b43      	lsrs	r3, r0, #13
 ba8:	428b      	cmp	r3, r1
 baa:	d301      	bcc.n	bb0 <__aeabi_idiv+0x64>
 bac:	034b      	lsls	r3, r1, #13
 bae:	1ac0      	subs	r0, r0, r3
 bb0:	4152      	adcs	r2, r2
 bb2:	0b03      	lsrs	r3, r0, #12
 bb4:	428b      	cmp	r3, r1
 bb6:	d301      	bcc.n	bbc <__aeabi_idiv+0x70>
 bb8:	030b      	lsls	r3, r1, #12
 bba:	1ac0      	subs	r0, r0, r3
 bbc:	4152      	adcs	r2, r2
 bbe:	0ac3      	lsrs	r3, r0, #11
 bc0:	428b      	cmp	r3, r1
 bc2:	d301      	bcc.n	bc8 <__aeabi_idiv+0x7c>
 bc4:	02cb      	lsls	r3, r1, #11
 bc6:	1ac0      	subs	r0, r0, r3
 bc8:	4152      	adcs	r2, r2
 bca:	0a83      	lsrs	r3, r0, #10
 bcc:	428b      	cmp	r3, r1
 bce:	d301      	bcc.n	bd4 <__aeabi_idiv+0x88>
 bd0:	028b      	lsls	r3, r1, #10
 bd2:	1ac0      	subs	r0, r0, r3
 bd4:	4152      	adcs	r2, r2
 bd6:	0a43      	lsrs	r3, r0, #9
 bd8:	428b      	cmp	r3, r1
 bda:	d301      	bcc.n	be0 <__aeabi_idiv+0x94>
 bdc:	024b      	lsls	r3, r1, #9
 bde:	1ac0      	subs	r0, r0, r3
 be0:	4152      	adcs	r2, r2
 be2:	0a03      	lsrs	r3, r0, #8
 be4:	428b      	cmp	r3, r1
 be6:	d301      	bcc.n	bec <__aeabi_idiv+0xa0>
 be8:	020b      	lsls	r3, r1, #8
 bea:	1ac0      	subs	r0, r0, r3
 bec:	4152      	adcs	r2, r2
 bee:	d2cd      	bcs.n	b8c <__aeabi_idiv+0x40>
 bf0:	09c3      	lsrs	r3, r0, #7
 bf2:	428b      	cmp	r3, r1
 bf4:	d301      	bcc.n	bfa <__aeabi_idiv+0xae>
 bf6:	01cb      	lsls	r3, r1, #7
 bf8:	1ac0      	subs	r0, r0, r3
 bfa:	4152      	adcs	r2, r2
 bfc:	0983      	lsrs	r3, r0, #6
 bfe:	428b      	cmp	r3, r1
 c00:	d301      	bcc.n	c06 <__aeabi_idiv+0xba>
 c02:	018b      	lsls	r3, r1, #6
 c04:	1ac0      	subs	r0, r0, r3
 c06:	4152      	adcs	r2, r2
 c08:	0943      	lsrs	r3, r0, #5
 c0a:	428b      	cmp	r3, r1
 c0c:	d301      	bcc.n	c12 <__aeabi_idiv+0xc6>
 c0e:	014b      	lsls	r3, r1, #5
 c10:	1ac0      	subs	r0, r0, r3
 c12:	4152      	adcs	r2, r2
 c14:	0903      	lsrs	r3, r0, #4
 c16:	428b      	cmp	r3, r1
 c18:	d301      	bcc.n	c1e <__aeabi_idiv+0xd2>
 c1a:	010b      	lsls	r3, r1, #4
 c1c:	1ac0      	subs	r0, r0, r3
 c1e:	4152      	adcs	r2, r2
 c20:	08c3      	lsrs	r3, r0, #3
 c22:	428b      	cmp	r3, r1
 c24:	d301      	bcc.n	c2a <__aeabi_idiv+0xde>
 c26:	00cb      	lsls	r3, r1, #3
 c28:	1ac0      	subs	r0, r0, r3
 c2a:	4152      	adcs	r2, r2
 c2c:	0883      	lsrs	r3, r0, #2
 c2e:	428b      	cmp	r3, r1
 c30:	d301      	bcc.n	c36 <__aeabi_idiv+0xea>
 c32:	008b      	lsls	r3, r1, #2
 c34:	1ac0      	subs	r0, r0, r3
 c36:	4152      	adcs	r2, r2
 c38:	0843      	lsrs	r3, r0, #1
 c3a:	428b      	cmp	r3, r1
 c3c:	d301      	bcc.n	c42 <__aeabi_idiv+0xf6>
 c3e:	004b      	lsls	r3, r1, #1
 c40:	1ac0      	subs	r0, r0, r3
 c42:	4152      	adcs	r2, r2
 c44:	1a41      	subs	r1, r0, r1
 c46:	d200      	bcs.n	c4a <__aeabi_idiv+0xfe>
 c48:	4601      	mov	r1, r0
 c4a:	4152      	adcs	r2, r2
 c4c:	4610      	mov	r0, r2
 c4e:	4770      	bx	lr
 c50:	e05d      	b.n	d0e <__aeabi_idiv+0x1c2>
 c52:	0fca      	lsrs	r2, r1, #31
 c54:	d000      	beq.n	c58 <__aeabi_idiv+0x10c>
 c56:	4249      	negs	r1, r1
 c58:	1003      	asrs	r3, r0, #32
 c5a:	d300      	bcc.n	c5e <__aeabi_idiv+0x112>
 c5c:	4240      	negs	r0, r0
 c5e:	4053      	eors	r3, r2
 c60:	2200      	movs	r2, #0
 c62:	469c      	mov	ip, r3
 c64:	0903      	lsrs	r3, r0, #4
 c66:	428b      	cmp	r3, r1
 c68:	d32d      	bcc.n	cc6 <__aeabi_idiv+0x17a>
 c6a:	0a03      	lsrs	r3, r0, #8
 c6c:	428b      	cmp	r3, r1
 c6e:	d312      	bcc.n	c96 <__aeabi_idiv+0x14a>
 c70:	22fc      	movs	r2, #252	; 0xfc
 c72:	0189      	lsls	r1, r1, #6
 c74:	ba12      	rev	r2, r2
 c76:	0a03      	lsrs	r3, r0, #8
 c78:	428b      	cmp	r3, r1
 c7a:	d30c      	bcc.n	c96 <__aeabi_idiv+0x14a>
 c7c:	0189      	lsls	r1, r1, #6
 c7e:	1192      	asrs	r2, r2, #6
 c80:	428b      	cmp	r3, r1
 c82:	d308      	bcc.n	c96 <__aeabi_idiv+0x14a>
 c84:	0189      	lsls	r1, r1, #6
 c86:	1192      	asrs	r2, r2, #6
 c88:	428b      	cmp	r3, r1
 c8a:	d304      	bcc.n	c96 <__aeabi_idiv+0x14a>
 c8c:	0189      	lsls	r1, r1, #6
 c8e:	d03a      	beq.n	d06 <__aeabi_idiv+0x1ba>
 c90:	1192      	asrs	r2, r2, #6
 c92:	e000      	b.n	c96 <__aeabi_idiv+0x14a>
 c94:	0989      	lsrs	r1, r1, #6
 c96:	09c3      	lsrs	r3, r0, #7
 c98:	428b      	cmp	r3, r1
 c9a:	d301      	bcc.n	ca0 <__aeabi_idiv+0x154>
 c9c:	01cb      	lsls	r3, r1, #7
 c9e:	1ac0      	subs	r0, r0, r3
 ca0:	4152      	adcs	r2, r2
 ca2:	0983      	lsrs	r3, r0, #6
 ca4:	428b      	cmp	r3, r1
 ca6:	d301      	bcc.n	cac <__aeabi_idiv+0x160>
 ca8:	018b      	lsls	r3, r1, #6
 caa:	1ac0      	subs	r0, r0, r3
 cac:	4152      	adcs	r2, r2
 cae:	0943      	lsrs	r3, r0, #5
 cb0:	428b      	cmp	r3, r1
 cb2:	d301      	bcc.n	cb8 <__aeabi_idiv+0x16c>
 cb4:	014b      	lsls	r3, r1, #5
 cb6:	1ac0      	subs	r0, r0, r3
 cb8:	4152      	adcs	r2, r2
 cba:	0903      	lsrs	r3, r0, #4
 cbc:	428b      	cmp	r3, r1
 cbe:	d301      	bcc.n	cc4 <__aeabi_idiv+0x178>
 cc0:	010b      	lsls	r3, r1, #4
 cc2:	1ac0      	subs	r0, r0, r3
 cc4:	4152      	adcs	r2, r2
 cc6:	08c3      	lsrs	r3, r0, #3
 cc8:	428b      	cmp	r3, r1
 cca:	d301      	bcc.n	cd0 <__aeabi_idiv+0x184>
 ccc:	00cb      	lsls	r3, r1, #3
 cce:	1ac0      	subs	r0, r0, r3
 cd0:	4152      	adcs	r2, r2
 cd2:	0883      	lsrs	r3, r0, #2
 cd4:	428b      	cmp	r3, r1
 cd6:	d301      	bcc.n	cdc <__aeabi_idiv+0x190>
 cd8:	008b      	lsls	r3, r1, #2
 cda:	1ac0      	subs	r0, r0, r3
 cdc:	4152      	adcs	r2, r2
 cde:	d2d9      	bcs.n	c94 <__aeabi_idiv+0x148>
 ce0:	0843      	lsrs	r3, r0, #1
 ce2:	428b      	cmp	r3, r1
 ce4:	d301      	bcc.n	cea <__aeabi_idiv+0x19e>
 ce6:	004b      	lsls	r3, r1, #1
 ce8:	1ac0      	subs	r0, r0, r3
 cea:	4152      	adcs	r2, r2
 cec:	1a41      	subs	r1, r0, r1
 cee:	d200      	bcs.n	cf2 <__aeabi_idiv+0x1a6>
 cf0:	4601      	mov	r1, r0
 cf2:	4663      	mov	r3, ip
 cf4:	4152      	adcs	r2, r2
 cf6:	105b      	asrs	r3, r3, #1
 cf8:	4610      	mov	r0, r2
 cfa:	d301      	bcc.n	d00 <__aeabi_idiv+0x1b4>
 cfc:	4240      	negs	r0, r0
 cfe:	2b00      	cmp	r3, #0
 d00:	d500      	bpl.n	d04 <__aeabi_idiv+0x1b8>
 d02:	4249      	negs	r1, r1
 d04:	4770      	bx	lr
 d06:	4663      	mov	r3, ip
 d08:	105b      	asrs	r3, r3, #1
 d0a:	d300      	bcc.n	d0e <__aeabi_idiv+0x1c2>
 d0c:	4240      	negs	r0, r0
 d0e:	b501      	push	{r0, lr}
 d10:	2000      	movs	r0, #0
 d12:	f000 f80b 	bl	d2c <__aeabi_idiv0>
 d16:	bd02      	pop	{r1, pc}

00000d18 <__aeabi_idivmod>:
 d18:	2900      	cmp	r1, #0
 d1a:	d0f8      	beq.n	d0e <__aeabi_idiv+0x1c2>
 d1c:	b503      	push	{r0, r1, lr}
 d1e:	f7ff ff15 	bl	b4c <__aeabi_idiv>
 d22:	bc0e      	pop	{r1, r2, r3}
 d24:	4342      	muls	r2, r0
 d26:	1a89      	subs	r1, r1, r2
 d28:	4718      	bx	r3
 d2a:	46c0      	nop			; (mov r8, r8)

00000d2c <__aeabi_idiv0>:
 d2c:	4770      	bx	lr
 d2e:	46c0      	nop			; (mov r8, r8)

00000d30 <memcpy>:
 d30:	b570      	push	{r4, r5, r6, lr}
 d32:	2a0f      	cmp	r2, #15
 d34:	d932      	bls.n	d9c <memcpy+0x6c>
 d36:	1c04      	adds	r4, r0, #0
 d38:	430c      	orrs	r4, r1
 d3a:	1c0b      	adds	r3, r1, #0
 d3c:	07a4      	lsls	r4, r4, #30
 d3e:	d131      	bne.n	da4 <memcpy+0x74>
 d40:	1c15      	adds	r5, r2, #0
 d42:	1c04      	adds	r4, r0, #0
 d44:	3d10      	subs	r5, #16
 d46:	092d      	lsrs	r5, r5, #4
 d48:	3501      	adds	r5, #1
 d4a:	012d      	lsls	r5, r5, #4
 d4c:	1949      	adds	r1, r1, r5
 d4e:	681e      	ldr	r6, [r3, #0]
 d50:	6026      	str	r6, [r4, #0]
 d52:	685e      	ldr	r6, [r3, #4]
 d54:	6066      	str	r6, [r4, #4]
 d56:	689e      	ldr	r6, [r3, #8]
 d58:	60a6      	str	r6, [r4, #8]
 d5a:	68de      	ldr	r6, [r3, #12]
 d5c:	3310      	adds	r3, #16
 d5e:	60e6      	str	r6, [r4, #12]
 d60:	3410      	adds	r4, #16
 d62:	4299      	cmp	r1, r3
 d64:	d1f3      	bne.n	d4e <memcpy+0x1e>
 d66:	230f      	movs	r3, #15
 d68:	1945      	adds	r5, r0, r5
 d6a:	4013      	ands	r3, r2
 d6c:	2b03      	cmp	r3, #3
 d6e:	d91b      	bls.n	da8 <memcpy+0x78>
 d70:	1f1c      	subs	r4, r3, #4
 d72:	2300      	movs	r3, #0
 d74:	08a4      	lsrs	r4, r4, #2
 d76:	3401      	adds	r4, #1
 d78:	00a4      	lsls	r4, r4, #2
 d7a:	58ce      	ldr	r6, [r1, r3]
 d7c:	50ee      	str	r6, [r5, r3]
 d7e:	3304      	adds	r3, #4
 d80:	42a3      	cmp	r3, r4
 d82:	d1fa      	bne.n	d7a <memcpy+0x4a>
 d84:	18ed      	adds	r5, r5, r3
 d86:	18c9      	adds	r1, r1, r3
 d88:	2303      	movs	r3, #3
 d8a:	401a      	ands	r2, r3
 d8c:	d005      	beq.n	d9a <memcpy+0x6a>
 d8e:	2300      	movs	r3, #0
 d90:	5ccc      	ldrb	r4, [r1, r3]
 d92:	54ec      	strb	r4, [r5, r3]
 d94:	3301      	adds	r3, #1
 d96:	4293      	cmp	r3, r2
 d98:	d1fa      	bne.n	d90 <memcpy+0x60>
 d9a:	bd70      	pop	{r4, r5, r6, pc}
 d9c:	1c05      	adds	r5, r0, #0
 d9e:	2a00      	cmp	r2, #0
 da0:	d1f5      	bne.n	d8e <memcpy+0x5e>
 da2:	e7fa      	b.n	d9a <memcpy+0x6a>
 da4:	1c05      	adds	r5, r0, #0
 da6:	e7f2      	b.n	d8e <memcpy+0x5e>
 da8:	1c1a      	adds	r2, r3, #0
 daa:	e7f8      	b.n	d9e <memcpy+0x6e>

00000dac <strlen>:
 dac:	b510      	push	{r4, lr}
 dae:	0783      	lsls	r3, r0, #30
 db0:	d027      	beq.n	e02 <strlen+0x56>
 db2:	7803      	ldrb	r3, [r0, #0]
 db4:	2b00      	cmp	r3, #0
 db6:	d026      	beq.n	e06 <strlen+0x5a>
 db8:	1c03      	adds	r3, r0, #0
 dba:	2103      	movs	r1, #3
 dbc:	e002      	b.n	dc4 <strlen+0x18>
 dbe:	781a      	ldrb	r2, [r3, #0]
 dc0:	2a00      	cmp	r2, #0
 dc2:	d01c      	beq.n	dfe <strlen+0x52>
 dc4:	3301      	adds	r3, #1
 dc6:	420b      	tst	r3, r1
 dc8:	d1f9      	bne.n	dbe <strlen+0x12>
 dca:	6819      	ldr	r1, [r3, #0]
 dcc:	4a0f      	ldr	r2, [pc, #60]	; (e0c <strlen+0x60>)
 dce:	4c10      	ldr	r4, [pc, #64]	; (e10 <strlen+0x64>)
 dd0:	188a      	adds	r2, r1, r2
 dd2:	438a      	bics	r2, r1
 dd4:	4222      	tst	r2, r4
 dd6:	d10f      	bne.n	df8 <strlen+0x4c>
 dd8:	3304      	adds	r3, #4
 dda:	6819      	ldr	r1, [r3, #0]
 ddc:	4a0b      	ldr	r2, [pc, #44]	; (e0c <strlen+0x60>)
 dde:	188a      	adds	r2, r1, r2
 de0:	438a      	bics	r2, r1
 de2:	4222      	tst	r2, r4
 de4:	d108      	bne.n	df8 <strlen+0x4c>
 de6:	3304      	adds	r3, #4
 de8:	6819      	ldr	r1, [r3, #0]
 dea:	4a08      	ldr	r2, [pc, #32]	; (e0c <strlen+0x60>)
 dec:	188a      	adds	r2, r1, r2
 dee:	438a      	bics	r2, r1
 df0:	4222      	tst	r2, r4
 df2:	d0f1      	beq.n	dd8 <strlen+0x2c>
 df4:	e000      	b.n	df8 <strlen+0x4c>
 df6:	3301      	adds	r3, #1
 df8:	781a      	ldrb	r2, [r3, #0]
 dfa:	2a00      	cmp	r2, #0
 dfc:	d1fb      	bne.n	df6 <strlen+0x4a>
 dfe:	1a18      	subs	r0, r3, r0
 e00:	bd10      	pop	{r4, pc}
 e02:	1c03      	adds	r3, r0, #0
 e04:	e7e1      	b.n	dca <strlen+0x1e>
 e06:	2000      	movs	r0, #0
 e08:	e7fa      	b.n	e00 <strlen+0x54>
 e0a:	46c0      	nop			; (mov r8, r8)
 e0c:	fefefeff 	.word	0xfefefeff
 e10:	80808080 	.word	0x80808080

00000e14 <wdtOSCRate>:
 e14:	00000000 000927c0 00100590 00155cc0     .....'.......\..
 e24:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
 e34:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
 e44:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.

00000e54 <digits.4175>:
 e54:	33323130 37363534 62613938 66656463     0123456789abcdef
 e64:	00000000                                ....

00000e68 <OscRateIn>:
 e68:	00000000 2c000a0d 69614600 2064656c     .......,.Failed 
 e78:	49206f74 6974696e 7a696c61 79532065     to Initialize Sy
 e88:	63695473 00202e6b 204e4143 6f727245     sTick. .CAN Erro
 e98:	30203a72 65530062 6e69646e 41432067     r: 0b.Sending CA
 ea8:	6977204e 49206874 30203a44 35303378     N with ID: 0x305
 eb8:	6e655300 676e6964 4e414320 74697720     .Sending CAN wit
 ec8:	44492068 7830203a 00353037 646e6553     h ID: 0x705.Send
 ed8:	20676e69 204e4143 68746977 3a444920     ing CAN with ID:
 ee8:	33783020 53003130 69646e65 4320676e      0x301.Sending C
 ef8:	77204e41 20687469 203a4449 30357830     AN with ID: 0x50
 f08:	00000035                                         5.
