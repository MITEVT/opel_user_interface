
bin/BCM.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000d1 	.word	0x000000d1
   c:	000000d3 	.word	0x000000d3
	...
  2c:	000000d5 	.word	0x000000d5
	...
  38:	000000d7 	.word	0x000000d7
  3c:	00000305 	.word	0x00000305
  40:	000000db 	.word	0x000000db
  44:	000000db 	.word	0x000000db
  48:	000000db 	.word	0x000000db
  4c:	000000db 	.word	0x000000db
  50:	000000db 	.word	0x000000db
  54:	000000db 	.word	0x000000db
  58:	000000db 	.word	0x000000db
  5c:	000000db 	.word	0x000000db
  60:	000000db 	.word	0x000000db
  64:	000000db 	.word	0x000000db
  68:	000000db 	.word	0x000000db
  6c:	000000db 	.word	0x000000db
  70:	000000db 	.word	0x000000db
  74:	00000315 	.word	0x00000315
  78:	000000db 	.word	0x000000db
  7c:	000000db 	.word	0x000000db
  80:	000000db 	.word	0x000000db
  84:	000000db 	.word	0x000000db
  88:	000000db 	.word	0x000000db
  8c:	000000db 	.word	0x000000db
  90:	000000db 	.word	0x000000db
  94:	000000db 	.word	0x000000db
	...
  a0:	000000db 	.word	0x000000db
  a4:	000000db 	.word	0x000000db
  a8:	000000db 	.word	0x000000db
  ac:	00000000 	.word	0x00000000
  b0:	000000db 	.word	0x000000db
  b4:	000000db 	.word	0x000000db
  b8:	000000db 	.word	0x000000db
  bc:	000000db 	.word	0x000000db

000000c0 <Reset_Handler>:

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c0:	4801      	ldr	r0, [pc, #4]	; (c8 <Reset_Handler+0x8>)
    BLX     R0
  c2:	4780      	blx	r0
.if (RAM_MODE)
    LDR     R0,=main
  c4:	4801      	ldr	r0, [pc, #4]	; (cc <Reset_Handler+0xc>)
    BX      R0
  c6:	4700      	bx	r0

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c8:	00000785 	.word	0x00000785
    BLX     R0
.if (RAM_MODE)
    LDR     R0,=main
  cc:	00000541 	.word	0x00000541

000000d0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  d0:	e7fe      	b.n	d0 <NMI_Handler>

000000d2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  d2:	e7fe      	b.n	d2 <HardFault_Handler>

000000d4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  d4:	e7fe      	b.n	d4 <SVC_Handler>

000000d6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  d6:	e7fe      	b.n	d6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  d8:	e7fe      	b.n	d8 <PendSV_Handler+0x2>

000000da <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  da:	e7fe      	b.n	da <Default_Handler>

000000dc <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  de:	f000 f853 	bl	188 <Chip_Clock_GetSystemClockRate>
  e2:	4b01      	ldr	r3, [pc, #4]	; (e8 <SystemCoreClockUpdate+0xc>)
  e4:	6018      	str	r0, [r3, #0]
}
  e6:	bd08      	pop	{r3, pc}
  e8:	10000100 	.word	0x10000100

000000ec <Chip_Clock_GetWDTOSCRate>:

#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
  ec:	b508      	push	{r3, lr}
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
  ee:	4b07      	ldr	r3, [pc, #28]	; (10c <Chip_Clock_GetWDTOSCRate+0x20>)
  f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f2:	231f      	movs	r3, #31
{
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
  f4:	05ca      	lsls	r2, r1, #23
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  f6:	0f12      	lsrs	r2, r2, #28
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f8:	4019      	ands	r1, r3

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  fa:	4b05      	ldr	r3, [pc, #20]	; (110 <Chip_Clock_GetWDTOSCRate+0x24>)
  fc:	0092      	lsls	r2, r2, #2
  fe:	3101      	adds	r1, #1
 100:	0049      	lsls	r1, r1, #1
 102:	58d0      	ldr	r0, [r2, r3]
 104:	f000 fb8e 	bl	824 <__aeabi_uidiv>

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
}
 108:	bd08      	pop	{r3, pc}
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000
 110:	00000af0 	.word	0x00000af0

00000114 <Chip_Clock_GetSystemPLLInClockRate>:
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 114:	4b06      	ldr	r3, [pc, #24]	; (130 <Chip_Clock_GetSystemPLLInClockRate+0x1c>)
 116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 118:	2303      	movs	r3, #3
 11a:	4013      	ands	r3, r2
 11c:	d005      	beq.n	12a <Chip_Clock_GetSystemPLLInClockRate+0x16>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
 11e:	2000      	movs	r0, #0
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 120:	2b01      	cmp	r3, #1
 122:	d103      	bne.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 124:	4b03      	ldr	r3, [pc, #12]	; (134 <Chip_Clock_GetSystemPLLInClockRate+0x20>)
 126:	6818      	ldr	r0, [r3, #0]
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_PLLCLKSRC_MAINOSC:
		clkRate = Chip_Clock_GetMainOscRate();
		break;
 128:	e000      	b.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
	case SYSCTL_PLLCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 12a:	4803      	ldr	r0, [pc, #12]	; (138 <Chip_Clock_GetSystemPLLInClockRate+0x24>)
	default:
		clkRate = 0;
	}

	return clkRate;
}
 12c:	4770      	bx	lr
 12e:	46c0      	nop			; (mov r8, r8)
 130:	40048000 	.word	0x40048000
 134:	00000b30 	.word	0x00000b30
 138:	00b71b00 	.word	0x00b71b00

0000013c <Chip_Clock_GetSystemPLLOutClockRate>:

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <Chip_Clock_GetSystemPLLOutClockRate+0x14>)
	return clkRate;
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
 13e:	b510      	push	{r4, lr}
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 140:	689c      	ldr	r4, [r3, #8]
 142:	f7ff ffe7 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
}

/* Compute a PLL frequency */
STATIC uint32_t Chip_Clock_GetPLLFreq(uint32_t PLLReg, uint32_t inputRate)
{
	uint32_t msel = ((PLLReg & 0x1F) + 1);
 146:	231f      	movs	r3, #31
 148:	4023      	ands	r3, r4
 14a:	3301      	adds	r3, #1

	return inputRate * msel;
 14c:	4358      	muls	r0, r3
/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
								 Chip_Clock_GetSystemPLLInClockRate());
}
 14e:	bd10      	pop	{r4, pc}
 150:	40048000 	.word	0x40048000

00000154 <Chip_Clock_GetMainClockRate>:

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
 154:	b508      	push	{r3, lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 156:	4b0a      	ldr	r3, [pc, #40]	; (180 <Chip_Clock_GetMainClockRate+0x2c>)
 158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 15a:	2303      	movs	r3, #3
 15c:	4013      	ands	r3, r2
 15e:	2b02      	cmp	r3, #2
 160:	d006      	beq.n	170 <Chip_Clock_GetMainClockRate+0x1c>
 162:	2b03      	cmp	r3, #3
 164:	d007      	beq.n	176 <Chip_Clock_GetMainClockRate+0x22>
 166:	2b01      	cmp	r3, #1
 168:	d108      	bne.n	17c <Chip_Clock_GetMainClockRate+0x28>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_MAINCLKSRC_PLLIN:
		clkRate = Chip_Clock_GetSystemPLLInClockRate();
 16a:	f7ff ffd3 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
		break;
 16e:	e006      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
		clkRate = Chip_Clock_GetLFOOSCRate();
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
 170:	f7ff ffbc 	bl	ec <Chip_Clock_GetWDTOSCRate>
		break;
 174:	e003      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
#endif

	case SYSCTL_MAINCLKSRC_PLLOUT:
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
 176:	f7ff ffe1 	bl	13c <Chip_Clock_GetSystemPLLOutClockRate>
		break;
 17a:	e000      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 17c:	4801      	ldr	r0, [pc, #4]	; (184 <Chip_Clock_GetMainClockRate+0x30>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 17e:	bd08      	pop	{r3, pc}
 180:	40048000 	.word	0x40048000
 184:	00b71b00 	.word	0x00b71b00

00000188 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 188:	b508      	push	{r3, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 18a:	f7ff ffe3 	bl	154 <Chip_Clock_GetMainClockRate>
 18e:	4b02      	ldr	r3, [pc, #8]	; (198 <Chip_Clock_GetSystemClockRate+0x10>)
 190:	6f99      	ldr	r1, [r3, #120]	; 0x78
 192:	f000 fb47 	bl	824 <__aeabi_uidiv>
}
 196:	bd08      	pop	{r3, pc}
 198:	40048000 	.word	0x40048000

0000019c <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 19c:	2140      	movs	r1, #64	; 0x40
 19e:	4a02      	ldr	r2, [pc, #8]	; (1a8 <Chip_GPIO_Init+0xc>)
 1a0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 1a2:	430b      	orrs	r3, r1
 1a4:	67d3      	str	r3, [r2, #124]	; 0x7c
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 1a6:	4770      	bx	lr
 1a8:	40048004 	.word	0x40048004

000001ac <Chip_GPIO_WriteDirBit>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_GPIO);
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
 1ac:	b510      	push	{r4, lr}
 1ae:	2480      	movs	r4, #128	; 0x80
 1b0:	0409      	lsls	r1, r1, #16
 1b2:	0224      	lsls	r4, r4, #8
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 1b4:	1841      	adds	r1, r0, r1
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
 1b6:	2b00      	cmp	r3, #0
 1b8:	d006      	beq.n	1c8 <Chip_GPIO_WriteDirBit+0x1c>
		pGPIO[port].DIR |= 1UL << bit;
 1ba:	2001      	movs	r0, #1
 1bc:	4090      	lsls	r0, r2
 1be:	1c02      	adds	r2, r0, #0
 1c0:	590b      	ldr	r3, [r1, r4]
 1c2:	431a      	orrs	r2, r3
 1c4:	510a      	str	r2, [r1, r4]
 1c6:	e004      	b.n	1d2 <Chip_GPIO_WriteDirBit+0x26>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 1c8:	2001      	movs	r0, #1
 1ca:	4090      	lsls	r0, r2
 1cc:	590b      	ldr	r3, [r1, r4]
 1ce:	4383      	bics	r3, r0
 1d0:	510b      	str	r3, [r1, r4]
	}
}
 1d2:	bd10      	pop	{r4, pc}

000001d4 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
 1d4:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
 1d6:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
 1d8:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
 1da:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
 1dc:	6103      	str	r3, [r0, #16]
 1de:	60c3      	str	r3, [r0, #12]

	return 1;
}
 1e0:	2001      	movs	r0, #1
 1e2:	4770      	bx	lr

000001e4 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
 1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1e6:	1c04      	adds	r4, r0, #0
 1e8:	1c0d      	adds	r5, r1, #0
	uint8_t *ptr = RingBuff->data;
 1ea:	6807      	ldr	r7, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1ec:	6923      	ldr	r3, [r4, #16]
 1ee:	68c0      	ldr	r0, [r0, #12]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
 1f0:	6861      	ldr	r1, [r4, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1f2:	1ac3      	subs	r3, r0, r3

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
 1f4:	2200      	movs	r2, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
 1f6:	428b      	cmp	r3, r1
 1f8:	d20c      	bcs.n	214 <Stack_Size+0x14>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 1fa:	f000 fb99 	bl	930 <__aeabi_uidivmod>
 1fe:	68a6      	ldr	r6, [r4, #8]
 200:	4371      	muls	r1, r6
	memcpy(ptr, data, RingBuff->itemSz);
 202:	1c32      	adds	r2, r6, #0

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 204:	1878      	adds	r0, r7, r1
	memcpy(ptr, data, RingBuff->itemSz);
 206:	1c29      	adds	r1, r5, #0
 208:	f000 fbba 	bl	980 <memcpy>
	RingBuff->head++;

	return 1;
 20c:	2201      	movs	r2, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
 20e:	68e3      	ldr	r3, [r4, #12]
 210:	3301      	adds	r3, #1
 212:	60e3      	str	r3, [r4, #12]

	return 1;
}
 214:	1c10      	adds	r0, r2, #0
 216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000218 <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
 218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 21a:	1c04      	adds	r4, r0, #0
	uint8_t *ptr = RingBuff->data;
 21c:	6807      	ldr	r7, [r0, #0]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 21e:	68e2      	ldr	r2, [r4, #12]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 220:	6900      	ldr	r0, [r0, #16]
		return 0;
 222:	2300      	movs	r3, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 224:	4282      	cmp	r2, r0
 226:	d00e      	beq.n	246 <RingBuffer_Pop+0x2e>
 228:	1c0d      	adds	r5, r1, #0
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 22a:	6861      	ldr	r1, [r4, #4]
 22c:	f000 fb80 	bl	930 <__aeabi_uidivmod>
 230:	68a6      	ldr	r6, [r4, #8]
	memcpy(data, ptr, RingBuff->itemSz);
 232:	1c28      	adds	r0, r5, #0

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 234:	4371      	muls	r1, r6
	memcpy(data, ptr, RingBuff->itemSz);
 236:	1c32      	adds	r2, r6, #0

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 238:	1879      	adds	r1, r7, r1
	memcpy(data, ptr, RingBuff->itemSz);
 23a:	f000 fba1 	bl	980 <memcpy>
	RingBuff->tail++;
 23e:	6923      	ldr	r3, [r4, #16]
 240:	3301      	adds	r3, #1
 242:	6123      	str	r3, [r4, #16]
 
	return 1;
 244:	2301      	movs	r3, #1
}
 246:	1c18      	adds	r0, r3, #0
 248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000024c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 24c:	b510      	push	{r4, lr}
 24e:	2480      	movs	r4, #128	; 0x80
 250:	4b07      	ldr	r3, [pc, #28]	; (270 <Chip_UART_Init+0x24>)
 252:	0164      	lsls	r4, r4, #5
 254:	1d19      	adds	r1, r3, #4
 256:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 258:	3398      	adds	r3, #152	; 0x98
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 25a:	4322      	orrs	r2, r4
 25c:	67ca      	str	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 25e:	2201      	movs	r2, #1
 260:	601a      	str	r2, [r3, #0]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 262:	2307      	movs	r3, #7
 264:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 266:	3b04      	subs	r3, #4
 268:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 26a:	330d      	adds	r3, #13
 26c:	6283      	str	r3, [r0, #40]	; 0x28
}
 26e:	bd10      	pop	{r4, pc}
 270:	40048000 	.word	0x40048000

00000274 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int sent = 0;
 274:	2300      	movs	r3, #0
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_UART0);
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
 276:	b510      	push	{r4, lr}
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
 278:	4293      	cmp	r3, r2
 27a:	da06      	bge.n	28a <Chip_UART_Send+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 27c:	6944      	ldr	r4, [r0, #20]
 27e:	06a4      	lsls	r4, r4, #26
 280:	d503      	bpl.n	28a <Chip_UART_Send+0x16>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
 282:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
 284:	3301      	adds	r3, #1
 286:	6004      	str	r4, [r0, #0]
 288:	e7f6      	b.n	278 <Chip_UART_Send+0x4>
	}

	return sent;
}
 28a:	1c18      	adds	r0, r3, #0
 28c:	bd10      	pop	{r4, pc}

0000028e <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
 28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 290:	1c07      	adds	r7, r0, #0
 292:	1c0e      	adds	r6, r1, #0
 294:	1c14      	adds	r4, r2, #0
	int pass, sent = 0;
 296:	2500      	movs	r5, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
 298:	2c00      	cmp	r4, #0
 29a:	dd08      	ble.n	2ae <Chip_UART_SendBlocking+0x20>
		pass = Chip_UART_Send(pUART, p8, numBytes);
 29c:	1c31      	adds	r1, r6, #0
 29e:	1c22      	adds	r2, r4, #0
 2a0:	1c38      	adds	r0, r7, #0
 2a2:	f7ff ffe7 	bl	274 <Chip_UART_Send>
		numBytes -= pass;
 2a6:	1a24      	subs	r4, r4, r0
		sent += pass;
 2a8:	182d      	adds	r5, r5, r0
		p8 += pass;
 2aa:	1836      	adds	r6, r6, r0
 2ac:	e7f4      	b.n	298 <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
 2ae:	1c28      	adds	r0, r5, #0
 2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000002b2 <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
	int readBytes = 0;
 2b2:	2300      	movs	r3, #0
	return sent;
}

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
 2b4:	b510      	push	{r4, lr}
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
 2b6:	4293      	cmp	r3, r2
 2b8:	da06      	bge.n	2c8 <Chip_UART_Read+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 2ba:	6944      	ldr	r4, [r0, #20]
 2bc:	07e4      	lsls	r4, r4, #31
 2be:	d503      	bpl.n	2c8 <Chip_UART_Read+0x16>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
 2c0:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
 2c2:	54cc      	strb	r4, [r1, r3]
		p8++;
		readBytes++;
 2c4:	3301      	adds	r3, #1
 2c6:	e7f6      	b.n	2b6 <Chip_UART_Read+0x4>
	}

	return readBytes;
}
 2c8:	1c18      	adds	r0, r3, #0
 2ca:	bd10      	pop	{r4, pc}

000002cc <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 2cc:	b570      	push	{r4, r5, r6, lr}
 2ce:	1c0e      	adds	r6, r1, #0
 2d0:	1c04      	adds	r4, r0, #0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2d2:	f7ff ff3f 	bl	154 <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 2d6:	0131      	lsls	r1, r6, #4
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2d8:	1c05      	adds	r5, r0, #0
	div = clkin / (baudrate * 16);
 2da:	f000 faa3 	bl	824 <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2de:	2280      	movs	r2, #128	; 0x80
 2e0:	1c01      	adds	r1, r0, #0
 2e2:	68e3      	ldr	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2e4:	1c0e      	adds	r6, r1, #0
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2e6:	4313      	orrs	r3, r2
 2e8:	60e3      	str	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2ea:	23ff      	movs	r3, #255	; 0xff

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
 2ec:	0a00      	lsrs	r0, r0, #8
 2ee:	401e      	ands	r6, r3
	pUART->DLM = (uint32_t) dlm;
 2f0:	4003      	ands	r3, r0
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2f2:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 2f4:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 2f6:	68e3      	ldr	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 2f8:	1c28      	adds	r0, r5, #0
 2fa:	4393      	bics	r3, r2
 2fc:	60e3      	str	r3, [r4, #12]
 2fe:	f000 fa91 	bl	824 <__aeabi_uidiv>
}
 302:	bd70      	pop	{r4, r5, r6, pc}

00000304 <SysTick_Handler>:

/**
 * SysTick Timer Interrupt Handler. Counts milliseconds since start
 */
void SysTick_Handler(void) {
	msTicks++;
 304:	4a02      	ldr	r2, [pc, #8]	; (310 <SysTick_Handler+0xc>)
 306:	6813      	ldr	r3, [r2, #0]
 308:	3301      	adds	r3, #1
 30a:	6013      	str	r3, [r2, #0]
}
 30c:	4770      	bx	lr
 30e:	46c0      	nop			; (mov r8, r8)
 310:	1000028c 	.word	0x1000028c

00000314 <CAN_IRQHandler>:

/**
 * CCAN Interrupt Handler. Calls the isr() API located in the CCAN ROM
 */
void CAN_IRQHandler(void) {
 314:	b508      	push	{r3, lr}
	LPC_CCAN_API->isr();
 316:	4b03      	ldr	r3, [pc, #12]	; (324 <CAN_IRQHandler+0x10>)
 318:	681b      	ldr	r3, [r3, #0]
 31a:	689b      	ldr	r3, [r3, #8]
 31c:	685b      	ldr	r3, [r3, #4]
 31e:	4798      	blx	r3
}
 320:	bd08      	pop	{r3, pc}
 322:	46c0      	nop			; (mov r8, r8)
 324:	1fff1ff8 	.word	0x1fff1ff8

00000328 <Board_SysTick_Init>:
// -------------------------------------------------------------
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
 328:	b510      	push	{r4, lr}
	msTicks = 0;
 32a:	2400      	movs	r4, #0
 32c:	4b0c      	ldr	r3, [pc, #48]	; (360 <Board_SysTick_Init+0x38>)
 32e:	601c      	str	r4, [r3, #0]

	// Update the value of SystemCoreClock to the clock speed in hz
	SystemCoreClockUpdate();
 330:	f7ff fed4 	bl	dc <SystemCoreClockUpdate>

	// Initialize SysTick Timer to fire interrupt at 1kHz
	return (SysTick_Config (SystemCoreClock / 1000));
 334:	21fa      	movs	r1, #250	; 0xfa
 336:	4b0b      	ldr	r3, [pc, #44]	; (364 <Board_SysTick_Init+0x3c>)
 338:	0089      	lsls	r1, r1, #2
 33a:	6818      	ldr	r0, [r3, #0]
 33c:	f000 fa72 	bl	824 <__aeabi_uidiv>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 340:	4a09      	ldr	r2, [pc, #36]	; (368 <Board_SysTick_Init+0x40>)
 342:	3801      	subs	r0, #1
 344:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 346:	20c0      	movs	r0, #192	; 0xc0
 348:	4908      	ldr	r1, [pc, #32]	; (36c <Board_SysTick_Init+0x44>)
 34a:	0600      	lsls	r0, r0, #24
 34c:	6a0b      	ldr	r3, [r1, #32]
 34e:	021b      	lsls	r3, r3, #8
 350:	0a1b      	lsrs	r3, r3, #8
 352:	4303      	orrs	r3, r0
 354:	620b      	str	r3, [r1, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 356:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 358:	6094      	str	r4, [r2, #8]
}
 35a:	1c20      	adds	r0, r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 35c:	6013      	str	r3, [r2, #0]
 35e:	bd10      	pop	{r4, pc}
 360:	1000028c 	.word	0x1000028c
 364:	10000100 	.word	0x10000100
 368:	e000e010 	.word	0xe000e010
 36c:	e000ed00 	.word	0xe000ed00

00000370 <Board_LEDs_Init>:

void Board_LEDs_Init(void) {
 370:	b510      	push	{r4, lr}
	Chip_GPIO_Init(LPC_GPIO);
 372:	24a0      	movs	r4, #160	; 0xa0
 374:	05e4      	lsls	r4, r4, #23
 376:	1c20      	adds	r0, r4, #0
 378:	f7ff ff10 	bl	19c <Chip_GPIO_Init>
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
 37c:	1c20      	adds	r0, r4, #0
 37e:	2102      	movs	r1, #2
 380:	2205      	movs	r2, #5
 382:	2301      	movs	r3, #1
 384:	f7ff ff12 	bl	1ac <Chip_GPIO_WriteDirBit>
}
 388:	bd10      	pop	{r4, pc}
	...

0000038c <Board_UART_Init>:
		SSP_Tx_Buf[i] = 0x01;
		SSP_Rx_Buf[i] = 0xAA;
	}
} 

void Board_UART_Init(uint32_t baudrate) {
 38c:	b538      	push	{r3, r4, r5, lr}
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 38e:	4b0b      	ldr	r3, [pc, #44]	; (3bc <Board_UART_Init+0x30>)
 390:	2201      	movs	r2, #1
 392:	1c19      	adds	r1, r3, #0
 394:	1c05      	adds	r5, r0, #0
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
 396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <Board_UART_Init+0x34>)
 398:	33a8      	adds	r3, #168	; 0xa8
 39a:	31a4      	adds	r1, #164	; 0xa4
 39c:	600a      	str	r2, [r1, #0]
 39e:	1c20      	adds	r0, r4, #0
 3a0:	601a      	str	r2, [r3, #0]
 3a2:	f7ff ff53 	bl	24c <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, baudrate);
 3a6:	1c29      	adds	r1, r5, #0
 3a8:	1c20      	adds	r0, r4, #0
 3aa:	f7ff ff8f 	bl	2cc <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 3ae:	2303      	movs	r3, #3
 3b0:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 3b2:	337e      	adds	r3, #126	; 0x7e
 3b4:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
 3b6:	3b01      	subs	r3, #1
 3b8:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
}
 3ba:	bd38      	pop	{r3, r4, r5, pc}
 3bc:	40044000 	.word	0x40044000
 3c0:	40008000 	.word	0x40008000

000003c4 <Board_UART_Print>:

void Board_UART_Print(const char *str) {
 3c4:	b510      	push	{r4, lr}
 3c6:	1c04      	adds	r4, r0, #0
	Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
 3c8:	f000 fb18 	bl	9fc <strlen>
 3cc:	1c21      	adds	r1, r4, #0
 3ce:	1c02      	adds	r2, r0, #0
 3d0:	4801      	ldr	r0, [pc, #4]	; (3d8 <Board_UART_Print+0x14>)
 3d2:	f7ff ff5c 	bl	28e <Chip_UART_SendBlocking>
}
 3d6:	bd10      	pop	{r4, pc}
 3d8:	40008000 	.word	0x40008000

000003dc <Board_UART_Println>:

void Board_UART_Println(const char *str) {
 3dc:	b508      	push	{r3, lr}
	Board_UART_Print(str);
 3de:	f7ff fff1 	bl	3c4 <Board_UART_Print>
	Board_UART_Print("\r\n");
 3e2:	4802      	ldr	r0, [pc, #8]	; (3ec <Board_UART_Println+0x10>)
 3e4:	f7ff ffee 	bl	3c4 <Board_UART_Print>
}
 3e8:	bd08      	pop	{r3, pc}
 3ea:	46c0      	nop			; (mov r8, r8)
 3ec:	00000b34 	.word	0x00000b34

000003f0 <Board_UART_PrintNum>:

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
 3f0:	b538      	push	{r3, r4, r5, lr}
 3f2:	1c0b      	adds	r3, r1, #0
	static char str[32];
	itoa(num, str, base);
 3f4:	4c07      	ldr	r4, [pc, #28]	; (414 <Board_UART_PrintNum+0x24>)
void Board_UART_Println(const char *str) {
	Board_UART_Print(str);
	Board_UART_Print("\r\n");
}

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
 3f6:	1c15      	adds	r5, r2, #0
	static char str[32];
	itoa(num, str, base);
 3f8:	1c21      	adds	r1, r4, #0
 3fa:	1c1a      	adds	r2, r3, #0
 3fc:	f000 fabc 	bl	978 <itoa>
	Board_UART_Print(str);
 400:	1c20      	adds	r0, r4, #0
 402:	f7ff ffdf 	bl	3c4 <Board_UART_Print>
	if (crlf) Board_UART_Print("\r\n");
 406:	2d00      	cmp	r5, #0
 408:	d002      	beq.n	410 <Board_UART_PrintNum+0x20>
 40a:	4803      	ldr	r0, [pc, #12]	; (418 <Board_UART_PrintNum+0x28>)
 40c:	f7ff ffda 	bl	3c4 <Board_UART_Print>
}
 410:	bd38      	pop	{r3, r4, r5, pc}
 412:	46c0      	nop			; (mov r8, r8)
 414:	10000108 	.word	0x10000108
 418:	00000b34 	.word	0x00000b34

0000041c <Board_UART_Read>:

void Board_UART_SendBlocking(const void *data, uint8_t num_bytes) {
	Chip_UART_SendBlocking(LPC_USART, data, num_bytes);
}

int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
 41c:	b508      	push	{r3, lr}
 41e:	1c03      	adds	r3, r0, #0
 420:	1c0a      	adds	r2, r1, #0
	return Chip_UART_Read(LPC_USART, data, num_bytes);
 422:	4803      	ldr	r0, [pc, #12]	; (430 <Board_UART_Read+0x14>)
 424:	1c19      	adds	r1, r3, #0
 426:	f7ff ff44 	bl	2b2 <Chip_UART_Read>
 42a:	b240      	sxtb	r0, r0
}
 42c:	bd08      	pop	{r3, pc}
 42e:	46c0      	nop			; (mov r8, r8)
 430:	40008000 	.word	0x40008000

00000434 <CAN_baudrate_calculate>:

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 436:	1c0c      	adds	r4, r1, #0
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 438:	2180      	movs	r1, #128	; 0x80
 43a:	1c05      	adds	r5, r0, #0
 43c:	4a1b      	ldr	r2, [pc, #108]	; (4ac <CAN_baudrate_calculate+0x78>)
 43e:	0289      	lsls	r1, r1, #10
 440:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 442:	430b      	orrs	r3, r1
 444:	67d3      	str	r3, [r2, #124]	; 0x7c
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
 446:	f7ff fe85 	bl	154 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
 44a:	1c29      	adds	r1, r5, #0
 44c:	f000 f9ea 	bl	824 <__aeabi_uidiv>
 450:	2101      	movs	r1, #1
 452:	4684      	mov	ip, r0
 454:	2503      	movs	r5, #3
 456:	434d      	muls	r5, r1
int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
	return Chip_UART_Read(LPC_USART, data, num_bytes);
}

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 458:	1c0e      	adds	r6, r1, #0
 45a:	1c2f      	adds	r7, r5, #0
 45c:	2201      	movs	r2, #1
 45e:	1e4b      	subs	r3, r1, #1
 460:	9301      	str	r3, [sp, #4]
 462:	1c38      	adds	r0, r7, #0
 464:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 466:	4584      	cmp	ip, r0
 468:	d113      	bne.n	492 <CAN_baudrate_calculate+0x5e>
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 46a:	9901      	ldr	r1, [sp, #4]

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
 46c:	3b03      	subs	r3, #3
					seg1 = segs / 2;
 46e:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 470:	6021      	str	r1, [r4, #0]
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 472:	3a01      	subs	r2, #1
 474:	0201      	lsls	r1, r0, #8
 476:	430a      	orrs	r2, r1
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
 478:	1e01      	subs	r1, r0, #0
 47a:	2903      	cmp	r1, #3
 47c:	d900      	bls.n	480 <CAN_baudrate_calculate+0x4c>
 47e:	2103      	movs	r1, #3
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 480:	0189      	lsls	r1, r1, #6
 482:	430a      	orrs	r2, r1
 484:	2107      	movs	r1, #7
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
 486:	1a1b      	subs	r3, r3, r0
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 488:	400b      	ands	r3, r1
 48a:	031b      	lsls	r3, r3, #12
 48c:	431a      	orrs	r2, r3
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
 48e:	6062      	str	r2, [r4, #4]
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
					return;
 490:	e00b      	b.n	4aa <CAN_baudrate_calculate+0x76>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
 492:	3301      	adds	r3, #1
 494:	1980      	adds	r0, r0, r6
 496:	2b12      	cmp	r3, #18
 498:	d1e5      	bne.n	466 <CAN_baudrate_calculate+0x32>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
 49a:	3201      	adds	r2, #1
 49c:	1876      	adds	r6, r6, r1
 49e:	197f      	adds	r7, r7, r5
 4a0:	2a21      	cmp	r2, #33	; 0x21
 4a2:	d1de      	bne.n	462 <CAN_baudrate_calculate+0x2e>
 4a4:	3101      	adds	r1, #1
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
 4a6:	2911      	cmp	r1, #17
 4a8:	d1d4      	bne.n	454 <CAN_baudrate_calculate+0x20>
					return;
				}
			}
		}
	}
}
 4aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 4ac:	40048004 	.word	0x40048004

000004b0 <Board_CAN_Init>:

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {
 4b0:	b510      	push	{r4, lr}
 4b2:	b08a      	sub	sp, #40	; 0x28

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 4b4:	9304      	str	r3, [sp, #16]
 4b6:	2300      	movs	r3, #0
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 4b8:	4c0d      	ldr	r4, [pc, #52]	; (4f0 <Board_CAN_Init+0x40>)

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 4ba:	9102      	str	r1, [sp, #8]
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 4bc:	4669      	mov	r1, sp

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 4be:	9203      	str	r2, [sp, #12]
 4c0:	9305      	str	r3, [sp, #20]
 4c2:	9306      	str	r3, [sp, #24]
 4c4:	9307      	str	r3, [sp, #28]
 4c6:	9308      	str	r3, [sp, #32]
 4c8:	9309      	str	r3, [sp, #36]	; 0x24
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 4ca:	f7ff ffb3 	bl	434 <CAN_baudrate_calculate>

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 4ce:	6823      	ldr	r3, [r4, #0]
 4d0:	4668      	mov	r0, sp
 4d2:	689b      	ldr	r3, [r3, #8]
 4d4:	2101      	movs	r1, #1
 4d6:	681b      	ldr	r3, [r3, #0]
 4d8:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 4da:	6823      	ldr	r3, [r4, #0]
 4dc:	a802      	add	r0, sp, #8
 4de:	689b      	ldr	r3, [r3, #8]
 4e0:	69db      	ldr	r3, [r3, #28]
 4e2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 4e4:	2280      	movs	r2, #128	; 0x80
 4e6:	4b03      	ldr	r3, [pc, #12]	; (4f4 <Board_CAN_Init+0x44>)
 4e8:	0192      	lsls	r2, r2, #6
 4ea:	601a      	str	r2, [r3, #0]

	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);
}
 4ec:	b00a      	add	sp, #40	; 0x28
 4ee:	bd10      	pop	{r4, pc}
 4f0:	1fff1ff8 	.word	0x1fff1ff8
 4f4:	e000e100 	.word	0xe000e100

000004f8 <CAN_tx>:
/*	CAN transmit callback */
/*	Function is executed by the Callback handler after
    a CAN message has been transmitted */
void CAN_tx(uint8_t msg_obj_num) {
	msg_obj_num = msg_obj_num;
}
 4f8:	4770      	bx	lr
	...

000004fc <CAN_error>:
/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
 4fc:	2201      	movs	r2, #1

/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
 4fe:	4b02      	ldr	r3, [pc, #8]	; (508 <CAN_error+0xc>)
 500:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
 502:	4b02      	ldr	r3, [pc, #8]	; (50c <CAN_error+0x10>)
 504:	701a      	strb	r2, [r3, #0]
}
 506:	4770      	bx	lr
 508:	10000130 	.word	0x10000130
 50c:	10000134 	.word	0x10000134

00000510 <CAN_rx>:
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 510:	b538      	push	{r3, r4, r5, lr}
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 512:	4c08      	ldr	r4, [pc, #32]	; (534 <CAN_rx+0x24>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 514:	4b08      	ldr	r3, [pc, #32]	; (538 <CAN_rx+0x28>)
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 516:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 518:	681b      	ldr	r3, [r3, #0]
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 51a:	1c05      	adds	r5, r0, #0
	// LED_On();
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 51c:	689b      	ldr	r3, [r3, #8]
 51e:	1c20      	adds	r0, r4, #0
 520:	68db      	ldr	r3, [r3, #12]
 522:	4798      	blx	r3
	if (msg_obj_num == 1) {
 524:	2d01      	cmp	r5, #1
 526:	d103      	bne.n	530 <CAN_rx+0x20>
		RingBuffer_Insert(&can_rx_buffer, &msg_obj);
 528:	4804      	ldr	r0, [pc, #16]	; (53c <CAN_rx+0x2c>)
 52a:	1c21      	adds	r1, r4, #0
 52c:	f7ff fe5a 	bl	1e4 <RingBuffer_Insert>
	}
}
 530:	bd38      	pop	{r3, r4, r5, pc}
 532:	46c0      	nop			; (mov r8, r8)
 534:	10000150 	.word	0x10000150
 538:	1fff1ff8 	.word	0x1fff1ff8
 53c:	10000138 	.word	0x10000138

00000540 <main>:
int main(void)
{

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 540:	20e1      	movs	r0, #225	; 0xe1

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 542:	b5f0      	push	{r4, r5, r6, r7, lr}

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 544:	0200      	lsls	r0, r0, #8

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 546:	b08b      	sub	sp, #44	; 0x2c

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 548:	f7ff ff20 	bl	38c <Board_UART_Init>
	//Board_UART_Println("Started up");

	//---------------
	// Initialize SysTick Timer to generate millisecond count
	if (Board_SysTick_Init()) {
 54c:	f7ff feec 	bl	328 <Board_SysTick_Init>
 550:	1e07      	subs	r7, r0, #0
 552:	d003      	beq.n	55c <main+0x1c>
		Board_UART_Println("Failed to Initialize SysTick. ");
 554:	486f      	ldr	r0, [pc, #444]	; (714 <main+0x1d4>)
 556:	f7ff ff41 	bl	3dc <Board_UART_Println>
		// Unrecoverable Error. Hang.
		while(1);
 55a:	e7fe      	b.n	55a <main+0x1a>
	}

	//---------------
	// Initialize GPIO and LED as output
	Board_LEDs_Init();
 55c:	f7ff ff08 	bl	370 <Board_LEDs_Init>
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 560:	2220      	movs	r2, #32
//	SSP_Buffer_Init();
	
	//---------------
	// Initialize CAN  and CAN Ring Buffer

	RingBuffer_Init(&can_rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), BUFFER_SIZE);
 562:	4d6d      	ldr	r5, [pc, #436]	; (718 <main+0x1d8>)
 564:	4b6d      	ldr	r3, [pc, #436]	; (71c <main+0x1dc>)
 566:	496e      	ldr	r1, [pc, #440]	; (720 <main+0x1e0>)
 568:	67da      	str	r2, [r3, #124]	; 0x7c
 56a:	1c28      	adds	r0, r5, #0
 56c:	3a08      	subs	r2, #8
 56e:	2308      	movs	r3, #8
 570:	f7ff fe30 	bl	1d4 <RingBuffer_Init>
	RingBuffer_Flush(&can_rx_buffer);

	Board_CAN_Init(CCAN_BAUD_RATE, CAN_rx, CAN_tx, CAN_error);
 574:	4a6b      	ldr	r2, [pc, #428]	; (724 <main+0x1e4>)
 576:	486c      	ldr	r0, [pc, #432]	; (728 <main+0x1e8>)
 578:	496c      	ldr	r1, [pc, #432]	; (72c <main+0x1ec>)
 57a:	4b6d      	ldr	r3, [pc, #436]	; (730 <main+0x1f0>)
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 57c:	612f      	str	r7, [r5, #16]
 57e:	60ef      	str	r7, [r5, #12]
 580:	f7ff ff96 	bl	4b0 <Board_CAN_Init>

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 584:	2301      	movs	r3, #1
 586:	4c6b      	ldr	r4, [pc, #428]	; (734 <main+0x1f4>)
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 588:	4e6b      	ldr	r6, [pc, #428]	; (738 <main+0x1f8>)

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 58a:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 58c:	6833      	ldr	r3, [r6, #0]
		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x000;
 58e:	6027      	str	r7, [r4, #0]
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 590:	689b      	ldr	r3, [r3, #8]

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
 592:	6067      	str	r7, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 594:	689b      	ldr	r3, [r3, #8]
 596:	1c20      	adds	r0, r4, #0
 598:	4798      	blx	r3
		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
	can_error_info = 0;
 59a:	4a68      	ldr	r2, [pc, #416]	; (73c <main+0x1fc>)

		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
 59c:	4b68      	ldr	r3, [pc, #416]	; (740 <main+0x200>)
	can_error_info = 0;
 59e:	6017      	str	r7, [r2, #0]
	bool error_flag = false;
	bool send = true;
	uint32_t lastPrint = msTicks;
 5a0:	4a68      	ldr	r2, [pc, #416]	; (744 <main+0x204>)

		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/
	can_error_flag = false;
 5a2:	701f      	strb	r7, [r3, #0]
	can_error_info = 0;
	bool error_flag = false;
	bool send = true;
	uint32_t lastPrint = msTicks;
 5a4:	6812      	ldr	r2, [r2, #0]
 5a6:	9302      	str	r3, [sp, #8]
 5a8:	9203      	str	r2, [sp, #12]

	*/
	can_error_flag = false;
	can_error_info = 0;
	bool error_flag = false;
	bool send = true;
 5aa:	2201      	movs	r2, #1
 5ac:	9201      	str	r2, [sp, #4]
	while (1) {
		if(error_flag){
	//		car_status()
			error_flag = false;
		}
		if(lastPrint < msTicks-1000){
 5ae:	4b65      	ldr	r3, [pc, #404]	; (744 <main+0x204>)
 5b0:	4a65      	ldr	r2, [pc, #404]	; (748 <main+0x208>)
 5b2:	681b      	ldr	r3, [r3, #0]
 5b4:	189b      	adds	r3, r3, r2
 5b6:	9a03      	ldr	r2, [sp, #12]
 5b8:	429a      	cmp	r2, r3
 5ba:	d20e      	bcs.n	5da <main+0x9a>
			Board_UART_Println("Sending CAN with ID: 0x7F5");
 5bc:	4863      	ldr	r0, [pc, #396]	; (74c <main+0x20c>)
 5be:	f7ff ff0d 	bl	3dc <Board_UART_Println>
			msg_obj.msgobj = 2;
 5c2:	2302      	movs	r3, #2
 5c4:	7463      	strb	r3, [r4, #17]
			msg_obj.mode_id = 0x7F5;
 5c6:	4b62      	ldr	r3, [pc, #392]	; (750 <main+0x210>)
			msg_obj.dlc = 1;
			msg_obj.data_16[0] = 1;
			LPC_CCAN_API->can_transmit(&msg_obj);	
 5c8:	1c20      	adds	r0, r4, #0
			error_flag = false;
		}
		if(lastPrint < msTicks-1000){
			Board_UART_Println("Sending CAN with ID: 0x7F5");
			msg_obj.msgobj = 2;
			msg_obj.mode_id = 0x7F5;
 5ca:	6023      	str	r3, [r4, #0]
			msg_obj.dlc = 1;
 5cc:	2301      	movs	r3, #1
 5ce:	7423      	strb	r3, [r4, #16]
			msg_obj.data_16[0] = 1;
 5d0:	8123      	strh	r3, [r4, #8]
			LPC_CCAN_API->can_transmit(&msg_obj);	
 5d2:	6833      	ldr	r3, [r6, #0]
 5d4:	689b      	ldr	r3, [r3, #8]
 5d6:	691b      	ldr	r3, [r3, #16]
 5d8:	4798      	blx	r3
		}
//		if(lastPrint < msTicks-1000){
//			lastPrint = msTicks;
//		car_status();
//		}
		if (send) {
 5da:	9b01      	ldr	r3, [sp, #4]
 5dc:	2b00      	cmp	r3, #0
 5de:	d01f      	beq.n	620 <main+0xe0>
			if (!RingBuffer_IsEmpty(&can_rx_buffer)) {
 5e0:	68eb      	ldr	r3, [r5, #12]
 5e2:	692a      	ldr	r2, [r5, #16]
 5e4:	4293      	cmp	r3, r2
 5e6:	d01b      	beq.n	620 <main+0xe0>
				CCAN_MSG_OBJ_T temp_msg;
				RingBuffer_Pop(&can_rx_buffer, &temp_msg);
 5e8:	a904      	add	r1, sp, #16
 5ea:	1c28      	adds	r0, r5, #0
 5ec:	f7ff fe14 	bl	218 <RingBuffer_Pop>
				Board_UART_PrintNum(temp_msg.mode_id,16,true);
 5f0:	9804      	ldr	r0, [sp, #16]
 5f2:	2110      	movs	r1, #16
 5f4:	2201      	movs	r2, #1
 5f6:	f7ff fefb 	bl	3f0 <Board_UART_PrintNum>
 5fa:	ab06      	add	r3, sp, #24
 5fc:	9300      	str	r3, [sp, #0]
 5fe:	ab04      	add	r3, sp, #16
 600:	7c1f      	ldrb	r7, [r3, #16]
 602:	3708      	adds	r7, #8
 604:	18ff      	adds	r7, r7, r3
				int count = temp_msg.dlc;
				int x = 0;
				while (x<count){
 606:	9b00      	ldr	r3, [sp, #0]
 608:	42bb      	cmp	r3, r7
 60a:	d009      	beq.n	620 <main+0xe0>
					Board_UART_PrintNum(temp_msg.data[x],16,true);
 60c:	9b00      	ldr	r3, [sp, #0]
 60e:	2110      	movs	r1, #16
 610:	7818      	ldrb	r0, [r3, #0]
 612:	2201      	movs	r2, #1
 614:	f7ff feec 	bl	3f0 <Board_UART_PrintNum>
 618:	9b00      	ldr	r3, [sp, #0]
 61a:	3301      	adds	r3, #1
 61c:	9300      	str	r3, [sp, #0]
 61e:	e7f2      	b.n	606 <main+0xc6>
					x++;
				}
			}	
		}

		if (can_error_flag) {
 620:	9b02      	ldr	r3, [sp, #8]
 622:	781b      	ldrb	r3, [r3, #0]
 624:	2b00      	cmp	r3, #0
 626:	d00f      	beq.n	648 <main+0x108>
			can_error_flag = false;
 628:	2300      	movs	r3, #0
 62a:	9a02      	ldr	r2, [sp, #8]
			Board_UART_Print("CAN Error: 0b");
 62c:	4849      	ldr	r0, [pc, #292]	; (754 <main+0x214>)
				}
			}	
		}

		if (can_error_flag) {
			can_error_flag = false;
 62e:	7013      	strb	r3, [r2, #0]
			Board_UART_Print("CAN Error: 0b");
 630:	f7ff fec8 	bl	3c4 <Board_UART_Print>
			itoa(can_error_info, str, 2);
 634:	4f48      	ldr	r7, [pc, #288]	; (758 <main+0x218>)
 636:	4b41      	ldr	r3, [pc, #260]	; (73c <main+0x1fc>)
 638:	1c39      	adds	r1, r7, #0
 63a:	6818      	ldr	r0, [r3, #0]
 63c:	2202      	movs	r2, #2
 63e:	f000 f99b 	bl	978 <itoa>
			Board_UART_Println(str);
 642:	1c38      	adds	r0, r7, #0
 644:	f7ff feca 	bl	3dc <Board_UART_Println>
		}

		uint8_t count;

		if ((count = Board_UART_Read(uart_rx_buffer, BUFFER_SIZE)) != 0) {
 648:	4f44      	ldr	r7, [pc, #272]	; (75c <main+0x21c>)
 64a:	2108      	movs	r1, #8
 64c:	1c38      	adds	r0, r7, #0
 64e:	f7ff fee5 	bl	41c <Board_UART_Read>
 652:	2800      	cmp	r0, #0
 654:	d0ab      	beq.n	5ae <main+0x6e>
			//Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
			switch (uart_rx_buffer[0]) {
 656:	7838      	ldrb	r0, [r7, #0]
 658:	3867      	subs	r0, #103	; 0x67
 65a:	2811      	cmp	r0, #17
 65c:	d8a7      	bhi.n	5ae <main+0x6e>
 65e:	f000 f8d7 	bl	810 <__gnu_thumb1_case_sqi>
 662:	a64e      	.short	0xa64e
 664:	a6a6a6a6 	.word	0xa6a6a6a6
 668:	09a6a618 	.word	0x09a6a618
 66c:	a654a6a6 	.word	0xa654a6a6
 670:	3aa62ba6 	.word	0x3aa62ba6
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
 674:	483a      	ldr	r0, [pc, #232]	; (760 <main+0x220>)
 676:	f7ff feb1 	bl	3dc <Board_UART_Println>
					msg_obj.msgobj = 2;
 67a:	2302      	movs	r3, #2
 67c:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x305;
 67e:	4b39      	ldr	r3, [pc, #228]	; (764 <main+0x224>)
					msg_obj.dlc = 5;
					msg_obj.data_16[0] = 0x00;
 680:	2200      	movs	r2, #0
			//Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
			switch (uart_rx_buffer[0]) {
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x305;
 682:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 5;
 684:	2305      	movs	r3, #5
 686:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x00;
					msg_obj.data_16[1] = 0x01;
 688:	3b04      	subs	r3, #4
				case 'p':
					Board_UART_Println("Sending CAN with ID: 0x305");
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x305;
					msg_obj.dlc = 5;
					msg_obj.data_16[0] = 0x00;
 68a:	8122      	strh	r2, [r4, #8]
					msg_obj.data_16[1] = 0x01;
 68c:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x00;
 68e:	81a2      	strh	r2, [r4, #12]
 690:	e010      	b.n	6b4 <main+0x174>
					msg_obj.data_16[3] = 0x01;
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'm':
					Board_UART_Println("Sending CAN with ID: 0x705");
 692:	4835      	ldr	r0, [pc, #212]	; (768 <main+0x228>)
 694:	f7ff fea2 	bl	3dc <Board_UART_Println>
					msg_obj.msgobj = 2;
 698:	2302      	movs	r3, #2
 69a:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x705;
 69c:	4b33      	ldr	r3, [pc, #204]	; (76c <main+0x22c>)
 69e:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 7;
 6a0:	2307      	movs	r3, #7
 6a2:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x01;
 6a4:	3b06      	subs	r3, #6
 6a6:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x13;
 6a8:	3312      	adds	r3, #18
 6aa:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x0111;
 6ac:	2312      	movs	r3, #18
 6ae:	33ff      	adds	r3, #255	; 0xff
 6b0:	81a3      	strh	r3, [r4, #12]
					msg_obj.data_16[3] = 0x65;
 6b2:	3bac      	subs	r3, #172	; 0xac
 6b4:	81e3      	strh	r3, [r4, #14]
 6b6:	e01c      	b.n	6f2 <main+0x1b2>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'v':
					Board_UART_Println("Sending CAN with ID: 0x301");
 6b8:	482d      	ldr	r0, [pc, #180]	; (770 <main+0x230>)
 6ba:	f7ff fe8f 	bl	3dc <Board_UART_Println>
					msg_obj.msgobj = 2;
 6be:	2302      	movs	r3, #2
 6c0:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x301;
 6c2:	4b2c      	ldr	r3, [pc, #176]	; (774 <main+0x234>)
 6c4:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 3;
 6c6:	2303      	movs	r3, #3
 6c8:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x31;
 6ca:	332e      	adds	r3, #46	; 0x2e
 6cc:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x00;
 6ce:	2300      	movs	r3, #0
 6d0:	8163      	strh	r3, [r4, #10]
					msg_obj.data_16[2] = 0x00;
 6d2:	81a3      	strh	r3, [r4, #12]
 6d4:	e00d      	b.n	6f2 <main+0x1b2>
					LPC_CCAN_API->can_transmit(&msg_obj);
					break;
				case 'x':
					Board_UART_Println("Sending CAN with ID: 0x505");
 6d6:	4828      	ldr	r0, [pc, #160]	; (778 <main+0x238>)
 6d8:	f7ff fe80 	bl	3dc <Board_UART_Println>
					msg_obj.msgobj = 2;
 6dc:	2302      	movs	r3, #2
 6de:	7463      	strb	r3, [r4, #17]
					msg_obj.mode_id = 0x505;
 6e0:	4b26      	ldr	r3, [pc, #152]	; (77c <main+0x23c>)
 6e2:	6023      	str	r3, [r4, #0]
					msg_obj.dlc = 4;
 6e4:	2304      	movs	r3, #4
 6e6:	7423      	strb	r3, [r4, #16]
					msg_obj.data_16[0] = 0x0020;
 6e8:	331c      	adds	r3, #28
 6ea:	8123      	strh	r3, [r4, #8]
					msg_obj.data_16[1] = 0x0F00;
 6ec:	23f0      	movs	r3, #240	; 0xf0
 6ee:	011b      	lsls	r3, r3, #4
 6f0:	8163      	strh	r3, [r4, #10]
					LPC_CCAN_API->can_transmit(&msg_obj);
 6f2:	6833      	ldr	r3, [r6, #0]
 6f4:	1c20      	adds	r0, r4, #0
 6f6:	689b      	ldr	r3, [r3, #8]
 6f8:	691b      	ldr	r3, [r3, #16]
 6fa:	4798      	blx	r3
					break;
 6fc:	e757      	b.n	5ae <main+0x6e>
				case 'g':
					Board_UART_PrintNum(0xFFF, 16, true);
 6fe:	4820      	ldr	r0, [pc, #128]	; (780 <main+0x240>)
 700:	2110      	movs	r1, #16
 702:	2201      	movs	r2, #1
 704:	f7ff fe74 	bl	3f0 <Board_UART_PrintNum>
					break;
 708:	e751      	b.n	5ae <main+0x6e>
				case 's':	//receive from RaspberryPi
					send = !send;
 70a:	2301      	movs	r3, #1
 70c:	9a01      	ldr	r2, [sp, #4]
 70e:	405a      	eors	r2, r3
 710:	9201      	str	r2, [sp, #4]
					break;
 712:	e74c      	b.n	5ae <main+0x6e>
 714:	00000b37 	.word	0x00000b37
 718:	10000138 	.word	0x10000138
 71c:	50020004 	.word	0x50020004
 720:	10000168 	.word	0x10000168
 724:	000004f9 	.word	0x000004f9
 728:	0007a120 	.word	0x0007a120
 72c:	00000511 	.word	0x00000511
 730:	000004fd 	.word	0x000004fd
 734:	10000150 	.word	0x10000150
 738:	1fff1ff8 	.word	0x1fff1ff8
 73c:	10000130 	.word	0x10000130
 740:	10000134 	.word	0x10000134
 744:	1000028c 	.word	0x1000028c
 748:	fffffc18 	.word	0xfffffc18
 74c:	00000b56 	.word	0x00000b56
 750:	000007f5 	.word	0x000007f5
 754:	00000b71 	.word	0x00000b71
 758:	10000228 	.word	0x10000228
 75c:	10000128 	.word	0x10000128
 760:	00000b7f 	.word	0x00000b7f
 764:	00000305 	.word	0x00000305
 768:	00000b9a 	.word	0x00000b9a
 76c:	00000705 	.word	0x00000705
 770:	00000bb5 	.word	0x00000bb5
 774:	00000301 	.word	0x00000301
 778:	00000bd0 	.word	0x00000bd0
 77c:	00000505 	.word	0x00000505
 780:	00000fff 	.word	0x00000fff

00000784 <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 784:	218e      	movs	r1, #142	; 0x8e
 786:	2020      	movs	r0, #32
 788:	4b1e      	ldr	r3, [pc, #120]	; (804 <SystemInit+0x80>)
 78a:	0089      	lsls	r1, r1, #2
 78c:	585a      	ldr	r2, [r3, r1]
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 78e:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 790:	4382      	bics	r2, r0
 792:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 794:	2200      	movs	r2, #0
 796:	621a      	str	r2, [r3, #32]
 798:	32c8      	adds	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 79a:	46c0      	nop			; (mov r8, r8)
 79c:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 79e:	2a00      	cmp	r2, #0
 7a0:	d1fb      	bne.n	79a <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 7a2:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 7a4:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 7a6:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 7a8:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 7aa:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 7ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 7ae:	4a15      	ldr	r2, [pc, #84]	; (804 <SystemInit+0x80>)
 7b0:	07c9      	lsls	r1, r1, #31
 7b2:	d5fb      	bpl.n	7ac <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 7b4:	2161      	movs	r1, #97	; 0x61
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 7b6:	208e      	movs	r0, #142	; 0x8e
 7b8:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 7ba:	6091      	str	r1, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 7bc:	0080      	lsls	r0, r0, #2
 7be:	5811      	ldr	r1, [r2, r0]
 7c0:	43a1      	bics	r1, r4
 7c2:	5011      	str	r1, [r2, r0]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 7c4:	2101      	movs	r1, #1
 7c6:	68d8      	ldr	r0, [r3, #12]
 7c8:	4a0e      	ldr	r2, [pc, #56]	; (804 <SystemInit+0x80>)
 7ca:	4208      	tst	r0, r1
 7cc:	d0fa      	beq.n	7c4 <SystemInit+0x40>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 7ce:	2000      	movs	r0, #0
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 7d0:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 7d2:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 7d4:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 7d6:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 7d8:	2001      	movs	r0, #1
 7da:	6f59      	ldr	r1, [r3, #116]	; 0x74
 7dc:	4a09      	ldr	r2, [pc, #36]	; (804 <SystemInit+0x80>)
 7de:	4201      	tst	r1, r0
 7e0:	d0fa      	beq.n	7d8 <SystemInit+0x54>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 7e2:	238e      	movs	r3, #142	; 0x8e
 7e4:	2480      	movs	r4, #128	; 0x80
 7e6:	009b      	lsls	r3, r3, #2
 7e8:	58d1      	ldr	r1, [r2, r3]
 7ea:	00e4      	lsls	r4, r4, #3
 7ec:	4321      	orrs	r1, r4
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 7ee:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 7f0:	50d1      	str	r1, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 7f2:	58d1      	ldr	r1, [r2, r3]
 7f4:	0064      	lsls	r4, r4, #1
 7f6:	4321      	orrs	r1, r4
 7f8:	50d1      	str	r1, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 7fa:	6790      	str	r0, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 7fc:	4b02      	ldr	r3, [pc, #8]	; (808 <SystemInit+0x84>)
 7fe:	4a03      	ldr	r2, [pc, #12]	; (80c <SystemInit+0x88>)
 800:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 802:	bd10      	pop	{r4, pc}
 804:	40048000 	.word	0x40048000
 808:	40048004 	.word	0x40048004
 80c:	0001005f 	.word	0x0001005f

00000810 <__gnu_thumb1_case_sqi>:
 810:	b402      	push	{r1}
 812:	4671      	mov	r1, lr
 814:	0849      	lsrs	r1, r1, #1
 816:	0049      	lsls	r1, r1, #1
 818:	5609      	ldrsb	r1, [r1, r0]
 81a:	0049      	lsls	r1, r1, #1
 81c:	448e      	add	lr, r1
 81e:	bc02      	pop	{r1}
 820:	4770      	bx	lr
 822:	46c0      	nop			; (mov r8, r8)

00000824 <__aeabi_uidiv>:
 824:	2200      	movs	r2, #0
 826:	0843      	lsrs	r3, r0, #1
 828:	428b      	cmp	r3, r1
 82a:	d374      	bcc.n	916 <__aeabi_uidiv+0xf2>
 82c:	0903      	lsrs	r3, r0, #4
 82e:	428b      	cmp	r3, r1
 830:	d35f      	bcc.n	8f2 <__aeabi_uidiv+0xce>
 832:	0a03      	lsrs	r3, r0, #8
 834:	428b      	cmp	r3, r1
 836:	d344      	bcc.n	8c2 <__aeabi_uidiv+0x9e>
 838:	0b03      	lsrs	r3, r0, #12
 83a:	428b      	cmp	r3, r1
 83c:	d328      	bcc.n	890 <__aeabi_uidiv+0x6c>
 83e:	0c03      	lsrs	r3, r0, #16
 840:	428b      	cmp	r3, r1
 842:	d30d      	bcc.n	860 <__aeabi_uidiv+0x3c>
 844:	22ff      	movs	r2, #255	; 0xff
 846:	0209      	lsls	r1, r1, #8
 848:	ba12      	rev	r2, r2
 84a:	0c03      	lsrs	r3, r0, #16
 84c:	428b      	cmp	r3, r1
 84e:	d302      	bcc.n	856 <__aeabi_uidiv+0x32>
 850:	1212      	asrs	r2, r2, #8
 852:	0209      	lsls	r1, r1, #8
 854:	d065      	beq.n	922 <__aeabi_uidiv+0xfe>
 856:	0b03      	lsrs	r3, r0, #12
 858:	428b      	cmp	r3, r1
 85a:	d319      	bcc.n	890 <__aeabi_uidiv+0x6c>
 85c:	e000      	b.n	860 <__aeabi_uidiv+0x3c>
 85e:	0a09      	lsrs	r1, r1, #8
 860:	0bc3      	lsrs	r3, r0, #15
 862:	428b      	cmp	r3, r1
 864:	d301      	bcc.n	86a <__aeabi_uidiv+0x46>
 866:	03cb      	lsls	r3, r1, #15
 868:	1ac0      	subs	r0, r0, r3
 86a:	4152      	adcs	r2, r2
 86c:	0b83      	lsrs	r3, r0, #14
 86e:	428b      	cmp	r3, r1
 870:	d301      	bcc.n	876 <__aeabi_uidiv+0x52>
 872:	038b      	lsls	r3, r1, #14
 874:	1ac0      	subs	r0, r0, r3
 876:	4152      	adcs	r2, r2
 878:	0b43      	lsrs	r3, r0, #13
 87a:	428b      	cmp	r3, r1
 87c:	d301      	bcc.n	882 <__aeabi_uidiv+0x5e>
 87e:	034b      	lsls	r3, r1, #13
 880:	1ac0      	subs	r0, r0, r3
 882:	4152      	adcs	r2, r2
 884:	0b03      	lsrs	r3, r0, #12
 886:	428b      	cmp	r3, r1
 888:	d301      	bcc.n	88e <__aeabi_uidiv+0x6a>
 88a:	030b      	lsls	r3, r1, #12
 88c:	1ac0      	subs	r0, r0, r3
 88e:	4152      	adcs	r2, r2
 890:	0ac3      	lsrs	r3, r0, #11
 892:	428b      	cmp	r3, r1
 894:	d301      	bcc.n	89a <__aeabi_uidiv+0x76>
 896:	02cb      	lsls	r3, r1, #11
 898:	1ac0      	subs	r0, r0, r3
 89a:	4152      	adcs	r2, r2
 89c:	0a83      	lsrs	r3, r0, #10
 89e:	428b      	cmp	r3, r1
 8a0:	d301      	bcc.n	8a6 <__aeabi_uidiv+0x82>
 8a2:	028b      	lsls	r3, r1, #10
 8a4:	1ac0      	subs	r0, r0, r3
 8a6:	4152      	adcs	r2, r2
 8a8:	0a43      	lsrs	r3, r0, #9
 8aa:	428b      	cmp	r3, r1
 8ac:	d301      	bcc.n	8b2 <__aeabi_uidiv+0x8e>
 8ae:	024b      	lsls	r3, r1, #9
 8b0:	1ac0      	subs	r0, r0, r3
 8b2:	4152      	adcs	r2, r2
 8b4:	0a03      	lsrs	r3, r0, #8
 8b6:	428b      	cmp	r3, r1
 8b8:	d301      	bcc.n	8be <__aeabi_uidiv+0x9a>
 8ba:	020b      	lsls	r3, r1, #8
 8bc:	1ac0      	subs	r0, r0, r3
 8be:	4152      	adcs	r2, r2
 8c0:	d2cd      	bcs.n	85e <__aeabi_uidiv+0x3a>
 8c2:	09c3      	lsrs	r3, r0, #7
 8c4:	428b      	cmp	r3, r1
 8c6:	d301      	bcc.n	8cc <__aeabi_uidiv+0xa8>
 8c8:	01cb      	lsls	r3, r1, #7
 8ca:	1ac0      	subs	r0, r0, r3
 8cc:	4152      	adcs	r2, r2
 8ce:	0983      	lsrs	r3, r0, #6
 8d0:	428b      	cmp	r3, r1
 8d2:	d301      	bcc.n	8d8 <__aeabi_uidiv+0xb4>
 8d4:	018b      	lsls	r3, r1, #6
 8d6:	1ac0      	subs	r0, r0, r3
 8d8:	4152      	adcs	r2, r2
 8da:	0943      	lsrs	r3, r0, #5
 8dc:	428b      	cmp	r3, r1
 8de:	d301      	bcc.n	8e4 <__aeabi_uidiv+0xc0>
 8e0:	014b      	lsls	r3, r1, #5
 8e2:	1ac0      	subs	r0, r0, r3
 8e4:	4152      	adcs	r2, r2
 8e6:	0903      	lsrs	r3, r0, #4
 8e8:	428b      	cmp	r3, r1
 8ea:	d301      	bcc.n	8f0 <__aeabi_uidiv+0xcc>
 8ec:	010b      	lsls	r3, r1, #4
 8ee:	1ac0      	subs	r0, r0, r3
 8f0:	4152      	adcs	r2, r2
 8f2:	08c3      	lsrs	r3, r0, #3
 8f4:	428b      	cmp	r3, r1
 8f6:	d301      	bcc.n	8fc <__aeabi_uidiv+0xd8>
 8f8:	00cb      	lsls	r3, r1, #3
 8fa:	1ac0      	subs	r0, r0, r3
 8fc:	4152      	adcs	r2, r2
 8fe:	0883      	lsrs	r3, r0, #2
 900:	428b      	cmp	r3, r1
 902:	d301      	bcc.n	908 <__aeabi_uidiv+0xe4>
 904:	008b      	lsls	r3, r1, #2
 906:	1ac0      	subs	r0, r0, r3
 908:	4152      	adcs	r2, r2
 90a:	0843      	lsrs	r3, r0, #1
 90c:	428b      	cmp	r3, r1
 90e:	d301      	bcc.n	914 <__aeabi_uidiv+0xf0>
 910:	004b      	lsls	r3, r1, #1
 912:	1ac0      	subs	r0, r0, r3
 914:	4152      	adcs	r2, r2
 916:	1a41      	subs	r1, r0, r1
 918:	d200      	bcs.n	91c <__aeabi_uidiv+0xf8>
 91a:	4601      	mov	r1, r0
 91c:	4152      	adcs	r2, r2
 91e:	4610      	mov	r0, r2
 920:	4770      	bx	lr
 922:	e7ff      	b.n	924 <__aeabi_uidiv+0x100>
 924:	b501      	push	{r0, lr}
 926:	2000      	movs	r0, #0
 928:	f000 f80c 	bl	944 <__aeabi_idiv0>
 92c:	bd02      	pop	{r1, pc}
 92e:	46c0      	nop			; (mov r8, r8)

00000930 <__aeabi_uidivmod>:
 930:	2900      	cmp	r1, #0
 932:	d0f7      	beq.n	924 <__aeabi_uidiv+0x100>
 934:	b503      	push	{r0, r1, lr}
 936:	f7ff ff75 	bl	824 <__aeabi_uidiv>
 93a:	bc0e      	pop	{r1, r2, r3}
 93c:	4342      	muls	r2, r0
 93e:	1a89      	subs	r1, r1, r2
 940:	4718      	bx	r3
 942:	46c0      	nop			; (mov r8, r8)

00000944 <__aeabi_idiv0>:
 944:	4770      	bx	lr
 946:	46c0      	nop			; (mov r8, r8)

00000948 <__itoa>:
 948:	1e93      	subs	r3, r2, #2
 94a:	b510      	push	{r4, lr}
 94c:	2b22      	cmp	r3, #34	; 0x22
 94e:	d80f      	bhi.n	970 <__itoa+0x28>
 950:	2a0a      	cmp	r2, #10
 952:	d006      	beq.n	962 <__itoa+0x1a>
 954:	2300      	movs	r3, #0
 956:	1c0c      	adds	r4, r1, #0
 958:	18c9      	adds	r1, r1, r3
 95a:	f000 f883 	bl	a64 <__utoa>
 95e:	1c20      	adds	r0, r4, #0
 960:	bd10      	pop	{r4, pc}
 962:	2800      	cmp	r0, #0
 964:	daf6      	bge.n	954 <__itoa+0xc>
 966:	232d      	movs	r3, #45	; 0x2d
 968:	4240      	negs	r0, r0
 96a:	700b      	strb	r3, [r1, #0]
 96c:	3b2c      	subs	r3, #44	; 0x2c
 96e:	e7f2      	b.n	956 <__itoa+0xe>
 970:	2300      	movs	r3, #0
 972:	2000      	movs	r0, #0
 974:	700b      	strb	r3, [r1, #0]
 976:	e7f3      	b.n	960 <__itoa+0x18>

00000978 <itoa>:
 978:	b508      	push	{r3, lr}
 97a:	f7ff ffe5 	bl	948 <__itoa>
 97e:	bd08      	pop	{r3, pc}

00000980 <memcpy>:
 980:	b570      	push	{r4, r5, r6, lr}
 982:	2a0f      	cmp	r2, #15
 984:	d932      	bls.n	9ec <memcpy+0x6c>
 986:	1c04      	adds	r4, r0, #0
 988:	430c      	orrs	r4, r1
 98a:	1c0b      	adds	r3, r1, #0
 98c:	07a4      	lsls	r4, r4, #30
 98e:	d131      	bne.n	9f4 <memcpy+0x74>
 990:	1c15      	adds	r5, r2, #0
 992:	1c04      	adds	r4, r0, #0
 994:	3d10      	subs	r5, #16
 996:	092d      	lsrs	r5, r5, #4
 998:	3501      	adds	r5, #1
 99a:	012d      	lsls	r5, r5, #4
 99c:	1949      	adds	r1, r1, r5
 99e:	681e      	ldr	r6, [r3, #0]
 9a0:	6026      	str	r6, [r4, #0]
 9a2:	685e      	ldr	r6, [r3, #4]
 9a4:	6066      	str	r6, [r4, #4]
 9a6:	689e      	ldr	r6, [r3, #8]
 9a8:	60a6      	str	r6, [r4, #8]
 9aa:	68de      	ldr	r6, [r3, #12]
 9ac:	3310      	adds	r3, #16
 9ae:	60e6      	str	r6, [r4, #12]
 9b0:	3410      	adds	r4, #16
 9b2:	4299      	cmp	r1, r3
 9b4:	d1f3      	bne.n	99e <memcpy+0x1e>
 9b6:	230f      	movs	r3, #15
 9b8:	1945      	adds	r5, r0, r5
 9ba:	4013      	ands	r3, r2
 9bc:	2b03      	cmp	r3, #3
 9be:	d91b      	bls.n	9f8 <memcpy+0x78>
 9c0:	1f1c      	subs	r4, r3, #4
 9c2:	2300      	movs	r3, #0
 9c4:	08a4      	lsrs	r4, r4, #2
 9c6:	3401      	adds	r4, #1
 9c8:	00a4      	lsls	r4, r4, #2
 9ca:	58ce      	ldr	r6, [r1, r3]
 9cc:	50ee      	str	r6, [r5, r3]
 9ce:	3304      	adds	r3, #4
 9d0:	42a3      	cmp	r3, r4
 9d2:	d1fa      	bne.n	9ca <memcpy+0x4a>
 9d4:	18ed      	adds	r5, r5, r3
 9d6:	18c9      	adds	r1, r1, r3
 9d8:	2303      	movs	r3, #3
 9da:	401a      	ands	r2, r3
 9dc:	d005      	beq.n	9ea <memcpy+0x6a>
 9de:	2300      	movs	r3, #0
 9e0:	5ccc      	ldrb	r4, [r1, r3]
 9e2:	54ec      	strb	r4, [r5, r3]
 9e4:	3301      	adds	r3, #1
 9e6:	4293      	cmp	r3, r2
 9e8:	d1fa      	bne.n	9e0 <memcpy+0x60>
 9ea:	bd70      	pop	{r4, r5, r6, pc}
 9ec:	1c05      	adds	r5, r0, #0
 9ee:	2a00      	cmp	r2, #0
 9f0:	d1f5      	bne.n	9de <memcpy+0x5e>
 9f2:	e7fa      	b.n	9ea <memcpy+0x6a>
 9f4:	1c05      	adds	r5, r0, #0
 9f6:	e7f2      	b.n	9de <memcpy+0x5e>
 9f8:	1c1a      	adds	r2, r3, #0
 9fa:	e7f8      	b.n	9ee <memcpy+0x6e>

000009fc <strlen>:
 9fc:	b510      	push	{r4, lr}
 9fe:	0783      	lsls	r3, r0, #30
 a00:	d027      	beq.n	a52 <strlen+0x56>
 a02:	7803      	ldrb	r3, [r0, #0]
 a04:	2b00      	cmp	r3, #0
 a06:	d026      	beq.n	a56 <strlen+0x5a>
 a08:	1c03      	adds	r3, r0, #0
 a0a:	2103      	movs	r1, #3
 a0c:	e002      	b.n	a14 <strlen+0x18>
 a0e:	781a      	ldrb	r2, [r3, #0]
 a10:	2a00      	cmp	r2, #0
 a12:	d01c      	beq.n	a4e <strlen+0x52>
 a14:	3301      	adds	r3, #1
 a16:	420b      	tst	r3, r1
 a18:	d1f9      	bne.n	a0e <strlen+0x12>
 a1a:	6819      	ldr	r1, [r3, #0]
 a1c:	4a0f      	ldr	r2, [pc, #60]	; (a5c <strlen+0x60>)
 a1e:	4c10      	ldr	r4, [pc, #64]	; (a60 <strlen+0x64>)
 a20:	188a      	adds	r2, r1, r2
 a22:	438a      	bics	r2, r1
 a24:	4222      	tst	r2, r4
 a26:	d10f      	bne.n	a48 <strlen+0x4c>
 a28:	3304      	adds	r3, #4
 a2a:	6819      	ldr	r1, [r3, #0]
 a2c:	4a0b      	ldr	r2, [pc, #44]	; (a5c <strlen+0x60>)
 a2e:	188a      	adds	r2, r1, r2
 a30:	438a      	bics	r2, r1
 a32:	4222      	tst	r2, r4
 a34:	d108      	bne.n	a48 <strlen+0x4c>
 a36:	3304      	adds	r3, #4
 a38:	6819      	ldr	r1, [r3, #0]
 a3a:	4a08      	ldr	r2, [pc, #32]	; (a5c <strlen+0x60>)
 a3c:	188a      	adds	r2, r1, r2
 a3e:	438a      	bics	r2, r1
 a40:	4222      	tst	r2, r4
 a42:	d0f1      	beq.n	a28 <strlen+0x2c>
 a44:	e000      	b.n	a48 <strlen+0x4c>
 a46:	3301      	adds	r3, #1
 a48:	781a      	ldrb	r2, [r3, #0]
 a4a:	2a00      	cmp	r2, #0
 a4c:	d1fb      	bne.n	a46 <strlen+0x4a>
 a4e:	1a18      	subs	r0, r3, r0
 a50:	bd10      	pop	{r4, pc}
 a52:	1c03      	adds	r3, r0, #0
 a54:	e7e1      	b.n	a1a <strlen+0x1e>
 a56:	2000      	movs	r0, #0
 a58:	e7fa      	b.n	a50 <strlen+0x54>
 a5a:	46c0      	nop			; (mov r8, r8)
 a5c:	fefefeff 	.word	0xfefefeff
 a60:	80808080 	.word	0x80808080

00000a64 <__utoa>:
 a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 a66:	4657      	mov	r7, sl
 a68:	4645      	mov	r5, r8
 a6a:	464e      	mov	r6, r9
 a6c:	b4e0      	push	{r5, r6, r7}
 a6e:	b08a      	sub	sp, #40	; 0x28
 a70:	4690      	mov	r8, r2
 a72:	466a      	mov	r2, sp
 a74:	4b1d      	ldr	r3, [pc, #116]	; (aec <__utoa+0x88>)
 a76:	1c0d      	adds	r5, r1, #0
 a78:	1c06      	adds	r6, r0, #0
 a7a:	cb13      	ldmia	r3!, {r0, r1, r4}
 a7c:	c213      	stmia	r2!, {r0, r1, r4}
 a7e:	cb13      	ldmia	r3!, {r0, r1, r4}
 a80:	c213      	stmia	r2!, {r0, r1, r4}
 a82:	cb13      	ldmia	r3!, {r0, r1, r4}
 a84:	c213      	stmia	r2!, {r0, r1, r4}
 a86:	781b      	ldrb	r3, [r3, #0]
 a88:	46ea      	mov	sl, sp
 a8a:	7013      	strb	r3, [r2, #0]
 a8c:	4643      	mov	r3, r8
 a8e:	3b02      	subs	r3, #2
 a90:	1c2f      	adds	r7, r5, #0
 a92:	2400      	movs	r4, #0
 a94:	2b22      	cmp	r3, #34	; 0x22
 a96:	d901      	bls.n	a9c <__utoa+0x38>
 a98:	e024      	b.n	ae4 <__utoa+0x80>
 a9a:	464c      	mov	r4, r9
 a9c:	1c63      	adds	r3, r4, #1
 a9e:	1c30      	adds	r0, r6, #0
 aa0:	4641      	mov	r1, r8
 aa2:	4699      	mov	r9, r3
 aa4:	f7ff ff44 	bl	930 <__aeabi_uidivmod>
 aa8:	4653      	mov	r3, sl
 aaa:	5c5b      	ldrb	r3, [r3, r1]
 aac:	1c30      	adds	r0, r6, #0
 aae:	703b      	strb	r3, [r7, #0]
 ab0:	4641      	mov	r1, r8
 ab2:	f7ff feb7 	bl	824 <__aeabi_uidiv>
 ab6:	3701      	adds	r7, #1
 ab8:	1e06      	subs	r6, r0, #0
 aba:	d1ee      	bne.n	a9a <__utoa+0x36>
 abc:	464b      	mov	r3, r9
 abe:	54e8      	strb	r0, [r5, r3]
 ac0:	2300      	movs	r3, #0
 ac2:	2c00      	cmp	r4, #0
 ac4:	d007      	beq.n	ad6 <__utoa+0x72>
 ac6:	5cea      	ldrb	r2, [r5, r3]
 ac8:	5d29      	ldrb	r1, [r5, r4]
 aca:	54e9      	strb	r1, [r5, r3]
 acc:	552a      	strb	r2, [r5, r4]
 ace:	3301      	adds	r3, #1
 ad0:	3c01      	subs	r4, #1
 ad2:	42a3      	cmp	r3, r4
 ad4:	dbf7      	blt.n	ac6 <__utoa+0x62>
 ad6:	1c28      	adds	r0, r5, #0
 ad8:	b00a      	add	sp, #40	; 0x28
 ada:	bc1c      	pop	{r2, r3, r4}
 adc:	4690      	mov	r8, r2
 ade:	4699      	mov	r9, r3
 ae0:	46a2      	mov	sl, r4
 ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 ae4:	702c      	strb	r4, [r5, #0]
 ae6:	2000      	movs	r0, #0
 ae8:	e7f6      	b.n	ad8 <__utoa+0x74>
 aea:	46c0      	nop			; (mov r8, r8)
 aec:	00000bec 	.word	0x00000bec

00000af0 <wdtOSCRate>:
 af0:	00000000 000927c0 00100590 00155cc0     .....'.......\..
 b00:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
 b10:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
 b20:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.

00000b30 <OscRateIn>:
 b30:	00000000 46000a0d 656c6961 6f742064     .......Failed to
 b40:	696e4920 6c616974 20657a69 54737953      Initialize SysT
 b50:	2e6b6369 65530020 6e69646e 41432067     ick. .Sending CA
 b60:	6977204e 49206874 30203a44 35463778     N with ID: 0x7F5
 b70:	4e414300 72724520 203a726f 53006230     .CAN Error: 0b.S
 b80:	69646e65 4320676e 77204e41 20687469     ending CAN with 
 b90:	203a4449 30337830 65530035 6e69646e     ID: 0x305.Sendin
 ba0:	41432067 6977204e 49206874 30203a44     g CAN with ID: 0
 bb0:	35303778 6e655300 676e6964 4e414320     x705.Sending CAN
 bc0:	74697720 44492068 7830203a 00313033      with ID: 0x301.
 bd0:	646e6553 20676e69 204e4143 68746977     Sending CAN with
 be0:	3a444920 35783020 00003530 33323130      ID: 0x505..0123
 bf0:	37363534 62613938 66656463 6a696867     456789abcdefghij
 c00:	6e6d6c6b 7271706f 76757473 7a797877     klmnopqrstuvwxyz
 c10:	00000000                                ....
